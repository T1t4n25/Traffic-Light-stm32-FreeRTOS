
Traffic Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f04  08004f04  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f0c  08004f0c  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004f14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca14  2000001c  08004f30  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ca30  08004f30  00006a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e200  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290d  00000000  00000000  0001424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00016b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3c  00000000  00000000  00017a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b9e  00000000  00000000  00018544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110e1  00000000  00000000  0002f0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009196c  00000000  00000000  000401c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1b2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  000d1b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d5748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e78 	.word	0x08004e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08004e78 	.word	0x08004e78

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f003 fa93 	bl	8003a00 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f857 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8b5 	bl	800064c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LED_voidInit(LED_GPIO, GREEN_LED_PIN);
 80004e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004e6:	481e      	ldr	r0, [pc, #120]	@ (8000560 <main+0x90>)
 80004e8:	f002 ffc0 	bl	800346c <LED_voidInit>
  LED_voidInit(LED_GPIO, YELLOW_LED_PIN);
 80004ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f0:	481b      	ldr	r0, [pc, #108]	@ (8000560 <main+0x90>)
 80004f2:	f002 ffbb 	bl	800346c <LED_voidInit>
  LED_voidInit(LED_GPIO, RED_LED_PIN);
 80004f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004fa:	4819      	ldr	r0, [pc, #100]	@ (8000560 <main+0x90>)
 80004fc:	f002 ffb6 	bl	800346c <LED_voidInit>
  SSD_voidInit();
 8000500:	f003 f8a6 	bl	8003650 <SSD_voidInit>

  xTaskCreate(vManualModeTask, "Manual Control", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000504:	2300      	movs	r3, #0
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	2302      	movs	r3, #2
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2300      	movs	r3, #0
 800050e:	2280      	movs	r2, #128	@ 0x80
 8000510:	4914      	ldr	r1, [pc, #80]	@ (8000564 <main+0x94>)
 8000512:	4815      	ldr	r0, [pc, #84]	@ (8000568 <main+0x98>)
 8000514:	f001 f898 	bl	8001648 <xTaskCreate>
  xTaskCreate(vTrafficMultiplexTimer, "Traffic Multiplex", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000518:	2300      	movs	r3, #0
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2301      	movs	r3, #1
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	2280      	movs	r2, #128	@ 0x80
 8000524:	4911      	ldr	r1, [pc, #68]	@ (800056c <main+0x9c>)
 8000526:	4812      	ldr	r0, [pc, #72]	@ (8000570 <main+0xa0>)
 8000528:	f001 f88e 	bl	8001648 <xTaskCreate>
  xTaskCreate(vTrafficLightTask, "Traffic Light", configMINIMAL_STACK_SIZE, NULL, 2, xTrafficLight);
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <main+0xa4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2302      	movs	r3, #2
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	2280      	movs	r2, #128	@ 0x80
 800053a:	490f      	ldr	r1, [pc, #60]	@ (8000578 <main+0xa8>)
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <main+0xac>)
 800053e:	f001 f883 	bl	8001648 <xTaskCreate>
  xTaskCreate(vTrafficTimer, "Traffic Timer", configMINIMAL_STACK_SIZE, NULL, 1, xTrafficTimer);
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <main+0xb0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2301      	movs	r3, #1
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2300      	movs	r3, #0
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	490c      	ldr	r1, [pc, #48]	@ (8000584 <main+0xb4>)
 8000552:	480d      	ldr	r0, [pc, #52]	@ (8000588 <main+0xb8>)
 8000554:	f001 f878 	bl	8001648 <xTaskCreate>

  vTaskStartScheduler();
 8000558:	f001 fad8 	bl	8001b0c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x8c>
 8000560:	40020000 	.word	0x40020000
 8000564:	08004e90 	.word	0x08004e90
 8000568:	080007d1 	.word	0x080007d1
 800056c:	08004ea0 	.word	0x08004ea0
 8000570:	080006a5 	.word	0x080006a5
 8000574:	2000003c 	.word	0x2000003c
 8000578:	08004eb4 	.word	0x08004eb4
 800057c:	080006e9 	.word	0x080006e9
 8000580:	20000040 	.word	0x20000040
 8000584:	08004ec4 	.word	0x08004ec4
 8000588:	080006c5 	.word	0x080006c5

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	@ 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	@ 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 fc32 	bl	8004e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <SystemClock_Config+0xb8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <SystemClock_Config+0xb8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <SystemClock_Config+0xb8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <SystemClock_Config+0xbc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <SystemClock_Config+0xbc>)
 80005da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <SystemClock_Config+0xbc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fd15 	bl	8004030 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800060c:	f000 f96f 	bl	80008ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 ff78 	bl	8004520 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000636:	f000 f95a 	bl	80008ee <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <MX_GPIO_Init+0x50>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <MX_GPIO_Init+0x50>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_GPIO_Init+0x50>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800067c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x54>)
 8000690:	f003 fafe 	bl	8003c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020800 	.word	0x40020800

080006a4 <vTrafficMultiplexTimer>:

/* USER CODE BEGIN 4 */

void vTrafficMultiplexTimer(void *pvParameters){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	while(1){
		SSD_voidDisplayMultiplexedNumber(seconds);
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <vTrafficMultiplexTimer+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 f96b 	bl	800398c <SSD_voidDisplayMultiplexedNumber>
		vTaskDelay(pdMS_TO_TICKS(10));
 80006b6:	200a      	movs	r0, #10
 80006b8:	f001 f8fe 	bl	80018b8 <vTaskDelay>
		SSD_voidDisplayMultiplexedNumber(seconds);
 80006bc:	bf00      	nop
 80006be:	e7f5      	b.n	80006ac <vTrafficMultiplexTimer+0x8>
 80006c0:	20000038 	.word	0x20000038

080006c4 <vTrafficTimer>:
	}

}
void vTrafficTimer(void *pvParameters){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	while (1){

		seconds++;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <vTrafficTimer+0x20>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <vTrafficTimer+0x20>)
 80006d6:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(1000));
 80006d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006dc:	f001 f8ec 	bl	80018b8 <vTaskDelay>
		seconds++;
 80006e0:	bf00      	nop
 80006e2:	e7f3      	b.n	80006cc <vTrafficTimer+0x8>
 80006e4:	20000038 	.word	0x20000038

080006e8 <vTrafficLightTask>:
	}
}


void vTrafficLightTask(void *pvParameters) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	while (1) {
		switch (currentState) {
 80006f0:	4b34      	ldr	r3, [pc, #208]	@ (80007c4 <vTrafficLightTask+0xdc>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d040      	beq.n	800077a <vTrafficLightTask+0x92>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	dc5b      	bgt.n	80007b4 <vTrafficLightTask+0xcc>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <vTrafficLightTask+0x1e>
 8000700:	2b01      	cmp	r3, #1
 8000702:	d01d      	beq.n	8000740 <vTrafficLightTask+0x58>
 8000704:	e056      	b.n	80007b4 <vTrafficLightTask+0xcc>
			case GREEN:
			LED_voidOn(LED_GPIO, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070c:	482e      	ldr	r0, [pc, #184]	@ (80007c8 <vTrafficLightTask+0xe0>)
 800070e:	f002 ff5f 	bl	80035d0 <LED_voidOn>
			LED_voidOff(LED_GPIO, RED_LED_PIN, LED_FORWARD_CONNECTION);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000718:	482b      	ldr	r0, [pc, #172]	@ (80007c8 <vTrafficLightTask+0xe0>)
 800071a:	f002 ff79 	bl	8003610 <LED_voidOff>
			LED_voidOff(LED_GPIO, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000724:	4828      	ldr	r0, [pc, #160]	@ (80007c8 <vTrafficLightTask+0xe0>)
 8000726:	f002 ff73 	bl	8003610 <LED_voidOff>
			vTaskDelay(pdMS_TO_TICKS(GREEN_LIGHT_DURATION));
 800072a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800072e:	f001 f8c3 	bl	80018b8 <vTaskDelay>
			currentState = RED;
 8000732:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <vTrafficLightTask+0xdc>)
 8000734:	2202      	movs	r2, #2
 8000736:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 8000738:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <vTrafficLightTask+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
			break;
 800073e:	e040      	b.n	80007c2 <vTrafficLightTask+0xda>

			case YELLOW:
				LED_voidOff(LED_GPIO, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000746:	4820      	ldr	r0, [pc, #128]	@ (80007c8 <vTrafficLightTask+0xe0>)
 8000748:	f002 ff62 	bl	8003610 <LED_voidOff>
				LED_voidOff(LED_GPIO, RED_LED_PIN, LED_FORWARD_CONNECTION);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000752:	481d      	ldr	r0, [pc, #116]	@ (80007c8 <vTrafficLightTask+0xe0>)
 8000754:	f002 ff5c 	bl	8003610 <LED_voidOff>
				LED_voidOn(LED_GPIO, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800075e:	481a      	ldr	r0, [pc, #104]	@ (80007c8 <vTrafficLightTask+0xe0>)
 8000760:	f002 ff36 	bl	80035d0 <LED_voidOn>
				vTaskDelay(pdMS_TO_TICKS(YELLOW_LIGHT_DURATION));
 8000764:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000768:	f001 f8a6 	bl	80018b8 <vTaskDelay>
				currentState = GREEN;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <vTrafficLightTask+0xdc>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
				seconds = 0;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <vTrafficLightTask+0xe4>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
				break;
 8000778:	e023      	b.n	80007c2 <vTrafficLightTask+0xda>

			case RED:
				LED_voidOff(LED_GPIO, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000780:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <vTrafficLightTask+0xe0>)
 8000782:	f002 ff45 	bl	8003610 <LED_voidOff>
				LED_voidOn(LED_GPIO, RED_LED_PIN, LED_FORWARD_CONNECTION);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078c:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <vTrafficLightTask+0xe0>)
 800078e:	f002 ff1f 	bl	80035d0 <LED_voidOn>
				LED_voidOff(LED_GPIO, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <vTrafficLightTask+0xe0>)
 800079a:	f002 ff39 	bl	8003610 <LED_voidOff>
				vTaskDelay(pdMS_TO_TICKS(RED_LIGHT_DURATION));
 800079e:	f241 7070 	movw	r0, #6000	@ 0x1770
 80007a2:	f001 f889 	bl	80018b8 <vTaskDelay>
				currentState = YELLOW;
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <vTrafficLightTask+0xdc>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
				seconds = 0;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <vTrafficLightTask+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
				break;
 80007b2:	e006      	b.n	80007c2 <vTrafficLightTask+0xda>

			default:
				currentState = GREEN;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <vTrafficLightTask+0xdc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
				seconds = 0 - 1;
 80007ba:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <vTrafficLightTask+0xe4>)
 80007bc:	22ff      	movs	r2, #255	@ 0xff
 80007be:	701a      	strb	r2, [r3, #0]
				break;
 80007c0:	bf00      	nop
		switch (currentState) {
 80007c2:	e795      	b.n	80006f0 <vTrafficLightTask+0x8>
 80007c4:	20000039 	.word	0x20000039
 80007c8:	40020000 	.word	0x40020000
 80007cc:	20000038 	.word	0x20000038

080007d0 <vManualModeTask>:
		}
	}
}

void vManualModeTask(void *pvParameters){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	GPIO_PinState xMode = GPIO_PIN_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState xRed = GPIO_PIN_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState xGreen = GPIO_PIN_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	737b      	strb	r3, [r7, #13]
	//eTaskState xTrafficTimerState;
	while(1){
		xMode	= HAL_GPIO_ReadPin(MANUAL_MODE_PORT, MANUAL_MODE_PIN);
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4835      	ldr	r0, [pc, #212]	@ (80008c0 <vManualModeTask+0xf0>)
 80007ea:	f003 fbd5 	bl	8003f98 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
		xRed 	= HAL_GPIO_ReadPin(MANUAL_MODE_PORT, RED_MODE_PIN);
 80007f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f6:	4832      	ldr	r0, [pc, #200]	@ (80008c0 <vManualModeTask+0xf0>)
 80007f8:	f003 fbce 	bl	8003f98 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73bb      	strb	r3, [r7, #14]
		xGreen	= HAL_GPIO_ReadPin(MANUAL_MODE_PORT, GREEN_MODE_PIN);
 8000800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000804:	482e      	ldr	r0, [pc, #184]	@ (80008c0 <vManualModeTask+0xf0>)
 8000806:	f003 fbc7 	bl	8003f98 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	737b      	strb	r3, [r7, #13]
		// Manual mode toggle off
		if(xMode == GPIO_PIN_SET){
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d13e      	bne.n	8000892 <vManualModeTask+0xc2>
			//vTaskSuspend(xTrafficTimer);
			//vTaskSuspend(xTrafficLight);
			if(xRed == GPIO_PIN_SET){
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d112      	bne.n	8000840 <vManualModeTask+0x70>
				LED_voidOff(LED_GPIO, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000820:	4828      	ldr	r0, [pc, #160]	@ (80008c4 <vManualModeTask+0xf4>)
 8000822:	f002 fef5 	bl	8003610 <LED_voidOff>
				LED_voidOn(LED_GPIO, RED_LED_PIN, LED_FORWARD_CONNECTION);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082c:	4825      	ldr	r0, [pc, #148]	@ (80008c4 <vManualModeTask+0xf4>)
 800082e:	f002 fecf 	bl	80035d0 <LED_voidOn>
				LED_voidOff(LED_GPIO, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000838:	4822      	ldr	r0, [pc, #136]	@ (80008c4 <vManualModeTask+0xf4>)
 800083a:	f002 fee9 	bl	8003610 <LED_voidOff>
 800083e:	e03a      	b.n	80008b6 <vManualModeTask+0xe6>
			}
			else if(xGreen == GPIO_PIN_SET){
 8000840:	7b7b      	ldrb	r3, [r7, #13]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d112      	bne.n	800086c <vManualModeTask+0x9c>
				LED_voidOn(LED_GPIO, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800084c:	481d      	ldr	r0, [pc, #116]	@ (80008c4 <vManualModeTask+0xf4>)
 800084e:	f002 febf 	bl	80035d0 <LED_voidOn>
				LED_voidOff(LED_GPIO, RED_LED_PIN, LED_FORWARD_CONNECTION);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000858:	481a      	ldr	r0, [pc, #104]	@ (80008c4 <vManualModeTask+0xf4>)
 800085a:	f002 fed9 	bl	8003610 <LED_voidOff>
				LED_voidOff(LED_GPIO, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000864:	4817      	ldr	r0, [pc, #92]	@ (80008c4 <vManualModeTask+0xf4>)
 8000866:	f002 fed3 	bl	8003610 <LED_voidOff>
 800086a:	e024      	b.n	80008b6 <vManualModeTask+0xe6>
			}
			else{
				LED_voidOff(LED_GPIO, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000872:	4814      	ldr	r0, [pc, #80]	@ (80008c4 <vManualModeTask+0xf4>)
 8000874:	f002 fecc 	bl	8003610 <LED_voidOff>
				LED_voidOff(LED_GPIO, RED_LED_PIN, LED_FORWARD_CONNECTION);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <vManualModeTask+0xf4>)
 8000880:	f002 fec6 	bl	8003610 <LED_voidOff>
				LED_voidOff(LED_GPIO, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <vManualModeTask+0xf4>)
 800088c:	f002 fec0 	bl	8003610 <LED_voidOff>
 8000890:	e011      	b.n	80008b6 <vManualModeTask+0xe6>
			}
		}
		else{
			if(eTaskGetState(xTrafficTimer) == eSuspended){
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <vManualModeTask+0xf8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f844 	bl	8001924 <eTaskGetState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d109      	bne.n	80008b6 <vManualModeTask+0xe6>
				vTaskResume(xTrafficTimer);
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <vManualModeTask+0xf8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f8d2 	bl	8001a50 <vTaskResume>
				vTaskResume(xTrafficLight);
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <vManualModeTask+0xfc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f8cd 	bl	8001a50 <vTaskResume>
			else{
				//do nothing
			}

		}
		vTaskDelay(pdMS_TO_TICKS(200));
 80008b6:	20c8      	movs	r0, #200	@ 0xc8
 80008b8:	f000 fffe 	bl	80018b8 <vTaskDelay>
		xMode	= HAL_GPIO_ReadPin(MANUAL_MODE_PORT, MANUAL_MODE_PIN);
 80008bc:	e792      	b.n	80007e4 <vManualModeTask+0x14>
 80008be:	bf00      	nop
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	20000040 	.word	0x20000040
 80008cc:	2000003c 	.word	0x2000003c

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f003 f8af 	bl	8003a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f2:	b672      	cpsid	i
}
 80008f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f6:	bf00      	nop
 80008f8:	e7fd      	b.n	80008f6 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	@ 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <HAL_InitTick+0xe8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a33      	ldr	r2, [pc, #204]	@ (8000a34 <HAL_InitTick+0xe8>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <HAL_InitTick+0xe8>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f003 ff98 	bl	80048b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000992:	f003 ff7d 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8000996:	6378      	str	r0, [r7, #52]	@ 0x34
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099a:	f003 ff79 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a6:	4a24      	ldr	r2, [pc, #144]	@ (8000a38 <HAL_InitTick+0xec>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009b2:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009ba:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009c2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009da:	4818      	ldr	r0, [pc, #96]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009dc:	f003 ff9e 	bl	800491c <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d11b      	bne.n	8000a26 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009ee:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <HAL_InitTick+0xf0>)
 80009f0:	f003 ffee 	bl	80049d0 <HAL_TIM_Base_Start_IT>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d111      	bne.n	8000a26 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a02:	201c      	movs	r0, #28
 8000a04:	f003 f936 	bl	8003c74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d808      	bhi.n	8000a20 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	201c      	movs	r0, #28
 8000a14:	f003 f912 	bl	8003c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a18:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <HAL_InitTick+0xf4>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e002      	b.n	8000a26 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3738      	adds	r7, #56	@ 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	20000044 	.word	0x20000044
 8000a40:	20000014 	.word	0x20000014

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM2_IRQHandler+0x10>)
 8000a82:	f004 f807 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000044 	.word	0x20000044

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f004 f997 	bl	8004e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fcf3 	bl	80004d0 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000af8:	08004f14 	.word	0x08004f14
  ldr r2, =_sbss
 8000afc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b00:	2000ca30 	.word	0x2000ca30

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>

08000b06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f103 0208 	add.w	r2, r3, #8
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f103 0208 	add.w	r2, r3, #8
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f103 0208 	add.w	r2, r3, #8
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbe:	d103      	bne.n	8000bc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e00c      	b.n	8000be2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e002      	b.n	8000bd6 <vListInsert+0x2e>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d2f6      	bcs.n	8000bd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	6892      	ldr	r2, [r2, #8]
 8000c30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6852      	ldr	r2, [r2, #4]
 8000c3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d103      	bne.n	8000c4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10b      	bne.n	8000c9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c88:	f383 8811 	msr	BASEPRI, r3
 8000c8c:	f3bf 8f6f 	isb	sy
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000c9c:	f002 f8ec 	bl	8002e78 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ca8:	68f9      	ldr	r1, [r7, #12]
 8000caa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000cac:	fb01 f303 	mul.w	r3, r1, r3
 8000cb0:	441a      	add	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000cd2:	fb01 f303 	mul.w	r3, r1, r3
 8000cd6:	441a      	add	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	22ff      	movs	r2, #255	@ 0xff
 8000ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	22ff      	movs	r2, #255	@ 0xff
 8000ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d114      	bne.n	8000d1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d01a      	beq.n	8000d30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3310      	adds	r3, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 f97a 	bl	8001ff8 <xTaskRemoveFromEventList>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d012      	beq.n	8000d30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <xQueueGenericReset+0xd0>)
 8000d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	f3bf 8f4f 	dsb	sy
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	e009      	b.n	8000d30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3310      	adds	r3, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fef0 	bl	8000b06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3324      	adds	r3, #36	@ 0x24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff feeb 	bl	8000b06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000d30:	f002 f8d4 	bl	8002edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000ed04 	.word	0xe000ed04

08000d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10b      	bne.n	8000d70 <xQueueGenericCreate+0x2c>
	__asm volatile
 8000d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d5c:	f383 8811 	msr	BASEPRI, r3
 8000d60:	f3bf 8f6f 	isb	sy
 8000d64:	f3bf 8f4f 	dsb	sy
 8000d68:	613b      	str	r3, [r7, #16]
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	e004      	b.n	8000d86 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3350      	adds	r3, #80	@ 0x50
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 f98e 	bl	80030ac <pvPortMalloc>
 8000d90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3350      	adds	r3, #80	@ 0x50
 8000d9c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	4613      	mov	r3, r2
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 f805 	bl	8000dba <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000db0:	69bb      	ldr	r3, [r7, #24]
	}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e002      	b.n	8000ddc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000de8:	2101      	movs	r1, #1
 8000dea:	69b8      	ldr	r0, [r7, #24]
 8000dec:	f7ff ff40 	bl	8000c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10b      	bne.n	8000e34 <xQueueGenericSend+0x34>
	__asm volatile
 8000e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e20:	f383 8811 	msr	BASEPRI, r3
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <xQueueGenericSend+0x42>
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <xQueueGenericSend+0x46>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <xQueueGenericSend+0x48>
 8000e46:	2300      	movs	r3, #0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10b      	bne.n	8000e64 <xQueueGenericSend+0x64>
	__asm volatile
 8000e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e50:	f383 8811 	msr	BASEPRI, r3
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d103      	bne.n	8000e72 <xQueueGenericSend+0x72>
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <xQueueGenericSend+0x76>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <xQueueGenericSend+0x78>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10b      	bne.n	8000e94 <xQueueGenericSend+0x94>
	__asm volatile
 8000e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e80:	f383 8811 	msr	BASEPRI, r3
 8000e84:	f3bf 8f6f 	isb	sy
 8000e88:	f3bf 8f4f 	dsb	sy
 8000e8c:	623b      	str	r3, [r7, #32]
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e94:	f001 fa72 	bl	800237c <xTaskGetSchedulerState>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <xQueueGenericSend+0xa4>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <xQueueGenericSend+0xa8>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <xQueueGenericSend+0xaa>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10b      	bne.n	8000ec6 <xQueueGenericSend+0xc6>
	__asm volatile
 8000eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	61fb      	str	r3, [r7, #28]
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	e7fd      	b.n	8000ec2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000ec6:	f001 ffd7 	bl	8002e78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d302      	bcc.n	8000edc <xQueueGenericSend+0xdc>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d129      	bne.n	8000f30 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ee2:	f000 fa43 	bl	800136c <prvCopyDataToQueue>
 8000ee6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d010      	beq.n	8000f12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef2:	3324      	adds	r3, #36	@ 0x24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 f87f 	bl	8001ff8 <xTaskRemoveFromEventList>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000f00:	4b3f      	ldr	r3, [pc, #252]	@ (8001000 <xQueueGenericSend+0x200>)
 8000f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	f3bf 8f4f 	dsb	sy
 8000f0c:	f3bf 8f6f 	isb	sy
 8000f10:	e00a      	b.n	8000f28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000f18:	4b39      	ldr	r3, [pc, #228]	@ (8001000 <xQueueGenericSend+0x200>)
 8000f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	f3bf 8f4f 	dsb	sy
 8000f24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000f28:	f001 ffd8 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e063      	b.n	8000ff8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000f36:	f001 ffd1 	bl	8002edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e05c      	b.n	8000ff8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 f8b9 	bl	80020c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f52:	f001 ffc3 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f56:	f000 fe27 	bl	8001ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f5a:	f001 ff8d 	bl	8002e78 <vPortEnterCritical>
 8000f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6a:	d103      	bne.n	8000f74 <xQueueGenericSend+0x174>
 8000f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d103      	bne.n	8000f8a <xQueueGenericSend+0x18a>
 8000f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000f8a:	f001 ffa7 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f8e:	1d3a      	adds	r2, r7, #4
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f8b8 	bl	800210c <xTaskCheckForTimeOut>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d124      	bne.n	8000fec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000fa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000fa4:	f000 fada 	bl	800155c <prvIsQueueFull>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d018      	beq.n	8000fe0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 ffcc 	bl	8001f54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000fbe:	f000 fa65 	bl	800148c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000fc2:	f000 fdff 	bl	8001bc4 <xTaskResumeAll>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f47f af7c 	bne.w	8000ec6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <xQueueGenericSend+0x200>)
 8000fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	e772      	b.n	8000ec6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000fe2:	f000 fa53 	bl	800148c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000fe6:	f000 fded 	bl	8001bc4 <xTaskResumeAll>
 8000fea:	e76c      	b.n	8000ec6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000fee:	f000 fa4d 	bl	800148c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ff2:	f000 fde7 	bl	8001bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000ff6:	2300      	movs	r3, #0
		}
	}
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3738      	adds	r7, #56	@ 0x38
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	e000ed04 	.word	0xe000ed04

08001004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	@ 0x38
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <xQueueGenericSendFromISR+0x3e>
 800103a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <xQueueGenericSendFromISR+0x42>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <xQueueGenericSendFromISR+0x44>
 8001046:	2300      	movs	r3, #0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10b      	bne.n	8001064 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800104c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001050:	f383 8811 	msr	BASEPRI, r3
 8001054:	f3bf 8f6f 	isb	sy
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	623b      	str	r3, [r7, #32]
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d103      	bne.n	8001072 <xQueueGenericSendFromISR+0x6e>
 800106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800106c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <xQueueGenericSendFromISR+0x72>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <xQueueGenericSendFromISR+0x74>
 8001076:	2300      	movs	r3, #0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	61fb      	str	r3, [r7, #28]
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001094:	f001 ffc8 	bl	8003028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001098:	f3ef 8211 	mrs	r2, BASEPRI
 800109c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a0:	f383 8811 	msr	BASEPRI, r3
 80010a4:	f3bf 8f6f 	isb	sy
 80010a8:	f3bf 8f4f 	dsb	sy
 80010ac:	61ba      	str	r2, [r7, #24]
 80010ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80010b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010bc:	429a      	cmp	r2, r3
 80010be:	d302      	bcc.n	80010c6 <xQueueGenericSendFromISR+0xc2>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d12c      	bne.n	8001120 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80010c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80010cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010d6:	f000 f949 	bl	800136c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80010da:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	d112      	bne.n	800110a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d016      	beq.n	800111a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ee:	3324      	adds	r3, #36	@ 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 ff81 	bl	8001ff8 <xTaskRemoveFromEventList>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00e      	beq.n	800111a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e007      	b.n	800111a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800110a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800110e:	3301      	adds	r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	b25a      	sxtb	r2, r3
 8001114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800111a:	2301      	movs	r3, #1
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800111e:	e001      	b.n	8001124 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
 8001124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001126:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800112e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001132:	4618      	mov	r0, r3
 8001134:	3738      	adds	r7, #56	@ 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	@ 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10b      	bne.n	8001170 <xQueueGenericReceive+0x34>
	__asm volatile
 8001158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115c:	f383 8811 	msr	BASEPRI, r3
 8001160:	f3bf 8f6f 	isb	sy
 8001164:	f3bf 8f4f 	dsb	sy
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <xQueueGenericReceive+0x42>
 8001176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <xQueueGenericReceive+0x46>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <xQueueGenericReceive+0x48>
 8001182:	2300      	movs	r3, #0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10b      	bne.n	80011a0 <xQueueGenericReceive+0x64>
	__asm volatile
 8001188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118c:	f383 8811 	msr	BASEPRI, r3
 8001190:	f3bf 8f6f 	isb	sy
 8001194:	f3bf 8f4f 	dsb	sy
 8001198:	623b      	str	r3, [r7, #32]
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011a0:	f001 f8ec 	bl	800237c <xTaskGetSchedulerState>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <xQueueGenericReceive+0x74>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <xQueueGenericReceive+0x78>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <xQueueGenericReceive+0x7a>
 80011b4:	2300      	movs	r3, #0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10b      	bne.n	80011d2 <xQueueGenericReceive+0x96>
	__asm volatile
 80011ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011be:	f383 8811 	msr	BASEPRI, r3
 80011c2:	f3bf 8f6f 	isb	sy
 80011c6:	f3bf 8f4f 	dsb	sy
 80011ca:	61fb      	str	r3, [r7, #28]
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	e7fd      	b.n	80011ce <xQueueGenericReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80011d2:	f001 fe51 	bl	8002e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d046      	beq.n	8001270 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80011e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011ec:	f000 f928 	bl	8001440 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d121      	bne.n	800123a <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80011f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011fc:	639a      	str	r2, [r3, #56]	@ 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001206:	f001 f9d5 	bl	80025b4 <pvTaskIncrementMutexHeldCount>
 800120a:	4602      	mov	r2, r0
 800120c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d027      	beq.n	8001268 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121a:	3310      	adds	r3, #16
 800121c:	4618      	mov	r0, r3
 800121e:	f000 feeb 	bl	8001ff8 <xTaskRemoveFromEventList>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01f      	beq.n	8001268 <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001228:	4b4f      	ldr	r3, [pc, #316]	@ (8001368 <xQueueGenericReceive+0x22c>)
 800122a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	f3bf 8f4f 	dsb	sy
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	e016      	b.n	8001268 <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00f      	beq.n	8001268 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800124a:	3324      	adds	r3, #36	@ 0x24
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fed3 	bl	8001ff8 <xTaskRemoveFromEventList>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001258:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <xQueueGenericReceive+0x22c>)
 800125a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	f3bf 8f4f 	dsb	sy
 8001264:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001268:	f001 fe38 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 800126c:	2301      	movs	r3, #1
 800126e:	e077      	b.n	8001360 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001276:	f001 fe31 	bl	8002edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800127a:	2300      	movs	r3, #0
 800127c:	e070      	b.n	8001360 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 800127e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001280:	2b00      	cmp	r3, #0
 8001282:	d106      	bne.n	8001292 <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4618      	mov	r0, r3
 800128a:	f000 ff19 	bl	80020c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800128e:	2301      	movs	r3, #1
 8001290:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001292:	f001 fe23 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001296:	f000 fc87 	bl	8001ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800129a:	f001 fded 	bl	8002e78 <vPortEnterCritical>
 800129e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012aa:	d103      	bne.n	80012b4 <xQueueGenericReceive+0x178>
 80012ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80012b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d103      	bne.n	80012ca <xQueueGenericReceive+0x18e>
 80012c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80012ca:	f001 fe07 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012ce:	1d3a      	adds	r2, r7, #4
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 ff18 	bl	800210c <xTaskCheckForTimeOut>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d131      	bne.n	8001346 <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012e4:	f000 f924 	bl	8001530 <prvIsQueueEmpty>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d025      	beq.n	800133a <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 80012f6:	f001 fdbf 	bl	8002e78 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80012fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 f85a 	bl	80023b8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001304:	f001 fdea 	bl	8002edc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800130a:	3324      	adds	r3, #36	@ 0x24
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fe1f 	bl	8001f54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001318:	f000 f8b8 	bl	800148c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800131c:	f000 fc52 	bl	8001bc4 <xTaskResumeAll>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	f47f af55 	bne.w	80011d2 <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <xQueueGenericReceive+0x22c>)
 800132a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	f3bf 8f6f 	isb	sy
 8001338:	e74b      	b.n	80011d2 <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800133a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800133c:	f000 f8a6 	bl	800148c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001340:	f000 fc40 	bl	8001bc4 <xTaskResumeAll>
 8001344:	e745      	b.n	80011d2 <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001348:	f000 f8a0 	bl	800148c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800134c:	f000 fc3a 	bl	8001bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001352:	f000 f8ed 	bl	8001530 <prvIsQueueEmpty>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f43f af3a 	beq.w	80011d2 <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800135e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001360:	4618      	mov	r0, r3
 8001362:	3738      	adds	r7, #56	@ 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	e000ed04 	.word	0xe000ed04

0800136c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d14d      	bne.n	800142e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f884 	bl	80024a4 <xTaskPriorityDisinherit>
 800139c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	e043      	b.n	800142e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d119      	bne.n	80013e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6898      	ldr	r0, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	461a      	mov	r2, r3
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	f003 fd50 	bl	8004e5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	441a      	add	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d32b      	bcc.n	800142e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	e026      	b.n	800142e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	68d8      	ldr	r0, [r3, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	461a      	mov	r2, r3
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	f003 fd36 	bl	8004e5c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	425b      	negs	r3, r3
 80013fa:	441a      	add	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	425b      	negs	r3, r3
 8001416:	441a      	add	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d105      	bne.n	800142e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	3b01      	subs	r3, #1
 800142c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001436:	697b      	ldr	r3, [r7, #20]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d018      	beq.n	8001484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	441a      	add	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d303      	bcc.n	8001474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	461a      	mov	r2, r3
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f003 fcec 	bl	8004e5c <memcpy>
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001494:	f001 fcf0 	bl	8002e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800149e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014a0:	e011      	b.n	80014c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d012      	beq.n	80014d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3324      	adds	r3, #36	@ 0x24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fda2 	bl	8001ff8 <xTaskRemoveFromEventList>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80014ba:	f000 fe89 	bl	80021d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dce9      	bgt.n	80014a2 <prvUnlockQueue+0x16>
 80014ce:	e000      	b.n	80014d2 <prvUnlockQueue+0x46>
					break;
 80014d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	22ff      	movs	r2, #255	@ 0xff
 80014d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80014da:	f001 fcff 	bl	8002edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80014de:	f001 fccb 	bl	8002e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80014ea:	e011      	b.n	8001510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d012      	beq.n	800151a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3310      	adds	r3, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fd7d 	bl	8001ff8 <xTaskRemoveFromEventList>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001504:	f000 fe64 	bl	80021d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	3b01      	subs	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001514:	2b00      	cmp	r3, #0
 8001516:	dce9      	bgt.n	80014ec <prvUnlockQueue+0x60>
 8001518:	e000      	b.n	800151c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800151a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	22ff      	movs	r2, #255	@ 0xff
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001524:	f001 fcda 	bl	8002edc <vPortExitCritical>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001538:	f001 fc9e 	bl	8002e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001544:	2301      	movs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e001      	b.n	800154e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800154e:	f001 fcc5 	bl	8002edc <vPortExitCritical>

	return xReturn;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001564:	f001 fc88 	bl	8002e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001570:	429a      	cmp	r2, r3
 8001572:	d102      	bne.n	800157a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001574:	2301      	movs	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e001      	b.n	800157e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800157e:	f001 fcad 	bl	8002edc <vPortExitCritical>

	return xReturn;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e014      	b.n	80015c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800159c:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <vQueueAddToRegistry+0x50>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80015a8:	490c      	ldr	r1, [pc, #48]	@ (80015dc <vQueueAddToRegistry+0x50>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <vQueueAddToRegistry+0x50>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80015be:	e006      	b.n	80015ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	d9e7      	bls.n	800159c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000008c 	.word	0x2000008c

080015e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80015f0:	f001 fc42 	bl	8002e78 <vPortEnterCritical>
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d103      	bne.n	800160a <vQueueWaitForMessageRestricted+0x2a>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001610:	b25b      	sxtb	r3, r3
 8001612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001616:	d103      	bne.n	8001620 <vQueueWaitForMessageRestricted+0x40>
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001620:	f001 fc5c 	bl	8002edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3324      	adds	r3, #36	@ 0x24
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fcb3 	bl	8001fa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff26 	bl	800148c <prvUnlockQueue>
	}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	@ 0x30
 800164c:	af04      	add	r7, sp, #16
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fd25 	bl	80030ac <pvPortMalloc>
 8001662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00e      	beq.n	8001688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800166a:	2058      	movs	r0, #88	@ 0x58
 800166c:	f001 fd1e 	bl	80030ac <pvPortMalloc>
 8001670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	631a      	str	r2, [r3, #48]	@ 0x30
 800167e:	e005      	b.n	800168c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001680:	6978      	ldr	r0, [r7, #20]
 8001682:	f001 fddb 	bl	800323c <vPortFree>
 8001686:	e001      	b.n	800168c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d013      	beq.n	80016ba <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001692:	88fa      	ldrh	r2, [r7, #6]
 8001694:	2300      	movs	r3, #0
 8001696:	9303      	str	r3, [sp, #12]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 f80e 	bl	80016ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016ae:	69f8      	ldr	r0, [r7, #28]
 80016b0:	f000 f894 	bl	80017dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	e002      	b.n	80016c0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016c0:	69bb      	ldr	r3, [r7, #24]
	}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b088      	sub	sp, #32
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	21a5      	movs	r1, #165	@ 0xa5
 80016e4:	f003 fb8e 	bl	8004e04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80016e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016f2:	3b01      	subs	r3, #1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f023 0307 	bic.w	r3, r3, #7
 8001700:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800170c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001710:	f383 8811 	msr	BASEPRI, r3
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	f3bf 8f4f 	dsb	sy
 800171c:	617b      	str	r3, [r7, #20]
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	e012      	b.n	8001750 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	7819      	ldrb	r1, [r3, #0]
 8001732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	3334      	adds	r3, #52	@ 0x34
 800173a:	460a      	mov	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3301      	adds	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	2b09      	cmp	r3, #9
 8001754:	d9e9      	bls.n	800172a <prvInitialiseNewTask+0x60>
 8001756:	e000      	b.n	800175a <prvInitialiseNewTask+0x90>
		{
			break;
 8001758:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001764:	2b04      	cmp	r3, #4
 8001766:	d901      	bls.n	800176c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001768:	2304      	movs	r3, #4
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001776:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177a:	2200      	movs	r2, #0
 800177c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800177e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001780:	3304      	adds	r3, #4
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f9df 	bl	8000b46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178a:	3318      	adds	r3, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f9da 	bl	8000b46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001796:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179a:	f1c3 0205 	rsb	r2, r3, #5
 800179e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017aa:	2200      	movs	r2, #0
 80017ac:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	f001 fa50 	bl	8002c60 <pxPortInitialiseStack>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80017c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017e4:	f001 fb48 	bl	8002e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <prvAddNewTaskToReadyList+0xc0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a2b      	ldr	r2, [pc, #172]	@ (800189c <prvAddNewTaskToReadyList+0xc0>)
 80017f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017f2:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017fa:	4a29      	ldr	r2, [pc, #164]	@ (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001800:	4b26      	ldr	r3, [pc, #152]	@ (800189c <prvAddNewTaskToReadyList+0xc0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d110      	bne.n	800182a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001808:	f000 fd06 	bl	8002218 <prvInitialiseTaskLists>
 800180c:	e00d      	b.n	800182a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <prvAddNewTaskToReadyList+0xc8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	429a      	cmp	r2, r3
 8001822:	d802      	bhi.n	800182a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001824:	4a1e      	ldr	r2, [pc, #120]	@ (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800182a:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <prvAddNewTaskToReadyList+0xcc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a1d      	ldr	r2, [pc, #116]	@ (80018a8 <prvAddNewTaskToReadyList+0xcc>)
 8001832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001834:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <prvAddNewTaskToReadyList+0xcc>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	2201      	movs	r2, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <prvAddNewTaskToReadyList+0xd0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <prvAddNewTaskToReadyList+0xd0>)
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <prvAddNewTaskToReadyList+0xd4>)
 800185c:	441a      	add	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3304      	adds	r3, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f7ff f97b 	bl	8000b60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800186a:	f001 fb37 	bl	8002edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <prvAddNewTaskToReadyList+0xc8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00e      	beq.n	8001894 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <prvAddNewTaskToReadyList+0xd8>)
 8001886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200001a4 	.word	0x200001a4
 80018a0:	200000cc 	.word	0x200000cc
 80018a4:	200001b0 	.word	0x200001b0
 80018a8:	200001c0 	.word	0x200001c0
 80018ac:	200001ac 	.word	0x200001ac
 80018b0:	200000d0 	.word	0x200000d0
 80018b4:	e000ed04 	.word	0xe000ed04

080018b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d018      	beq.n	80018fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <vTaskDelay+0x64>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <vTaskDelay+0x32>
	__asm volatile
 80018d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	60bb      	str	r3, [r7, #8]
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018ea:	f000 f95d 	bl	8001ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fe73 	bl	80025dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018f6:	f000 f965 	bl	8001bc4 <xTaskResumeAll>
 80018fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <vTaskDelay+0x68>)
 8001904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200001cc 	.word	0x200001cc
 8001920:	e000ed04 	.word	0xe000ed04

08001924 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10b      	bne.n	800194e <eTaskGetState+0x2a>
	__asm volatile
 8001936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800193a:	f383 8811 	msr	BASEPRI, r3
 800193e:	f3bf 8f6f 	isb	sy
 8001942:	f3bf 8f4f 	dsb	sy
 8001946:	60bb      	str	r3, [r7, #8]
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	e7fd      	b.n	800194a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <eTaskGetState+0xa0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d102      	bne.n	800195e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8001958:	2300      	movs	r3, #0
 800195a:	75fb      	strb	r3, [r7, #23]
 800195c:	e02d      	b.n	80019ba <eTaskGetState+0x96>
		}
		else
		{
			taskENTER_CRITICAL();
 800195e:	f001 fa8b 	bl	8002e78 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8001968:	f001 fab8 	bl	8002edc <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800196c:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <eTaskGetState+0xa4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	429a      	cmp	r2, r3
 8001974:	d004      	beq.n	8001980 <eTaskGetState+0x5c>
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <eTaskGetState+0xa8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d102      	bne.n	8001986 <eTaskGetState+0x62>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8001980:	2302      	movs	r3, #2
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e019      	b.n	80019ba <eTaskGetState+0x96>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <eTaskGetState+0xac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d109      	bne.n	80019a2 <eTaskGetState+0x7e>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <eTaskGetState+0x78>
					{
						eReturn = eSuspended;
 8001996:	2303      	movs	r3, #3
 8001998:	75fb      	strb	r3, [r7, #23]
 800199a:	e00e      	b.n	80019ba <eTaskGetState+0x96>
					}
					else
					{
						eReturn = eBlocked;
 800199c:	2302      	movs	r3, #2
 800199e:	75fb      	strb	r3, [r7, #23]
 80019a0:	e00b      	b.n	80019ba <eTaskGetState+0x96>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <eTaskGetState+0xb0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d002      	beq.n	80019b0 <eTaskGetState+0x8c>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <eTaskGetState+0x92>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80019b0:	2304      	movs	r3, #4
 80019b2:	75fb      	strb	r3, [r7, #23]
 80019b4:	e001      	b.n	80019ba <eTaskGetState+0x96>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200000cc 	.word	0x200000cc
 80019c8:	2000015c 	.word	0x2000015c
 80019cc:	20000160 	.word	0x20000160
 80019d0:	20000190 	.word	0x20000190
 80019d4:	20000178 	.word	0x20000178

080019d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10b      	bne.n	8001a06 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80019ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	60fb      	str	r3, [r7, #12]
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <prvTaskIsTaskSuspended+0x70>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <prvTaskIsTaskSuspended+0x3c>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <prvTaskIsTaskSuspended+0x3e>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00f      	beq.n	8001a3a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <prvTaskIsTaskSuspended+0x74>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00a      	beq.n	8001a3a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <prvTaskIsTaskSuspended+0x58>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <prvTaskIsTaskSuspended+0x5a>
 8001a30:	2300      	movs	r3, #0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001a3a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000190 	.word	0x20000190
 8001a4c:	20000164 	.word	0x20000164

08001a50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10b      	bne.n	8001a7a <vTaskResume+0x2a>
	__asm volatile
 8001a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a66:	f383 8811 	msr	BASEPRI, r3
 8001a6a:	f3bf 8f6f 	isb	sy
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	60bb      	str	r3, [r7, #8]
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d039      	beq.n	8001af4 <vTaskResume+0xa4>
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <vTaskResume+0xac>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d034      	beq.n	8001af4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8001a8a:	f001 f9f5 	bl	8002e78 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff ffa2 	bl	80019d8 <prvTaskIsTaskSuspended>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d02a      	beq.n	8001af0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f8bb 	bl	8000c1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <vTaskResume+0xb0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	4a13      	ldr	r2, [pc, #76]	@ (8001b00 <vTaskResume+0xb0>)
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4a10      	ldr	r2, [pc, #64]	@ (8001b04 <vTaskResume+0xb4>)
 8001ac4:	441a      	add	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f7ff f847 	bl	8000b60 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <vTaskResume+0xac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d307      	bcc.n	8001af0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <vTaskResume+0xb8>)
 8001ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001af0:	f001 f9f4 	bl	8002edc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000cc 	.word	0x200000cc
 8001b00:	200001ac 	.word	0x200001ac
 8001b04:	200000d0 	.word	0x200000d0
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <vTaskStartScheduler+0x84>)
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	491d      	ldr	r1, [pc, #116]	@ (8001b94 <vTaskStartScheduler+0x88>)
 8001b20:	481d      	ldr	r0, [pc, #116]	@ (8001b98 <vTaskStartScheduler+0x8c>)
 8001b22:	f7ff fd91 	bl	8001648 <xTaskCreate>
 8001b26:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001b2e:	f000 fdbb 	bl	80026a8 <xTimerCreateTimerTask>
 8001b32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d116      	bne.n	8001b68 <vTaskStartScheduler+0x5c>
	__asm volatile
 8001b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	60bb      	str	r3, [r7, #8]
}
 8001b4c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <vTaskStartScheduler+0x90>)
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b56:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <vTaskStartScheduler+0x94>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <vTaskStartScheduler+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b62:	f001 f8f9 	bl	8002d58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b66:	e00f      	b.n	8001b88 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	d10b      	bne.n	8001b88 <vTaskStartScheduler+0x7c>
	__asm volatile
 8001b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	607b      	str	r3, [r7, #4]
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <vTaskStartScheduler+0x78>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200001c8 	.word	0x200001c8
 8001b94:	08004ed4 	.word	0x08004ed4
 8001b98:	080021e9 	.word	0x080021e9
 8001b9c:	200001c4 	.word	0x200001c4
 8001ba0:	200001b0 	.word	0x200001b0
 8001ba4:	200001a8 	.word	0x200001a8

08001ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <vTaskSuspendAll+0x18>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	4a03      	ldr	r2, [pc, #12]	@ (8001bc0 <vTaskSuspendAll+0x18>)
 8001bb4:	6013      	str	r3, [r2, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	200001cc 	.word	0x200001cc

08001bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001bd2:	4b42      	ldr	r3, [pc, #264]	@ (8001cdc <xTaskResumeAll+0x118>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10b      	bne.n	8001bf2 <xTaskResumeAll+0x2e>
	__asm volatile
 8001bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	603b      	str	r3, [r7, #0]
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	e7fd      	b.n	8001bee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001bf2:	f001 f941 	bl	8002e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001bf6:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <xTaskResumeAll+0x118>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a37      	ldr	r2, [pc, #220]	@ (8001cdc <xTaskResumeAll+0x118>)
 8001bfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c00:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <xTaskResumeAll+0x118>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d161      	bne.n	8001ccc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c08:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <xTaskResumeAll+0x11c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05d      	beq.n	8001ccc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c10:	e02e      	b.n	8001c70 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <xTaskResumeAll+0x120>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fffb 	bl	8000c1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fff6 	bl	8000c1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce8 <xTaskResumeAll+0x124>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce8 <xTaskResumeAll+0x124>)
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <xTaskResumeAll+0x128>)
 8001c4e:	441a      	add	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f7fe ff82 	bl	8000b60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c60:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <xTaskResumeAll+0x12c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <xTaskResumeAll+0x130>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <xTaskResumeAll+0x120>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1cc      	bne.n	8001c12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c7e:	f000 fb57 	bl	8002330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001c82:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <xTaskResumeAll+0x134>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c8e:	f000 f847 	bl	8001d20 <xTaskIncrementTick>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <xTaskResumeAll+0x130>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f1      	bne.n	8001c8e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <xTaskResumeAll+0x134>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001cb0:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <xTaskResumeAll+0x130>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <xTaskResumeAll+0x138>)
 8001cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ccc:	f001 f906 	bl	8002edc <vPortExitCritical>

	return xAlreadyYielded;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200001cc 	.word	0x200001cc
 8001ce0:	200001a4 	.word	0x200001a4
 8001ce4:	20000164 	.word	0x20000164
 8001ce8:	200001ac 	.word	0x200001ac
 8001cec:	200000d0 	.word	0x200000d0
 8001cf0:	200000cc 	.word	0x200000cc
 8001cf4:	200001b8 	.word	0x200001b8
 8001cf8:	200001b4 	.word	0x200001b4
 8001cfc:	e000ed04 	.word	0xe000ed04

08001d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <xTaskGetTickCount+0x1c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200001a8 	.word	0x200001a8

08001d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d2a:	4b51      	ldr	r3, [pc, #324]	@ (8001e70 <xTaskIncrementTick+0x150>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 808e 	bne.w	8001e50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001d34:	4b4f      	ldr	r3, [pc, #316]	@ (8001e74 <xTaskIncrementTick+0x154>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <xTaskIncrementTick+0x154>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d121      	bne.n	8001d8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001d48:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <xTaskIncrementTick+0x158>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8001d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d56:	f383 8811 	msr	BASEPRI, r3
 8001d5a:	f3bf 8f6f 	isb	sy
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	603b      	str	r3, [r7, #0]
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	e7fd      	b.n	8001d66 <xTaskIncrementTick+0x46>
 8001d6a:	4b43      	ldr	r3, [pc, #268]	@ (8001e78 <xTaskIncrementTick+0x158>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	4b42      	ldr	r3, [pc, #264]	@ (8001e7c <xTaskIncrementTick+0x15c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a40      	ldr	r2, [pc, #256]	@ (8001e78 <xTaskIncrementTick+0x158>)
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4a40      	ldr	r2, [pc, #256]	@ (8001e7c <xTaskIncrementTick+0x15c>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <xTaskIncrementTick+0x160>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	4a3e      	ldr	r2, [pc, #248]	@ (8001e80 <xTaskIncrementTick+0x160>)
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	f000 fad2 	bl	8002330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <xTaskIncrementTick+0x164>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d34d      	bcc.n	8001e32 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d96:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <xTaskIncrementTick+0x158>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <xTaskIncrementTick+0x84>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <xTaskIncrementTick+0x86>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001daa:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <xTaskIncrementTick+0x164>)
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	601a      	str	r2, [r3, #0]
					break;
 8001db2:	e03e      	b.n	8001e32 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001db4:	4b30      	ldr	r3, [pc, #192]	@ (8001e78 <xTaskIncrementTick+0x158>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d203      	bcs.n	8001dd4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e84 <xTaskIncrementTick+0x164>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
						break;
 8001dd2:	e02e      	b.n	8001e32 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ff1e 	bl	8000c1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3318      	adds	r3, #24
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff15 	bl	8000c1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <xTaskIncrementTick+0x168>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	4a22      	ldr	r2, [pc, #136]	@ (8001e88 <xTaskIncrementTick+0x168>)
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e8c <xTaskIncrementTick+0x16c>)
 8001e10:	441a      	add	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3304      	adds	r3, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f7fe fea1 	bl	8000b60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <xTaskIncrementTick+0x170>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3b4      	bcc.n	8001d96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e30:	e7b1      	b.n	8001d96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <xTaskIncrementTick+0x170>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e38:	4914      	ldr	r1, [pc, #80]	@ (8001e8c <xTaskIncrementTick+0x16c>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d907      	bls.n	8001e5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e004      	b.n	8001e5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001e50:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <xTaskIncrementTick+0x174>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a0f      	ldr	r2, [pc, #60]	@ (8001e94 <xTaskIncrementTick+0x174>)
 8001e58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <xTaskIncrementTick+0x178>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001e66:	697b      	ldr	r3, [r7, #20]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200001cc 	.word	0x200001cc
 8001e74:	200001a8 	.word	0x200001a8
 8001e78:	2000015c 	.word	0x2000015c
 8001e7c:	20000160 	.word	0x20000160
 8001e80:	200001bc 	.word	0x200001bc
 8001e84:	200001c4 	.word	0x200001c4
 8001e88:	200001ac 	.word	0x200001ac
 8001e8c:	200000d0 	.word	0x200000d0
 8001e90:	200000cc 	.word	0x200000cc
 8001e94:	200001b4 	.word	0x200001b4
 8001e98:	200001b8 	.word	0x200001b8

08001e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ea2:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <vTaskSwitchContext+0xa4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <vTaskSwitchContext+0xa8>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001eb0:	e040      	b.n	8001f34 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <vTaskSwitchContext+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001eb8:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <vTaskSwitchContext+0xac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
 8001ec8:	f1c3 031f 	rsb	r3, r3, #31
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	491f      	ldr	r1, [pc, #124]	@ (8001f4c <vTaskSwitchContext+0xb0>)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <vTaskSwitchContext+0x5e>
	__asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	607b      	str	r3, [r7, #4]
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <vTaskSwitchContext+0x5a>
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4a11      	ldr	r2, [pc, #68]	@ (8001f4c <vTaskSwitchContext+0xb0>)
 8001f06:	4413      	add	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d104      	bne.n	8001f2a <vTaskSwitchContext+0x8e>
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <vTaskSwitchContext+0xb4>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	200001cc 	.word	0x200001cc
 8001f44:	200001b8 	.word	0x200001b8
 8001f48:	200001ac 	.word	0x200001ac
 8001f4c:	200000d0 	.word	0x200000d0
 8001f50:	200000cc 	.word	0x200000cc

08001f54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10b      	bne.n	8001f7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	60fb      	str	r3, [r7, #12]
}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <vTaskPlaceOnEventList+0x48>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3318      	adds	r3, #24
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7fe fe0f 	bl	8000ba8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f000 fb25 	bl	80025dc <prvAddCurrentTaskToDelayedList>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200000cc 	.word	0x200000cc

08001fa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10b      	bne.n	8001fca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8001fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	617b      	str	r3, [r7, #20]
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	e7fd      	b.n	8001fc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <vTaskPlaceOnEventListRestricted+0x54>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3318      	adds	r3, #24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7fe fdc4 	bl	8000b60 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68b8      	ldr	r0, [r7, #8]
 8001fe8:	f000 faf8 	bl	80025dc <prvAddCurrentTaskToDelayedList>
	}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200000cc 	.word	0x200000cc

08001ff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800200e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	60fb      	str	r3, [r7, #12]
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3318      	adds	r3, #24
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fdf5 	bl	8000c1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <xTaskRemoveFromEventList+0xb0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11c      	bne.n	8002072 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	3304      	adds	r3, #4
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fdec 	bl	8000c1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	2201      	movs	r2, #1
 8002048:	409a      	lsls	r2, r3
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <xTaskRemoveFromEventList+0xb4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <xTaskRemoveFromEventList+0xb4>)
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <xTaskRemoveFromEventList+0xb8>)
 8002062:	441a      	add	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	3304      	adds	r3, #4
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f7fe fd78 	bl	8000b60 <vListInsertEnd>
 8002070:	e005      	b.n	800207e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	3318      	adds	r3, #24
 8002076:	4619      	mov	r1, r3
 8002078:	480e      	ldr	r0, [pc, #56]	@ (80020b4 <xTaskRemoveFromEventList+0xbc>)
 800207a:	f7fe fd71 	bl	8000b60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <xTaskRemoveFromEventList+0xc0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	429a      	cmp	r2, r3
 800208a:	d905      	bls.n	8002098 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800208c:	2301      	movs	r3, #1
 800208e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002090:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <xTaskRemoveFromEventList+0xc4>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e001      	b.n	800209c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800209c:	697b      	ldr	r3, [r7, #20]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200001cc 	.word	0x200001cc
 80020ac:	200001ac 	.word	0x200001ac
 80020b0:	200000d0 	.word	0x200000d0
 80020b4:	20000164 	.word	0x20000164
 80020b8:	200000cc 	.word	0x200000cc
 80020bc:	200001b8 	.word	0x200001b8

080020c0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80020ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	60fb      	str	r3, [r7, #12]
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <vTaskSetTimeOutState+0x44>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <vTaskSetTimeOutState+0x48>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	605a      	str	r2, [r3, #4]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200001bc 	.word	0x200001bc
 8002108:	200001a8 	.word	0x200001a8

0800210c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	60fb      	str	r3, [r7, #12]
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800213a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	60bb      	str	r3, [r7, #8]
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	e7fd      	b.n	800214e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002152:	f000 fe91 	bl	8002e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002156:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <xTaskCheckForTimeOut+0xbc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d102      	bne.n	800216c <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e026      	b.n	80021ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <xTaskCheckForTimeOut+0xc0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d007      	beq.n	8002188 <xTaskCheckForTimeOut+0x7c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d302      	bcc.n	8002188 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e018      	b.n	80021ba <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d20e      	bcs.n	80021b6 <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1acb      	subs	r3, r1, r3
 80021a4:	441a      	add	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff88 	bl	80020c0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e001      	b.n	80021ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80021ba:	f000 fe8f 	bl	8002edc <vPortExitCritical>

	return xReturn;
 80021be:	697b      	ldr	r3, [r7, #20]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200001a8 	.word	0x200001a8
 80021cc:	200001bc 	.word	0x200001bc

080021d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <vTaskMissedYield+0x14>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200001b8 	.word	0x200001b8

080021e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021f0:	f000 f852 	bl	8002298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <prvIdleTask+0x28>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d9f9      	bls.n	80021f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <prvIdleTask+0x2c>)
 80021fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800220c:	e7f0      	b.n	80021f0 <prvIdleTask+0x8>
 800220e:	bf00      	nop
 8002210:	200000d0 	.word	0x200000d0
 8002214:	e000ed04 	.word	0xe000ed04

08002218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	e00c      	b.n	800223e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <prvInitialiseTaskLists+0x60>)
 8002230:	4413      	add	r3, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fc67 	bl	8000b06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d9ef      	bls.n	8002224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002244:	480d      	ldr	r0, [pc, #52]	@ (800227c <prvInitialiseTaskLists+0x64>)
 8002246:	f7fe fc5e 	bl	8000b06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800224a:	480d      	ldr	r0, [pc, #52]	@ (8002280 <prvInitialiseTaskLists+0x68>)
 800224c:	f7fe fc5b 	bl	8000b06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <prvInitialiseTaskLists+0x6c>)
 8002252:	f7fe fc58 	bl	8000b06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002256:	480c      	ldr	r0, [pc, #48]	@ (8002288 <prvInitialiseTaskLists+0x70>)
 8002258:	f7fe fc55 	bl	8000b06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800225c:	480b      	ldr	r0, [pc, #44]	@ (800228c <prvInitialiseTaskLists+0x74>)
 800225e:	f7fe fc52 	bl	8000b06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <prvInitialiseTaskLists+0x78>)
 8002264:	4a05      	ldr	r2, [pc, #20]	@ (800227c <prvInitialiseTaskLists+0x64>)
 8002266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <prvInitialiseTaskLists+0x7c>)
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <prvInitialiseTaskLists+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200000d0 	.word	0x200000d0
 800227c:	20000134 	.word	0x20000134
 8002280:	20000148 	.word	0x20000148
 8002284:	20000164 	.word	0x20000164
 8002288:	20000178 	.word	0x20000178
 800228c:	20000190 	.word	0x20000190
 8002290:	2000015c 	.word	0x2000015c
 8002294:	20000160 	.word	0x20000160

08002298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800229e:	e028      	b.n	80022f2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80022a0:	f7ff fc82 	bl	8001ba8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80022a4:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <prvCheckTasksWaitingTermination+0x6c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80022b4:	f7ff fc86 	bl	8001bc4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80022be:	f000 fddb 	bl	8002e78 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <prvCheckTasksWaitingTermination+0x6c>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fca3 	bl	8000c1a <uxListRemove>
					--uxCurrentNumberOfTasks;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <prvCheckTasksWaitingTermination+0x70>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3b01      	subs	r3, #1
 80022da:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <prvCheckTasksWaitingTermination+0x70>)
 80022dc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <prvCheckTasksWaitingTermination+0x74>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	4a09      	ldr	r2, [pc, #36]	@ (800230c <prvCheckTasksWaitingTermination+0x74>)
 80022e6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80022e8:	f000 fdf8 	bl	8002edc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f000 f80f 	bl	8002310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <prvCheckTasksWaitingTermination+0x74>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1d2      	bne.n	80022a0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000178 	.word	0x20000178
 8002308:	200001a4 	.word	0x200001a4
 800230c:	2000018c 	.word	0x2000018c

08002310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	4618      	mov	r0, r3
 800231e:	f000 ff8d 	bl	800323c <vPortFree>
			vPortFree( pxTCB );
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 ff8a 	bl	800323c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <prvResetNextTaskUnblockTime+0x44>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <prvResetNextTaskUnblockTime+0x14>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <prvResetNextTaskUnblockTime+0x16>
 8002344:	2300      	movs	r3, #0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <prvResetNextTaskUnblockTime+0x48>)
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002352:	e008      	b.n	8002366 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002354:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <prvResetNextTaskUnblockTime+0x44>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a05      	ldr	r2, [pc, #20]	@ (8002378 <prvResetNextTaskUnblockTime+0x48>)
 8002364:	6013      	str	r3, [r2, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2000015c 	.word	0x2000015c
 8002378:	200001c4 	.word	0x200001c4

0800237c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002382:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <xTaskGetSchedulerState+0x34>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800238a:	2301      	movs	r3, #1
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	e008      	b.n	80023a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <xTaskGetSchedulerState+0x38>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002398:	2302      	movs	r3, #2
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e001      	b.n	80023a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80023a2:	687b      	ldr	r3, [r7, #4]
	}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	200001b0 	.word	0x200001b0
 80023b4:	200001cc 	.word	0x200001cc

080023b8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d062      	beq.n	8002490 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <vTaskPriorityInherit+0xe0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d25b      	bcs.n	8002490 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db06      	blt.n	80023ee <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <vTaskPriorityInherit+0xe0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f1c3 0205 	rsb	r2, r3, #5
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6959      	ldr	r1, [r3, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4a27      	ldr	r2, [pc, #156]	@ (800249c <vTaskPriorityInherit+0xe4>)
 8002400:	4413      	add	r3, r2
 8002402:	4299      	cmp	r1, r3
 8002404:	d101      	bne.n	800240a <vTaskPriorityInherit+0x52>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <vTaskPriorityInherit+0x54>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03a      	beq.n	8002486 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3304      	adds	r3, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fc00 	bl	8000c1a <uxListRemove>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d115      	bne.n	800244c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002424:	491d      	ldr	r1, [pc, #116]	@ (800249c <vTaskPriorityInherit+0xe4>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <vTaskPriorityInherit+0x94>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	2201      	movs	r2, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <vTaskPriorityInherit+0xe8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4013      	ands	r3, r2
 8002448:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <vTaskPriorityInherit+0xe8>)
 800244a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800244c:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <vTaskPriorityInherit+0xe0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	2201      	movs	r2, #1
 800245c:	409a      	lsls	r2, r3
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <vTaskPriorityInherit+0xe8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	4a0e      	ldr	r2, [pc, #56]	@ (80024a0 <vTaskPriorityInherit+0xe8>)
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4a09      	ldr	r2, [pc, #36]	@ (800249c <vTaskPriorityInherit+0xe4>)
 8002476:	441a      	add	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f7fe fb6e 	bl	8000b60 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002484:	e004      	b.n	8002490 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <vTaskPriorityInherit+0xe0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200000cc 	.word	0x200000cc
 800249c:	200000d0 	.word	0x200000d0
 80024a0:	200001ac 	.word	0x200001ac

080024a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d070      	beq.n	800259c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80024ba:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <xTaskPriorityDisinherit+0x104>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d00b      	beq.n	80024dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	60fb      	str	r3, [r7, #12]
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	60bb      	str	r3, [r7, #8]
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250e:	429a      	cmp	r2, r3
 8002510:	d044      	beq.n	800259c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d140      	bne.n	800259c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	3304      	adds	r3, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fb7b 	bl	8000c1a <uxListRemove>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252e:	491f      	ldr	r1, [pc, #124]	@ (80025ac <xTaskPriorityDisinherit+0x108>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <xTaskPriorityDisinherit+0xb2>
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	2201      	movs	r2, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <xTaskPriorityDisinherit+0x10c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4013      	ands	r3, r2
 8002552:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <xTaskPriorityDisinherit+0x10c>)
 8002554:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002562:	f1c3 0205 	rsb	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	2201      	movs	r2, #1
 8002570:	409a      	lsls	r2, r3
 8002572:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <xTaskPriorityDisinherit+0x10c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <xTaskPriorityDisinherit+0x10c>)
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <xTaskPriorityDisinherit+0x108>)
 800258a:	441a      	add	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7fe fae4 	bl	8000b60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002598:	2301      	movs	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800259c:	697b      	ldr	r3, [r7, #20]
	}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200000cc 	.word	0x200000cc
 80025ac:	200000d0 	.word	0x200000d0
 80025b0:	200001ac 	.word	0x200001ac

080025b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80025b8:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025c6:	3201      	adds	r2, #1
 80025c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 80025ca:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80025cc:	681b      	ldr	r3, [r3, #0]
	}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	200000cc 	.word	0x200000cc

080025dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025ec:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3304      	adds	r3, #4
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fb11 	bl	8000c1a <uxListRemove>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	2201      	movs	r2, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4013      	ands	r3, r2
 8002612:	4a20      	ldr	r2, [pc, #128]	@ (8002694 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002614:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d10a      	bne.n	8002634 <prvAddCurrentTaskToDelayedList+0x58>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002624:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	4619      	mov	r1, r3
 800262c:	481a      	ldr	r0, [pc, #104]	@ (8002698 <prvAddCurrentTaskToDelayedList+0xbc>)
 800262e:	f7fe fa97 	bl	8000b60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002632:	e026      	b.n	8002682 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d209      	bcs.n	8002660 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800264c:	4b13      	ldr	r3, [pc, #76]	@ (800269c <prvAddCurrentTaskToDelayedList+0xc0>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3304      	adds	r3, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7fe faa5 	bl	8000ba8 <vListInsert>
}
 800265e:	e010      	b.n	8002682 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3304      	adds	r3, #4
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7fe fa9b 	bl	8000ba8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002672:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d202      	bcs.n	8002682 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800267c:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200001a8 	.word	0x200001a8
 8002690:	200000cc 	.word	0x200000cc
 8002694:	200001ac 	.word	0x200001ac
 8002698:	20000190 	.word	0x20000190
 800269c:	20000160 	.word	0x20000160
 80026a0:	2000015c 	.word	0x2000015c
 80026a4:	200001c4 	.word	0x200001c4

080026a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80026b2:	f000 fa9f 	bl	8002bf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <xTimerCreateTimerTask+0x58>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80026be:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <xTimerCreateTimerTask+0x5c>)
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2302      	movs	r3, #2
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026cc:	490e      	ldr	r1, [pc, #56]	@ (8002708 <xTimerCreateTimerTask+0x60>)
 80026ce:	480f      	ldr	r0, [pc, #60]	@ (800270c <xTimerCreateTimerTask+0x64>)
 80026d0:	f7fe ffba 	bl	8001648 <xTaskCreate>
 80026d4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	603b      	str	r3, [r7, #0]
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000200 	.word	0x20000200
 8002704:	20000204 	.word	0x20000204
 8002708:	08004edc 	.word	0x08004edc
 800270c:	08002831 	.word	0x08002831

08002710 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	@ 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <xTimerGenericCommand+0x30>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	623b      	str	r3, [r7, #32]
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <xTimerGenericCommand+0x98>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d02a      	beq.n	800279e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	dc18      	bgt.n	800278c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800275a:	f7ff fe0f 	bl	800237c <xTaskGetSchedulerState>
 800275e:	4603      	mov	r3, r0
 8002760:	2b02      	cmp	r3, #2
 8002762:	d109      	bne.n	8002778 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <xTimerGenericCommand+0x98>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f107 0114 	add.w	r1, r7, #20
 800276c:	2300      	movs	r3, #0
 800276e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002770:	f7fe fb46 	bl	8000e00 <xQueueGenericSend>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24
 8002776:	e012      	b.n	800279e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <xTimerGenericCommand+0x98>)
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	f107 0114 	add.w	r1, r7, #20
 8002780:	2300      	movs	r3, #0
 8002782:	2200      	movs	r2, #0
 8002784:	f7fe fb3c 	bl	8000e00 <xQueueGenericSend>
 8002788:	6278      	str	r0, [r7, #36]	@ 0x24
 800278a:	e008      	b.n	800279e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <xTimerGenericCommand+0x98>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	f107 0114 	add.w	r1, r7, #20
 8002794:	2300      	movs	r3, #0
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	f7fe fc34 	bl	8001004 <xQueueGenericSendFromISR>
 800279c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3728      	adds	r7, #40	@ 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000200 	.word	0x20000200

080027ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027b6:	4b1d      	ldr	r3, [pc, #116]	@ (800282c <prvProcessExpiredTimer+0x80>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fa28 	bl	8000c1a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d123      	bne.n	800281a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	18d1      	adds	r1, r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f000 f8cc 	bl	800297c <prvInsertTimerInActiveList>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d017      	beq.n	800281a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027ea:	2300      	movs	r3, #0
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	2100      	movs	r1, #0
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f7ff ff8b 	bl	8002710 <xTimerGenericCommand>
 80027fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	60fb      	str	r3, [r7, #12]
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	e7fd      	b.n	8002816 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	4798      	blx	r3
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200001f8 	.word	0x200001f8

08002830 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002838:	f107 0308 	add.w	r3, r7, #8
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f859 	bl	80028f4 <prvGetNextExpireTime>
 8002842:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4619      	mov	r1, r3
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f805 	bl	8002858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800284e:	f000 f8d7 	bl	8002a00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002852:	bf00      	nop
 8002854:	e7f0      	b.n	8002838 <prvTimerTask+0x8>
	...

08002858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002862:	f7ff f9a1 	bl	8001ba8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f866 	bl	800293c <prvSampleTimeNow>
 8002870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d130      	bne.n	80028da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <prvProcessTimerOrBlockTask+0x3c>
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	d806      	bhi.n	8002894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002886:	f7ff f99d 	bl	8001bc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff8d 	bl	80027ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002892:	e024      	b.n	80028de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800289a:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <prvProcessTimerOrBlockTask+0x90>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80028ac:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <prvProcessTimerOrBlockTask+0x94>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe fe91 	bl	80015e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80028be:	f7ff f981 	bl	8001bc4 <xTaskResumeAll>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <prvProcessTimerOrBlockTask+0x98>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
}
 80028d8:	e001      	b.n	80028de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80028da:	f7ff f973 	bl	8001bc4 <xTaskResumeAll>
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001fc 	.word	0x200001fc
 80028ec:	20000200 	.word	0x20000200
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <prvGetNextExpireTime+0x44>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <prvGetNextExpireTime+0x44>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e001      	b.n	800292a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	200001f8 	.word	0x200001f8

0800293c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002944:	f7ff f9dc 	bl	8001d00 <xTaskGetTickCount>
 8002948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <prvSampleTimeNow+0x3c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d205      	bcs.n	8002960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002954:	f000 f8ec 	bl	8002b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e002      	b.n	8002966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002966:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <prvSampleTimeNow+0x3c>)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800296c:	68fb      	ldr	r3, [r7, #12]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000208 	.word	0x20000208

0800297c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d812      	bhi.n	80029c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e01b      	b.n	80029ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <prvInsertTimerInActiveList+0x7c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe f8f1 	bl	8000ba8 <vListInsert>
 80029c6:	e012      	b.n	80029ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d206      	bcs.n	80029de <prvInsertTimerInActiveList+0x62>
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d302      	bcc.n	80029de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e007      	b.n	80029ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <prvInsertTimerInActiveList+0x80>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7fe f8dd 	bl	8000ba8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200001fc 	.word	0x200001fc
 80029fc:	200001f8 	.word	0x200001f8

08002a00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a06:	e080      	b.n	8002b0a <prvProcessReceivedCommands+0x10a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db7d      	blt.n	8002b0a <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f8fb 	bl	8000c1a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff88 	bl	800293c <prvSampleTimeNow>
 8002a2c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d867      	bhi.n	8002b04 <prvProcessReceivedCommands+0x104>
 8002a34:	a201      	add	r2, pc, #4	@ (adr r2, 8002a3c <prvProcessReceivedCommands+0x3c>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a65 	.word	0x08002a65
 8002a40:	08002a65 	.word	0x08002a65
 8002a44:	08002a65 	.word	0x08002a65
 8002a48:	08002b05 	.word	0x08002b05
 8002a4c:	08002ac3 	.word	0x08002ac3
 8002a50:	08002afd 	.word	0x08002afd
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a65 	.word	0x08002a65
 8002a5c:	08002b05 	.word	0x08002b05
 8002a60:	08002ac3 	.word	0x08002ac3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	18d1      	adds	r1, r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a3a      	ldr	r2, [r7, #32]
 8002a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a72:	f7ff ff83 	bl	800297c <prvInsertTimerInActiveList>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d045      	beq.n	8002b08 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d13d      	bne.n	8002b08 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	441a      	add	r2, r3
 8002a94:	2300      	movs	r3, #0
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a9e:	f7ff fe37 	bl	8002710 <xTimerGenericCommand>
 8002aa2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d12e      	bne.n	8002b08 <prvProcessReceivedCommands+0x108>
	__asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	61bb      	str	r3, [r7, #24]
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	e7fd      	b.n	8002abe <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	617b      	str	r3, [r7, #20]
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	18d1      	adds	r1, r2, r3
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	6a3a      	ldr	r2, [r7, #32]
 8002af4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002af6:	f7ff ff41 	bl	800297c <prvInsertTimerInActiveList>
					break;
 8002afa:	e006      	b.n	8002b0a <prvProcessReceivedCommands+0x10a>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002afc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002afe:	f000 fb9d 	bl	800323c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002b02:	e002      	b.n	8002b0a <prvProcessReceivedCommands+0x10a>

				default	:
					/* Don't expect to get here. */
					break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <prvProcessReceivedCommands+0x10a>
					break;
 8002b08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <prvProcessReceivedCommands+0x12c>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f107 0108 	add.w	r1, r7, #8
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	f7fe fb11 	bl	800113c <xQueueGenericReceive>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f af73 	bne.w	8002a08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3728      	adds	r7, #40	@ 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000200 	.word	0x20000200

08002b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b36:	e046      	b.n	8002bc6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b38:	4b2c      	ldr	r3, [pc, #176]	@ (8002bec <prvSwitchTimerLists+0xbc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b42:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <prvSwitchTimerLists+0xbc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f862 	bl	8000c1a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d12f      	bne.n	8002bc6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d90e      	bls.n	8002b96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <prvSwitchTimerLists+0xbc>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f7fe f80a 	bl	8000ba8 <vListInsert>
 8002b94:	e017      	b.n	8002bc6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fdb5 	bl	8002710 <xTimerGenericCommand>
 8002ba6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <prvSwitchTimerLists+0x96>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	603b      	str	r3, [r7, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <prvSwitchTimerLists+0xbc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1b3      	bne.n	8002b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <prvSwitchTimerLists+0xbc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <prvSwitchTimerLists+0xc0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <prvSwitchTimerLists+0xbc>)
 8002bdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <prvSwitchTimerLists+0xc0>)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200001f8 	.word	0x200001f8
 8002bf0:	200001fc 	.word	0x200001fc

08002bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002bf8:	f000 f93e 	bl	8002e78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <prvCheckForValidListAndQueue+0x54>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11d      	bne.n	8002c40 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002c04:	4811      	ldr	r0, [pc, #68]	@ (8002c4c <prvCheckForValidListAndQueue+0x58>)
 8002c06:	f7fd ff7e 	bl	8000b06 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002c0a:	4811      	ldr	r0, [pc, #68]	@ (8002c50 <prvCheckForValidListAndQueue+0x5c>)
 8002c0c:	f7fd ff7b 	bl	8000b06 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002c10:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <prvCheckForValidListAndQueue+0x60>)
 8002c12:	4a0e      	ldr	r2, [pc, #56]	@ (8002c4c <prvCheckForValidListAndQueue+0x58>)
 8002c14:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <prvCheckForValidListAndQueue+0x64>)
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <prvCheckForValidListAndQueue+0x5c>)
 8002c1a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	210c      	movs	r1, #12
 8002c20:	200a      	movs	r0, #10
 8002c22:	f7fe f88f 	bl	8000d44 <xQueueGenericCreate>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a07      	ldr	r2, [pc, #28]	@ (8002c48 <prvCheckForValidListAndQueue+0x54>)
 8002c2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <prvCheckForValidListAndQueue+0x54>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <prvCheckForValidListAndQueue+0x54>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4908      	ldr	r1, [pc, #32]	@ (8002c5c <prvCheckForValidListAndQueue+0x68>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fca6 	bl	800158c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c40:	f000 f94c 	bl	8002edc <vPortExitCritical>
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000200 	.word	0x20000200
 8002c4c:	200001d0 	.word	0x200001d0
 8002c50:	200001e4 	.word	0x200001e4
 8002c54:	200001f8 	.word	0x200001f8
 8002c58:	200001fc 	.word	0x200001fc
 8002c5c:	08004ee4 	.word	0x08004ee4

08002c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3b04      	subs	r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 0201 	bic.w	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3b04      	subs	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c90:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc4 <pxPortInitialiseStack+0x64>)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b14      	subs	r3, #20
 8002c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3b04      	subs	r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f06f 0202 	mvn.w	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b20      	subs	r3, #32
 8002cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	08002cc9 	.word	0x08002cc9

08002cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <prvTaskExitError+0x40>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d00b      	beq.n	8002cf0 <prvTaskExitError+0x28>
	__asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	607b      	str	r3, [r7, #4]
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <prvTaskExitError+0x24>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	603b      	str	r3, [r7, #0]
}
 8002d02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <prvTaskExitError+0x3c>
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	00000000 	.word	0x00000000

08002d10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <pxCurrentTCBConst2>)
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	6808      	ldr	r0, [r1, #0]
 8002d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d1a:	f380 8809 	msr	PSP, r0
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8811 	msr	BASEPRI, r0
 8002d2a:	4770      	bx	lr
 8002d2c:	f3af 8000 	nop.w

08002d30 <pxCurrentTCBConst2>:
 8002d30:	200000cc 	.word	0x200000cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop

08002d38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d38:	4806      	ldr	r0, [pc, #24]	@ (8002d54 <prvPortStartFirstTask+0x1c>)
 8002d3a:	6800      	ldr	r0, [r0, #0]
 8002d3c:	6800      	ldr	r0, [r0, #0]
 8002d3e:	f380 8808 	msr	MSP, r0
 8002d42:	b662      	cpsie	i
 8002d44:	b661      	cpsie	f
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	df00      	svc	0
 8002d50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d52:	bf00      	nop
 8002d54:	e000ed08 	.word	0xe000ed08

08002d58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <xPortStartScheduler+0xfc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	@ (8002e58 <xPortStartScheduler+0x100>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10b      	bne.n	8002d80 <xPortStartScheduler+0x28>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	613b      	str	r3, [r7, #16]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d80:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <xPortStartScheduler+0xfc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a35      	ldr	r2, [pc, #212]	@ (8002e5c <xPortStartScheduler+0x104>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10b      	bne.n	8002da2 <xPortStartScheduler+0x4a>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	60fb      	str	r3, [r7, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	e7fd      	b.n	8002d9e <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002da2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e60 <xPortStartScheduler+0x108>)
 8002da4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	22ff      	movs	r2, #255	@ 0xff
 8002db2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <xPortStartScheduler+0x10c>)
 8002dc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dca:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dd0:	e009      	b.n	8002de6 <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002dd2:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	4a23      	ldr	r2, [pc, #140]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002dda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dee:	2b80      	cmp	r3, #128	@ 0x80
 8002df0:	d0ef      	beq.n	8002dd2 <xPortStartScheduler+0x7a>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002dfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e04:	4a18      	ldr	r2, [pc, #96]	@ (8002e68 <xPortStartScheduler+0x110>)
 8002e06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e10:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <xPortStartScheduler+0x114>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <xPortStartScheduler+0x114>)
 8002e16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <xPortStartScheduler+0x114>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <xPortStartScheduler+0x114>)
 8002e22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002e26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e28:	f000 f8d8 	bl	8002fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <xPortStartScheduler+0x118>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e32:	f000 f8ef 	bl	8003014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e36:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <xPortStartScheduler+0x11c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e74 <xPortStartScheduler+0x11c>)
 8002e3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002e40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e42:	f7ff ff79 	bl	8002d38 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002e46:	f7ff ff3f 	bl	8002cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	410fc271 	.word	0x410fc271
 8002e5c:	410fc270 	.word	0x410fc270
 8002e60:	e000e400 	.word	0xe000e400
 8002e64:	2000020c 	.word	0x2000020c
 8002e68:	20000210 	.word	0x20000210
 8002e6c:	e000ed20 	.word	0xe000ed20
 8002e70:	20000004 	.word	0x20000004
 8002e74:	e000ef34 	.word	0xe000ef34

08002e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d110      	bne.n	8002ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <vPortEnterCritical+0x60>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	603b      	str	r3, [r7, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vPortEnterCritical+0x4a>
	}
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000004 	.word	0x20000004
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <vPortExitCritical+0x50>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <vPortExitCritical+0x26>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	4a08      	ldr	r2, [pc, #32]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <vPortExitCritical+0x44>
 8002f14:	2300      	movs	r3, #0
 8002f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f383 8811 	msr	BASEPRI, r3
}
 8002f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	20000004 	.word	0x20000004

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f01e 0f10 	tst.w	lr, #16
 8002f40:	bf08      	it	eq
 8002f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f54:	f380 8811 	msr	BASEPRI, r0
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f7fe ff9c 	bl	8001e9c <vTaskSwitchContext>
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f380 8811 	msr	BASEPRI, r0
 8002f6c:	bc08      	pop	{r3}
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f76:	f01e 0f10 	tst.w	lr, #16
 8002f7a:	bf08      	it	eq
 8002f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f80:	f380 8809 	msr	PSP, r0
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w

08002f90 <pxCurrentTCBConst>:
 8002f90:	200000cc 	.word	0x200000cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
}
 8002fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fb2:	f7fe feb5 	bl	8001d20 <xTaskIncrementTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <SysTick_Handler+0x40>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f383 8811 	msr	BASEPRI, r3
}
 8002fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <vPortSetupTimerInterrupt+0x28>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a08      	ldr	r2, [pc, #32]	@ (8003008 <vPortSetupTimerInterrupt+0x2c>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	4a07      	ldr	r2, [pc, #28]	@ (800300c <vPortSetupTimerInterrupt+0x30>)
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ff2:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <vPortSetupTimerInterrupt+0x34>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000000 	.word	0x20000000
 8003008:	10624dd3 	.word	0x10624dd3
 800300c:	e000e014 	.word	0xe000e014
 8003010:	e000e010 	.word	0xe000e010

08003014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003024 <vPortEnableVFP+0x10>
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800301e:	6001      	str	r1, [r0, #0]
 8003020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003022:	bf00      	nop
 8003024:	e000ed88 	.word	0xe000ed88

08003028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800302e:	f3ef 8305 	mrs	r3, IPSR
 8003032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	d915      	bls.n	8003066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <vPortValidateInterruptPriority+0x74>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003044:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <vPortValidateInterruptPriority+0x78>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	7afa      	ldrb	r2, [r7, #11]
 800304a:	429a      	cmp	r2, r3
 800304c:	d20b      	bcs.n	8003066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	607b      	str	r3, [r7, #4]
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003066:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <vPortValidateInterruptPriority+0x7c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800306e:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <vPortValidateInterruptPriority+0x80>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90b      	bls.n	800308e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	603b      	str	r3, [r7, #0]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <vPortValidateInterruptPriority+0x62>
	}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e3f0 	.word	0xe000e3f0
 80030a0:	2000020c 	.word	0x2000020c
 80030a4:	e000ed0c 	.word	0xe000ed0c
 80030a8:	20000210 	.word	0x20000210

080030ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030b8:	f7fe fd76 	bl	8001ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003228 <pvPortMalloc+0x17c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030c4:	f000 f916 	bl	80032f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030c8:	4b58      	ldr	r3, [pc, #352]	@ (800322c <pvPortMalloc+0x180>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 8090 	bne.w	80031f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01e      	beq.n	800311a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80030dc:	2208      	movs	r2, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d015      	beq.n	800311a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f023 0307 	bic.w	r3, r3, #7
 80030f4:	3308      	adds	r3, #8
 80030f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <pvPortMalloc+0x6e>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	617b      	str	r3, [r7, #20]
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	e7fd      	b.n	8003116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d06a      	beq.n	80031f6 <pvPortMalloc+0x14a>
 8003120:	4b43      	ldr	r3, [pc, #268]	@ (8003230 <pvPortMalloc+0x184>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d865      	bhi.n	80031f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800312a:	4b42      	ldr	r3, [pc, #264]	@ (8003234 <pvPortMalloc+0x188>)
 800312c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <pvPortMalloc+0x188>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003134:	e004      	b.n	8003140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d903      	bls.n	8003152 <pvPortMalloc+0xa6>
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f1      	bne.n	8003136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003152:	4b35      	ldr	r3, [pc, #212]	@ (8003228 <pvPortMalloc+0x17c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	429a      	cmp	r2, r3
 800315a:	d04c      	beq.n	80031f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2208      	movs	r2, #8
 8003162:	4413      	add	r3, r2
 8003164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad2      	subs	r2, r2, r3
 8003176:	2308      	movs	r3, #8
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	429a      	cmp	r2, r3
 800317c:	d920      	bls.n	80031c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800317e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <pvPortMalloc+0xfc>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	613b      	str	r3, [r7, #16]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031ba:	69b8      	ldr	r0, [r7, #24]
 80031bc:	f000 f8fc 	bl	80033b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <pvPortMalloc+0x184>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <pvPortMalloc+0x184>)
 80031cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031ce:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <pvPortMalloc+0x184>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <pvPortMalloc+0x18c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d203      	bcs.n	80031e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <pvPortMalloc+0x184>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <pvPortMalloc+0x18c>)
 80031e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <pvPortMalloc+0x180>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031f6:	f7fe fce5 	bl	8001bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <pvPortMalloc+0x170>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60fb      	str	r3, [r7, #12]
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <pvPortMalloc+0x16c>
	return pvReturn;
 800321c:	69fb      	ldr	r3, [r7, #28]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	@ 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000ca1c 	.word	0x2000ca1c
 800322c:	2000ca28 	.word	0x2000ca28
 8003230:	2000ca20 	.word	0x2000ca20
 8003234:	2000ca14 	.word	0x2000ca14
 8003238:	2000ca24 	.word	0x2000ca24

0800323c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04a      	beq.n	80032e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800324e:	2308      	movs	r3, #8
 8003250:	425b      	negs	r3, r3
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4413      	add	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <vPortFree+0xb0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <vPortFree+0x46>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60fb      	str	r3, [r7, #12]
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <vPortFree+0x66>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	60bb      	str	r3, [r7, #8]
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	e7fd      	b.n	800329e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <vPortFree+0xb0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d019      	beq.n	80032e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d115      	bne.n	80032e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <vPortFree+0xb0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032c8:	f7fe fc6e 	bl	8001ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <vPortFree+0xb4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	4a06      	ldr	r2, [pc, #24]	@ (80032f0 <vPortFree+0xb4>)
 80032d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032da:	6938      	ldr	r0, [r7, #16]
 80032dc:	f000 f86c 	bl	80033b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80032e0:	f7fe fc70 	bl	8001bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032e4:	bf00      	nop
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	2000ca28 	.word	0x2000ca28
 80032f0:	2000ca20 	.word	0x2000ca20

080032f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032fa:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80032fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003300:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <prvHeapInit+0xac>)
 8003302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3307      	adds	r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	4a1f      	ldr	r2, [pc, #124]	@ (80033a0 <prvHeapInit+0xac>)
 8003324:	4413      	add	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800332c:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <prvHeapInit+0xb0>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003332:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <prvHeapInit+0xb0>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003340:	2208      	movs	r2, #8
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <prvHeapInit+0xb4>)
 8003354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003356:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <prvHeapInit+0xb4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <prvHeapInit+0xb4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	1ad2      	subs	r2, r2, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <prvHeapInit+0xb4>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <prvHeapInit+0xb8>)
 8003382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <prvHeapInit+0xbc>)
 800338a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800338c:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <prvHeapInit+0xc0>)
 800338e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003392:	601a      	str	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000214 	.word	0x20000214
 80033a4:	2000ca14 	.word	0x2000ca14
 80033a8:	2000ca1c 	.word	0x2000ca1c
 80033ac:	2000ca24 	.word	0x2000ca24
 80033b0:	2000ca20 	.word	0x2000ca20
 80033b4:	2000ca28 	.word	0x2000ca28

080033b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033c0:	4b28      	ldr	r3, [pc, #160]	@ (8003464 <prvInsertBlockIntoFreeList+0xac>)
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e002      	b.n	80033cc <prvInsertBlockIntoFreeList+0x14>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d8f7      	bhi.n	80033c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d108      	bne.n	80033fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	441a      	add	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	441a      	add	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d118      	bne.n	8003440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <prvInsertBlockIntoFreeList+0xb0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d00d      	beq.n	8003436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e008      	b.n	8003448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <prvInsertBlockIntoFreeList+0xb0>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e003      	b.n	8003448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d002      	beq.n	8003456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000ca14 	.word	0x2000ca14
 8003468:	2000ca1c 	.word	0x2000ca1c

0800346c <LED_voidInit>:
/* HAL */
#include "LED_interface.h"


void LED_voidInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
	// Step 1: Enable the GPIO clock for the corresponding port using switch
	   switch ((uint32_t)GPIOx) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a4e      	ldr	r2, [pc, #312]	@ (80035b4 <LED_voidInit+0x148>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d069      	beq.n	8003554 <LED_voidInit+0xe8>
 8003480:	4a4c      	ldr	r2, [pc, #304]	@ (80035b4 <LED_voidInit+0x148>)
 8003482:	4293      	cmp	r3, r2
 8003484:	f200 8092 	bhi.w	80035ac <LED_voidInit+0x140>
 8003488:	4a4b      	ldr	r2, [pc, #300]	@ (80035b8 <LED_voidInit+0x14c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d053      	beq.n	8003536 <LED_voidInit+0xca>
 800348e:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <LED_voidInit+0x14c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	f200 808b 	bhi.w	80035ac <LED_voidInit+0x140>
 8003496:	4a49      	ldr	r2, [pc, #292]	@ (80035bc <LED_voidInit+0x150>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d03d      	beq.n	8003518 <LED_voidInit+0xac>
 800349c:	4a47      	ldr	r2, [pc, #284]	@ (80035bc <LED_voidInit+0x150>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f200 8084 	bhi.w	80035ac <LED_voidInit+0x140>
 80034a4:	4a46      	ldr	r2, [pc, #280]	@ (80035c0 <LED_voidInit+0x154>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <LED_voidInit+0x8e>
 80034aa:	4a45      	ldr	r2, [pc, #276]	@ (80035c0 <LED_voidInit+0x154>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d87d      	bhi.n	80035ac <LED_voidInit+0x140>
 80034b0:	4a44      	ldr	r2, [pc, #272]	@ (80035c4 <LED_voidInit+0x158>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <LED_voidInit+0x52>
 80034b6:	4a44      	ldr	r2, [pc, #272]	@ (80035c8 <LED_voidInit+0x15c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00f      	beq.n	80034dc <LED_voidInit+0x70>
	        case (uint32_t)GPIOH:
	            __HAL_RCC_GPIOH_CLK_ENABLE();  // Enable the clock for GPIO Port H
	            break;
	        default:
	            // Invalid GPIO port, handle error if needed
	            return;
 80034bc:	e076      	b.n	80035ac <LED_voidInit+0x140>
	            __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable the clock for GPIO Port A
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	4b42      	ldr	r3, [pc, #264]	@ (80035cc <LED_voidInit+0x160>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a41      	ldr	r2, [pc, #260]	@ (80035cc <LED_voidInit+0x160>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b3f      	ldr	r3, [pc, #252]	@ (80035cc <LED_voidInit+0x160>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
	            break;
 80034da:	e04a      	b.n	8003572 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable the clock for GPIO Port B
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	4b3a      	ldr	r3, [pc, #232]	@ (80035cc <LED_voidInit+0x160>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	4a39      	ldr	r2, [pc, #228]	@ (80035cc <LED_voidInit+0x160>)
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ec:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <LED_voidInit+0x160>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	69fb      	ldr	r3, [r7, #28]
	            break;
 80034f8:	e03b      	b.n	8003572 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable the clock for GPIO Port C
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	4b33      	ldr	r3, [pc, #204]	@ (80035cc <LED_voidInit+0x160>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a32      	ldr	r2, [pc, #200]	@ (80035cc <LED_voidInit+0x160>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b30      	ldr	r3, [pc, #192]	@ (80035cc <LED_voidInit+0x160>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	69bb      	ldr	r3, [r7, #24]
	            break;
 8003516:	e02c      	b.n	8003572 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOD_CLK_ENABLE();  // Enable the clock for GPIO Port D
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <LED_voidInit+0x160>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a2a      	ldr	r2, [pc, #168]	@ (80035cc <LED_voidInit+0x160>)
 8003522:	f043 0308 	orr.w	r3, r3, #8
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <LED_voidInit+0x160>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
	            break;
 8003534:	e01d      	b.n	8003572 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOE_CLK_ENABLE();  // Enable the clock for GPIO Port E
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b24      	ldr	r3, [pc, #144]	@ (80035cc <LED_voidInit+0x160>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a23      	ldr	r2, [pc, #140]	@ (80035cc <LED_voidInit+0x160>)
 8003540:	f043 0310 	orr.w	r3, r3, #16
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	4b21      	ldr	r3, [pc, #132]	@ (80035cc <LED_voidInit+0x160>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
	            break;
 8003552:	e00e      	b.n	8003572 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOH_CLK_ENABLE();  // Enable the clock for GPIO Port H
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	4b1c      	ldr	r3, [pc, #112]	@ (80035cc <LED_voidInit+0x160>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	4a1b      	ldr	r2, [pc, #108]	@ (80035cc <LED_voidInit+0x160>)
 800355e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003562:	6313      	str	r3, [r2, #48]	@ 0x30
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <LED_voidInit+0x160>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
	            break;
 8003570:	bf00      	nop
	    }
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	2200      	movs	r2, #0
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fd25 	bl	8003fc8 <HAL_GPIO_WritePin>
    // Step 2: Define a GPIO_InitTypeDef structure to hold the configuration
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	611a      	str	r2, [r3, #16]

    // Step 3: Configure Pin on Port as an output
    GPIO_InitStruct.Pin = GPIO_Pin;                 // Select Pin
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;       // Set as Push-Pull output
 8003592:	2301      	movs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;               // No internal pull-up or pull-down
 8003596:	2300      	movs	r3, #0
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // Set output speed (LOW, MEDIUM, HIGH)
 800359a:	2300      	movs	r3, #0
 800359c:	633b      	str	r3, [r7, #48]	@ 0x30

    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);           // Initialize the pin on Port
 800359e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb73 	bl	8003c90 <HAL_GPIO_Init>
 80035aa:	e000      	b.n	80035ae <LED_voidInit+0x142>
	            return;
 80035ac:	bf00      	nop
}
 80035ae:	3738      	adds	r7, #56	@ 0x38
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021c00 	.word	0x40021c00
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40020c00 	.word	0x40020c00
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40020400 	.word	0x40020400
 80035cc:	40023800 	.word	0x40023800

080035d0 <LED_voidOn>:


void LED_voidOn(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t copy_u8LedConnectionType)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	707b      	strb	r3, [r7, #1]
	switch(copy_u8LedConnectionType)
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d002      	beq.n	80035ec <LED_voidOn+0x1c>
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d007      	beq.n	80035fa <LED_voidOn+0x2a>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
			break;

		default :
			// return Error State
			break;
 80035ea:	e00d      	b.n	8003608 <LED_voidOn+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fce8 	bl	8003fc8 <HAL_GPIO_WritePin>
			break;
 80035f8:	e006      	b.n	8003608 <LED_voidOn+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	2200      	movs	r2, #0
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fce1 	bl	8003fc8 <HAL_GPIO_WritePin>
			break;
 8003606:	bf00      	nop
	}
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <LED_voidOff>:


void LED_voidOff(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t copy_u8LedConnectionType)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
	switch(copy_u8LedConnectionType)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d002      	beq.n	800362c <LED_voidOff+0x1c>
 8003626:	2b02      	cmp	r3, #2
 8003628:	d007      	beq.n	800363a <LED_voidOff+0x2a>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
			break;

		default :
			// return Error State
			break;
 800362a:	e00d      	b.n	8003648 <LED_voidOff+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	2200      	movs	r2, #0
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fcc8 	bl	8003fc8 <HAL_GPIO_WritePin>
			break;
 8003638:	e006      	b.n	8003648 <LED_voidOff+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	2201      	movs	r2, #1
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fcc1 	bl	8003fc8 <HAL_GPIO_WritePin>
			break;
 8003646:	bf00      	nop
		}
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <SSD_voidInit>:
#include "SSD_private.h"

static uint8_t PRV_u8Numbers[10]= {SSD_ZERO, SSD_ONE, SSD_TWO, SSD_THREE, SSD_FOUR, SSD_FIVE, SSD_SEX, SSD_SEVEN, SSD_EIGHT, SSD_NINE};

void SSD_voidInit(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b092      	sub	sp, #72	@ 0x48
 8003654:	af00      	add	r7, sp, #0
	switch ((uint32_t)SSD_ENABLE_PORT) {
			case (uint32_t)GPIOA:
				__HAL_RCC_GPIOA_CLK_ENABLE();
				break;
			case (uint32_t)GPIOB:
				__HAL_RCC_GPIOB_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365a:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <SSD_voidInit+0xf0>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a38      	ldr	r2, [pc, #224]	@ (8003740 <SSD_voidInit+0xf0>)
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <SSD_voidInit+0xf0>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
				break;
 8003672:	bf00      	nop
			default:
				// Invalid GPIO port, handle error if needed
			return;
	}

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = SSD_K1_ENABLE_PIN | SSD_K2_ENABLE_PIN;                 // Select Pin
 8003684:	2303      	movs	r3, #3
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;       // Set as Push-Pull output
 8003688:	2301      	movs	r3, #1
 800368a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;               // No internal pull-up or pull-down
 800368c:	2300      	movs	r3, #0
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // Set output speed (LOW, MEDIUM, HIGH)
 8003690:	2300      	movs	r3, #0
 8003692:	643b      	str	r3, [r7, #64]	@ 0x40

    HAL_GPIO_Init(SSD_ENABLE_PORT, &GPIO_InitStruct);           // Initialize the pin on Port
 8003694:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003698:	4619      	mov	r1, r3
 800369a:	482a      	ldr	r0, [pc, #168]	@ (8003744 <SSD_voidInit+0xf4>)
 800369c:	f000 faf8 	bl	8003c90 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2102      	movs	r1, #2
 80036a4:	4827      	ldr	r0, [pc, #156]	@ (8003744 <SSD_voidInit+0xf4>)
 80036a6:	f000 fc8f 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, GPIO_PIN_RESET);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2101      	movs	r1, #1
 80036ae:	4825      	ldr	r0, [pc, #148]	@ (8003744 <SSD_voidInit+0xf4>)
 80036b0:	f000 fc8a 	bl	8003fc8 <HAL_GPIO_WritePin>
	switch ((uint32_t)SSD_DATA_PORT) {
		case (uint32_t)GPIOA:
				__HAL_RCC_GPIOA_CLK_ENABLE(); 
			break;
		case (uint32_t)GPIOB:
				__HAL_RCC_GPIOB_CLK_ENABLE(); 
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <SSD_voidInit+0xf0>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <SSD_voidInit+0xf0>)
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <SSD_voidInit+0xf0>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	697b      	ldr	r3, [r7, #20]
			break;
 80036d0:	bf00      	nop
			// Invalid GPIO port, handle error if needed
		return;
	}


    GPIO_InitStruct.Pin = SSD_DATA_PIN_0|SSD_DATA_PIN_1|SSD_DATA_PIN_2|SSD_DATA_PIN_3|SSD_DATA_PIN_4|SSD_DATA_PIN_5|SSD_DATA_PIN_6; // Select Pin
 80036d2:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;       // Set as Push-Pull output
 80036d8:	2301      	movs	r3, #1
 80036da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;               // No internal pull-up or pull-down
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // Set output speed (LOW, MEDIUM, HIGH)
 80036e0:	2300      	movs	r3, #0
 80036e2:	643b      	str	r3, [r7, #64]	@ 0x40

    HAL_GPIO_Init(SSD_DATA_PORT, &GPIO_InitStruct);           // Initialize the pin on Port
 80036e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036e8:	4619      	mov	r1, r3
 80036ea:	4816      	ldr	r0, [pc, #88]	@ (8003744 <SSD_voidInit+0xf4>)
 80036ec:	f000 fad0 	bl	8003c90 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_0, GPIO_PIN_RESET);
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036f6:	4813      	ldr	r0, [pc, #76]	@ (8003744 <SSD_voidInit+0xf4>)
 80036f8:	f000 fc66 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_1, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003702:	4810      	ldr	r0, [pc, #64]	@ (8003744 <SSD_voidInit+0xf4>)
 8003704:	f000 fc60 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_2, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	480d      	ldr	r0, [pc, #52]	@ (8003744 <SSD_voidInit+0xf4>)
 800370e:	f000 fc5b 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_3, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2140      	movs	r1, #64	@ 0x40
 8003716:	480b      	ldr	r0, [pc, #44]	@ (8003744 <SSD_voidInit+0xf4>)
 8003718:	f000 fc56 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_4, GPIO_PIN_RESET);
 800371c:	2200      	movs	r2, #0
 800371e:	2120      	movs	r1, #32
 8003720:	4808      	ldr	r0, [pc, #32]	@ (8003744 <SSD_voidInit+0xf4>)
 8003722:	f000 fc51 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_5, GPIO_PIN_RESET);
 8003726:	2200      	movs	r2, #0
 8003728:	2110      	movs	r1, #16
 800372a:	4806      	ldr	r0, [pc, #24]	@ (8003744 <SSD_voidInit+0xf4>)
 800372c:	f000 fc4c 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_6, GPIO_PIN_RESET);
 8003730:	2200      	movs	r2, #0
 8003732:	2108      	movs	r1, #8
 8003734:	4803      	ldr	r0, [pc, #12]	@ (8003744 <SSD_voidInit+0xf4>)
 8003736:	f000 fc47 	bl	8003fc8 <HAL_GPIO_WritePin>

}
 800373a:	3748      	adds	r7, #72	@ 0x48
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	40020400 	.word	0x40020400

08003748 <SSD_voidDisplayNumber>:


void SSD_voidDisplayNumber(uint8_t copy_u8DesiredNumber, uint8_t copy_u8Id)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	460a      	mov	r2, r1
 8003752:	71fb      	strb	r3, [r7, #7]
 8003754:	4613      	mov	r3, r2
 8003756:	71bb      	strb	r3, [r7, #6]

	if(copy_u8DesiredNumber<=9)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b09      	cmp	r3, #9
 800375c:	f200 810d 	bhi.w	800397a <SSD_voidDisplayNumber+0x232>
	{
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_0, GPIO_PIN_RESET);
 8003760:	2200      	movs	r2, #0
 8003762:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003766:	4887      	ldr	r0, [pc, #540]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003768:	f000 fc2e 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_1, GPIO_PIN_RESET);
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003772:	4884      	ldr	r0, [pc, #528]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003774:	f000 fc28 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_2, GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	2180      	movs	r1, #128	@ 0x80
 800377c:	4881      	ldr	r0, [pc, #516]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800377e:	f000 fc23 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_3, GPIO_PIN_RESET);
 8003782:	2200      	movs	r2, #0
 8003784:	2140      	movs	r1, #64	@ 0x40
 8003786:	487f      	ldr	r0, [pc, #508]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003788:	f000 fc1e 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_4, GPIO_PIN_RESET);
 800378c:	2200      	movs	r2, #0
 800378e:	2120      	movs	r1, #32
 8003790:	487c      	ldr	r0, [pc, #496]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003792:	f000 fc19 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_5, GPIO_PIN_RESET);
 8003796:	2200      	movs	r2, #0
 8003798:	2110      	movs	r1, #16
 800379a:	487a      	ldr	r0, [pc, #488]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800379c:	f000 fc14 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_6, GPIO_PIN_RESET);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2108      	movs	r1, #8
 80037a4:	4877      	ldr	r0, [pc, #476]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 80037a6:	f000 fc0f 	bl	8003fc8 <HAL_GPIO_WritePin>
		switch(copy_u8Id)
 80037aa:	79bb      	ldrb	r3, [r7, #6]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d002      	beq.n	80037b6 <SSD_voidDisplayNumber+0x6e>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d071      	beq.n	8003898 <SSD_voidDisplayNumber+0x150>
	}
	else
	{
		// return Error state
	}
}
 80037b4:	e0e1      	b.n	800397a <SSD_voidDisplayNumber+0x232>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_0, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 0
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	4a73      	ldr	r2, [pc, #460]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037d0:	486c      	ldr	r0, [pc, #432]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 80037d2:	f000 fbf9 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_1, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 1
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037f0:	4864      	ldr	r0, [pc, #400]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 80037f2:	f000 fbe9 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_2, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 2
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	4a63      	ldr	r2, [pc, #396]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	485d      	ldr	r0, [pc, #372]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003810:	f000 fbda 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_3, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4a5c      	ldr	r2, [pc, #368]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003818:	5cd3      	ldrb	r3, [r2, r3]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	2140      	movs	r1, #64	@ 0x40
 800382c:	4855      	ldr	r0, [pc, #340]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800382e:	f000 fbcb 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_4, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 4
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4a54      	ldr	r2, [pc, #336]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	2120      	movs	r1, #32
 800384a:	484e      	ldr	r0, [pc, #312]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800384c:	f000 fbbc 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_5, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 5
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	4a4d      	ldr	r2, [pc, #308]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003854:	5cd3      	ldrb	r3, [r2, r3]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	2110      	movs	r1, #16
 8003868:	4846      	ldr	r0, [pc, #280]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800386a:	f000 fbad 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_6, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 6
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	4a45      	ldr	r2, [pc, #276]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003872:	5cd3      	ldrb	r3, [r2, r3]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	2108      	movs	r1, #8
 8003886:	483f      	ldr	r0, [pc, #252]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003888:	f000 fb9e 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, GPIO_PIN_SET);
 800388c:	2201      	movs	r2, #1
 800388e:	2102      	movs	r1, #2
 8003890:	483c      	ldr	r0, [pc, #240]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003892:	f000 fb99 	bl	8003fc8 <HAL_GPIO_WritePin>
					break;
 8003896:	e070      	b.n	800397a <SSD_voidDisplayNumber+0x232>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_0, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 0
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	4a3b      	ldr	r2, [pc, #236]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038b2:	4834      	ldr	r0, [pc, #208]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 80038b4:	f000 fb88 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_1, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 1
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	4a33      	ldr	r2, [pc, #204]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038d2:	482c      	ldr	r0, [pc, #176]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 80038d4:	f000 fb78 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_2, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 2
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	4a2b      	ldr	r2, [pc, #172]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	2180      	movs	r1, #128	@ 0x80
 80038f0:	4824      	ldr	r0, [pc, #144]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 80038f2:	f000 fb69 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_3, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 80038fa:	5cd3      	ldrb	r3, [r2, r3]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	2140      	movs	r1, #64	@ 0x40
 800390e:	481d      	ldr	r0, [pc, #116]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003910:	f000 fb5a 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_4, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 4
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	bf0c      	ite	eq
 8003922:	2301      	moveq	r3, #1
 8003924:	2300      	movne	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	2120      	movs	r1, #32
 800392c:	4815      	ldr	r0, [pc, #84]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800392e:	f000 fb4b 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_5, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 5
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	2110      	movs	r1, #16
 800394a:	480e      	ldr	r0, [pc, #56]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800394c:	f000 fb3c 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_6, (~(PRV_u8Numbers[copy_u8DesiredNumber]) & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Bit 6
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	4a0d      	ldr	r2, [pc, #52]	@ (8003988 <SSD_voidDisplayNumber+0x240>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	2108      	movs	r1, #8
 8003968:	4806      	ldr	r0, [pc, #24]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 800396a:	f000 fb2d 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, GPIO_PIN_SET);
 800396e:	2201      	movs	r2, #1
 8003970:	2101      	movs	r1, #1
 8003972:	4804      	ldr	r0, [pc, #16]	@ (8003984 <SSD_voidDisplayNumber+0x23c>)
 8003974:	f000 fb28 	bl	8003fc8 <HAL_GPIO_WritePin>
			break;
 8003978:	bf00      	nop
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40020400 	.word	0x40020400
 8003988:	20000008 	.word	0x20000008

0800398c <SSD_voidDisplayMultiplexedNumber>:


void SSD_voidDisplayMultiplexedNumber(uint8_t copy_u8DesiredNumber)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
	if(copy_u8DesiredNumber<=99)
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	2b63      	cmp	r3, #99	@ 0x63
 800399a:	d828      	bhi.n	80039ee <SSD_voidDisplayMultiplexedNumber+0x62>
	{
		uint8_t local_u8Ones = copy_u8DesiredNumber%10;
 800399c:	79fa      	ldrb	r2, [r7, #7]
 800399e:	4b16      	ldr	r3, [pc, #88]	@ (80039f8 <SSD_voidDisplayMultiplexedNumber+0x6c>)
 80039a0:	fba3 1302 	umull	r1, r3, r3, r2
 80039a4:	08d9      	lsrs	r1, r3, #3
 80039a6:	460b      	mov	r3, r1
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	73fb      	strb	r3, [r7, #15]
		uint8_t local_u8Tens = copy_u8DesiredNumber/10;
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4a10      	ldr	r2, [pc, #64]	@ (80039f8 <SSD_voidDisplayMultiplexedNumber+0x6c>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	08db      	lsrs	r3, r3, #3
 80039bc:	73bb      	strb	r3, [r7, #14]

		HAL_GPIO_TogglePin(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN);
 80039be:	2101      	movs	r1, #1
 80039c0:	480e      	ldr	r0, [pc, #56]	@ (80039fc <SSD_voidDisplayMultiplexedNumber+0x70>)
 80039c2:	f000 fb1a 	bl	8003ffa <HAL_GPIO_TogglePin>
		SSD_voidDisplayNumber(local_u8Tens, SSD_A);
 80039c6:	7bbb      	ldrb	r3, [r7, #14]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff febc 	bl	8003748 <SSD_voidDisplayNumber>
		HAL_Delay(5);
 80039d0:	2005      	movs	r0, #5
 80039d2:	f000 f857 	bl	8003a84 <HAL_Delay>
		HAL_GPIO_TogglePin(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN);
 80039d6:	2102      	movs	r1, #2
 80039d8:	4808      	ldr	r0, [pc, #32]	@ (80039fc <SSD_voidDisplayMultiplexedNumber+0x70>)
 80039da:	f000 fb0e 	bl	8003ffa <HAL_GPIO_TogglePin>
		SSD_voidDisplayNumber(local_u8Ones, SSD_B);
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff feb0 	bl	8003748 <SSD_voidDisplayNumber>
		HAL_Delay(5);
 80039e8:	2005      	movs	r0, #5
 80039ea:	f000 f84b 	bl	8003a84 <HAL_Delay>
	}
	else
	{
		// return Error state
	}
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	cccccccd 	.word	0xcccccccd
 80039fc:	40020400 	.word	0x40020400

08003a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a04:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_Init+0x40>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <HAL_Init+0x40>)
 8003a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_Init+0x40>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0a      	ldr	r2, [pc, #40]	@ (8003a40 <HAL_Init+0x40>)
 8003a16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a1c:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <HAL_Init+0x40>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a07      	ldr	r2, [pc, #28]	@ (8003a40 <HAL_Init+0x40>)
 8003a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a28:	2003      	movs	r0, #3
 8003a2a:	f000 f8fc 	bl	8003c26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2e:	200f      	movs	r0, #15
 8003a30:	f7fc ff8c 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a34:	f7fc ff62 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023c00 	.word	0x40023c00

08003a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a48:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_IncTick+0x20>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_IncTick+0x24>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	4a04      	ldr	r2, [pc, #16]	@ (8003a68 <HAL_IncTick+0x24>)
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000018 	.word	0x20000018
 8003a68:	2000ca2c 	.word	0x2000ca2c

08003a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_GetTick+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	2000ca2c 	.word	0x2000ca2c

08003a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a8c:	f7ff ffee 	bl	8003a6c <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d005      	beq.n	8003aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <HAL_Delay+0x44>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aaa:	bf00      	nop
 8003aac:	f7ff ffde 	bl	8003a6c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d8f7      	bhi.n	8003aac <HAL_Delay+0x28>
  {
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000018 	.word	0x20000018

08003acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afe:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60d3      	str	r3, [r2, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b18:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <__NVIC_GetPriorityGrouping+0x18>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f003 0307 	and.w	r3, r3, #7
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db0b      	blt.n	8003b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	4907      	ldr	r1, [pc, #28]	@ (8003b68 <__NVIC_EnableIRQ+0x38>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	db0a      	blt.n	8003b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <__NVIC_SetPriority+0x4c>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	0112      	lsls	r2, r2, #4
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b94:	e00a      	b.n	8003bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4908      	ldr	r1, [pc, #32]	@ (8003bbc <__NVIC_SetPriority+0x50>)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	440b      	add	r3, r1
 8003baa:	761a      	strb	r2, [r3, #24]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000e100 	.word	0xe000e100
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	@ 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f1c3 0307 	rsb	r3, r3, #7
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	bf28      	it	cs
 8003bde:	2304      	movcs	r3, #4
 8003be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d902      	bls.n	8003bf0 <NVIC_EncodePriority+0x30>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3b03      	subs	r3, #3
 8003bee:	e000      	b.n	8003bf2 <NVIC_EncodePriority+0x32>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	401a      	ands	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43d9      	mvns	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	4313      	orrs	r3, r2
         );
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3724      	adds	r7, #36	@ 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ff4c 	bl	8003acc <__NVIC_SetPriorityGrouping>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c4e:	f7ff ff61 	bl	8003b14 <__NVIC_GetPriorityGrouping>
 8003c52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	f7ff ffb1 	bl	8003bc0 <NVIC_EncodePriority>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff80 	bl	8003b6c <__NVIC_SetPriority>
}
 8003c6c:	bf00      	nop
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff54 	bl	8003b30 <__NVIC_EnableIRQ>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	@ 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e159      	b.n	8003f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 8148 	bne.w	8003f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d005      	beq.n	8003ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d130      	bne.n	8003d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 0201 	and.w	r2, r3, #1
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d017      	beq.n	8003d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d123      	bne.n	8003dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	08da      	lsrs	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3208      	adds	r2, #8
 8003d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0203 	and.w	r2, r3, #3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a2 	beq.w	8003f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b57      	ldr	r3, [pc, #348]	@ (8003f78 <HAL_GPIO_Init+0x2e8>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	4a56      	ldr	r2, [pc, #344]	@ (8003f78 <HAL_GPIO_Init+0x2e8>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e26:	4b54      	ldr	r3, [pc, #336]	@ (8003f78 <HAL_GPIO_Init+0x2e8>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e32:	4a52      	ldr	r2, [pc, #328]	@ (8003f7c <HAL_GPIO_Init+0x2ec>)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a49      	ldr	r2, [pc, #292]	@ (8003f80 <HAL_GPIO_Init+0x2f0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d019      	beq.n	8003e92 <HAL_GPIO_Init+0x202>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a48      	ldr	r2, [pc, #288]	@ (8003f84 <HAL_GPIO_Init+0x2f4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_Init+0x1fe>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a47      	ldr	r2, [pc, #284]	@ (8003f88 <HAL_GPIO_Init+0x2f8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00d      	beq.n	8003e8a <HAL_GPIO_Init+0x1fa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a46      	ldr	r2, [pc, #280]	@ (8003f8c <HAL_GPIO_Init+0x2fc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_Init+0x1f6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a45      	ldr	r2, [pc, #276]	@ (8003f90 <HAL_GPIO_Init+0x300>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_GPIO_Init+0x1f2>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x204>
 8003e82:	2307      	movs	r3, #7
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x204>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x204>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x204>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x204>
 8003e92:	2300      	movs	r3, #0
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f002 0203 	and.w	r2, r2, #3
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea4:	4935      	ldr	r1, [pc, #212]	@ (8003f7c <HAL_GPIO_Init+0x2ec>)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eb2:	4b38      	ldr	r3, [pc, #224]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f00:	4a24      	ldr	r2, [pc, #144]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f06:	4b23      	ldr	r3, [pc, #140]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f30:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f54:	4a0f      	ldr	r2, [pc, #60]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	f67f aea2 	bls.w	8003cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40013c00 	.word	0x40013c00

08003f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe4:	e003      	b.n	8003fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	041a      	lsls	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43d9      	mvns	r1, r3
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	400b      	ands	r3, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e267      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d075      	beq.n	800413a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800404e:	4b88      	ldr	r3, [pc, #544]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d00c      	beq.n	8004074 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405a:	4b85      	ldr	r3, [pc, #532]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004062:	2b08      	cmp	r3, #8
 8004064:	d112      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b82      	ldr	r3, [pc, #520]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b7e      	ldr	r3, [pc, #504]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05b      	beq.n	8004138 <HAL_RCC_OscConfig+0x108>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d157      	bne.n	8004138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e242      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x74>
 8004096:	4b76      	ldr	r3, [pc, #472]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a75      	ldr	r2, [pc, #468]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x98>
 80040ae:	4b70      	ldr	r3, [pc, #448]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6c      	ldr	r2, [pc, #432]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040c8:	4b69      	ldr	r3, [pc, #420]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a68      	ldr	r2, [pc, #416]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b66      	ldr	r3, [pc, #408]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a65      	ldr	r2, [pc, #404]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7ff fcc0 	bl	8003a6c <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f0:	f7ff fcbc 	bl	8003a6c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	@ 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e207      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b5b      	ldr	r3, [pc, #364]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0xc0>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7ff fcac 	bl	8003a6c <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004118:	f7ff fca8 	bl	8003a6c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	@ 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1f3      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	4b51      	ldr	r3, [pc, #324]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xe8>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d063      	beq.n	800420e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004146:	4b4a      	ldr	r3, [pc, #296]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004152:	4b47      	ldr	r3, [pc, #284]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800415a:	2b08      	cmp	r3, #8
 800415c:	d11c      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415e:	4b44      	ldr	r3, [pc, #272]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d116      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e1c7      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004182:	4b3b      	ldr	r3, [pc, #236]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4937      	ldr	r1, [pc, #220]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	e03a      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a0:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <HAL_RCC_OscConfig+0x244>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7ff fc61 	bl	8003a6c <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ae:	f7ff fc5d 	bl	8003a6c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1a8      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4925      	ldr	r1, [pc, #148]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	e015      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e2:	4b24      	ldr	r3, [pc, #144]	@ (8004274 <HAL_RCC_OscConfig+0x244>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7ff fc40 	bl	8003a6c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f0:	f7ff fc3c 	bl	8003a6c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e187      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d036      	beq.n	8004288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <HAL_RCC_OscConfig+0x248>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7ff fc20 	bl	8003a6c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004230:	f7ff fc1c 	bl	8003a6c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e167      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_OscConfig+0x240>)
 8004244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x200>
 800424e:	e01b      	b.n	8004288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004250:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <HAL_RCC_OscConfig+0x248>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7ff fc09 	bl	8003a6c <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425c:	e00e      	b.n	800427c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425e:	f7ff fc05 	bl	8003a6c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d907      	bls.n	800427c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e150      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
 8004270:	40023800 	.word	0x40023800
 8004274:	42470000 	.word	0x42470000
 8004278:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	4b88      	ldr	r3, [pc, #544]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ea      	bne.n	800425e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8097 	beq.w	80043c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429a:	4b81      	ldr	r3, [pc, #516]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	4b7d      	ldr	r3, [pc, #500]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	4a7c      	ldr	r2, [pc, #496]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042b6:	4b7a      	ldr	r3, [pc, #488]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	4b77      	ldr	r3, [pc, #476]	@ (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d118      	bne.n	8004304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d2:	4b74      	ldr	r3, [pc, #464]	@ (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a73      	ldr	r2, [pc, #460]	@ (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042de:	f7ff fbc5 	bl	8003a6c <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e6:	f7ff fbc1 	bl	8003a6c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e10c      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <HAL_RCC_OscConfig+0x474>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d106      	bne.n	800431a <HAL_RCC_OscConfig+0x2ea>
 800430c:	4b64      	ldr	r3, [pc, #400]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	4a63      	ldr	r2, [pc, #396]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70
 8004318:	e01c      	b.n	8004354 <HAL_RCC_OscConfig+0x324>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b05      	cmp	r3, #5
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x30c>
 8004322:	4b5f      	ldr	r3, [pc, #380]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	4a5e      	ldr	r2, [pc, #376]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	6713      	str	r3, [r2, #112]	@ 0x70
 800432e:	4b5c      	ldr	r3, [pc, #368]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	4a5b      	ldr	r2, [pc, #364]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6713      	str	r3, [r2, #112]	@ 0x70
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0x324>
 800433c:	4b58      	ldr	r3, [pc, #352]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004340:	4a57      	ldr	r2, [pc, #348]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	6713      	str	r3, [r2, #112]	@ 0x70
 8004348:	4b55      	ldr	r3, [pc, #340]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	4a54      	ldr	r2, [pc, #336]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 0304 	bic.w	r3, r3, #4
 8004352:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7ff fb86 	bl	8003a6c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7ff fb82 	bl	8003a6c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e0cb      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	4b49      	ldr	r3, [pc, #292]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ee      	beq.n	8004364 <HAL_RCC_OscConfig+0x334>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004388:	f7ff fb70 	bl	8003a6c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7ff fb6c 	bl	8003a6c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0b5      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a6:	4b3e      	ldr	r3, [pc, #248]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ee      	bne.n	8004390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	4a38      	ldr	r2, [pc, #224]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80a1 	beq.w	8004510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ce:	4b34      	ldr	r3, [pc, #208]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d05c      	beq.n	8004494 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d141      	bne.n	8004466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCC_OscConfig+0x478>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7ff fb40 	bl	8003a6c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7ff fb3c 	bl	8003a6c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e087      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b27      	ldr	r3, [pc, #156]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	019b      	lsls	r3, r3, #6
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	491b      	ldr	r1, [pc, #108]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004438:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <HAL_RCC_OscConfig+0x478>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7ff fb15 	bl	8003a6c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004446:	f7ff fb11 	bl	8003a6c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e05c      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004458:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x416>
 8004464:	e054      	b.n	8004510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004466:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <HAL_RCC_OscConfig+0x478>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7ff fafe 	bl	8003a6c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7ff fafa 	bl	8003a6c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e045      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCC_OscConfig+0x470>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x444>
 8004492:	e03d      	b.n	8004510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e038      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40007000 	.word	0x40007000
 80044a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x4ec>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d028      	beq.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d121      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d11a      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d107      	bne.n	800450c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800

08004520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0cc      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b68      	ldr	r3, [pc, #416]	@ (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d90c      	bls.n	800455c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b65      	ldr	r3, [pc, #404]	@ (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b63      	ldr	r3, [pc, #396]	@ (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0b8      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004574:	4b59      	ldr	r3, [pc, #356]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a58      	ldr	r2, [pc, #352]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800457e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800458c:	4b53      	ldr	r3, [pc, #332]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a52      	ldr	r2, [pc, #328]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004598:	4b50      	ldr	r3, [pc, #320]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	494d      	ldr	r1, [pc, #308]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d044      	beq.n	8004640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b47      	ldr	r3, [pc, #284]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d119      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e07f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d003      	beq.n	80045de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	4b3f      	ldr	r3, [pc, #252]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e06f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	4b3b      	ldr	r3, [pc, #236]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e067      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b37      	ldr	r3, [pc, #220]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4934      	ldr	r1, [pc, #208]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7ff fa2c 	bl	8003a6c <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	e00a      	b.n	800462e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004618:	f7ff fa28 	bl	8003a6c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e04f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 020c 	and.w	r2, r3, #12
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	429a      	cmp	r2, r3
 800463e:	d1eb      	bne.n	8004618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b25      	ldr	r3, [pc, #148]	@ (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d20c      	bcs.n	8004668 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b22      	ldr	r3, [pc, #136]	@ (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b20      	ldr	r3, [pc, #128]	@ (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e032      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004674:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4916      	ldr	r1, [pc, #88]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004692:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	490e      	ldr	r1, [pc, #56]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046a6:	f000 f821 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80046aa:	4602      	mov	r2, r0
 80046ac:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	490a      	ldr	r1, [pc, #40]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	5ccb      	ldrb	r3, [r1, r3]
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fc f940 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00
 80046dc:	40023800 	.word	0x40023800
 80046e0:	08004eec 	.word	0x08004eec
 80046e4:	20000000 	.word	0x20000000
 80046e8:	20000014 	.word	0x20000014

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b090      	sub	sp, #64	@ 0x40
 80046f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004704:	4b59      	ldr	r3, [pc, #356]	@ (800486c <HAL_RCC_GetSysClockFreq+0x180>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d00d      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x40>
 8004710:	2b08      	cmp	r3, #8
 8004712:	f200 80a1 	bhi.w	8004858 <HAL_RCC_GetSysClockFreq+0x16c>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x34>
 800471a:	2b04      	cmp	r3, #4
 800471c:	d003      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x3a>
 800471e:	e09b      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b53      	ldr	r3, [pc, #332]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x184>)
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004724:	e09b      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004726:	4b53      	ldr	r3, [pc, #332]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x188>)
 8004728:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800472a:	e098      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800472c:	4b4f      	ldr	r3, [pc, #316]	@ (800486c <HAL_RCC_GetSysClockFreq+0x180>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004736:	4b4d      	ldr	r3, [pc, #308]	@ (800486c <HAL_RCC_GetSysClockFreq+0x180>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d028      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004742:	4b4a      	ldr	r3, [pc, #296]	@ (800486c <HAL_RCC_GetSysClockFreq+0x180>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	2200      	movs	r2, #0
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	627a      	str	r2, [r7, #36]	@ 0x24
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004754:	2100      	movs	r1, #0
 8004756:	4b47      	ldr	r3, [pc, #284]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x188>)
 8004758:	fb03 f201 	mul.w	r2, r3, r1
 800475c:	2300      	movs	r3, #0
 800475e:	fb00 f303 	mul.w	r3, r0, r3
 8004762:	4413      	add	r3, r2
 8004764:	4a43      	ldr	r2, [pc, #268]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x188>)
 8004766:	fba0 1202 	umull	r1, r2, r0, r2
 800476a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800476c:	460a      	mov	r2, r1
 800476e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004772:	4413      	add	r3, r2
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	2200      	movs	r2, #0
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	61fa      	str	r2, [r7, #28]
 800477e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004782:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004786:	f7fb fd2b 	bl	80001e0 <__aeabi_uldivmod>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4613      	mov	r3, r2
 8004790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004792:	e053      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004794:	4b35      	ldr	r3, [pc, #212]	@ (800486c <HAL_RCC_GetSysClockFreq+0x180>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	2200      	movs	r2, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	617a      	str	r2, [r7, #20]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047a6:	f04f 0b00 	mov.w	fp, #0
 80047aa:	4652      	mov	r2, sl
 80047ac:	465b      	mov	r3, fp
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	0159      	lsls	r1, r3, #5
 80047b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047bc:	0150      	lsls	r0, r2, #5
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	ebb2 080a 	subs.w	r8, r2, sl
 80047c6:	eb63 090b 	sbc.w	r9, r3, fp
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047de:	ebb2 0408 	subs.w	r4, r2, r8
 80047e2:	eb63 0509 	sbc.w	r5, r3, r9
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	00eb      	lsls	r3, r5, #3
 80047f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f4:	00e2      	lsls	r2, r4, #3
 80047f6:	4614      	mov	r4, r2
 80047f8:	461d      	mov	r5, r3
 80047fa:	eb14 030a 	adds.w	r3, r4, sl
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	eb45 030b 	adc.w	r3, r5, fp
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004812:	4629      	mov	r1, r5
 8004814:	028b      	lsls	r3, r1, #10
 8004816:	4621      	mov	r1, r4
 8004818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800481c:	4621      	mov	r1, r4
 800481e:	028a      	lsls	r2, r1, #10
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	2200      	movs	r2, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	60fa      	str	r2, [r7, #12]
 800482c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004830:	f7fb fcd6 	bl	80001e0 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCC_GetSysClockFreq+0x180>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800484c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004856:	e002      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x184>)
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800485c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004860:	4618      	mov	r0, r3
 8004862:	3740      	adds	r7, #64	@ 0x40
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	017d7840 	.word	0x017d7840

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	@ (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004894:	f7ff fff0 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	@ (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	08004efc 	.word	0x08004efc

080048b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	220f      	movs	r2, #15
 80048c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048c8:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <HAL_RCC_GetClockConfig+0x5c>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0203 	and.w	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <HAL_RCC_GetClockConfig+0x5c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	08db      	lsrs	r3, r3, #3
 80048f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048fa:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <HAL_RCC_GetClockConfig+0x60>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0207 	and.w	r2, r3, #7
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	601a      	str	r2, [r3, #0]
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	40023c00 	.word	0x40023c00

0800491c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e041      	b.n	80049b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f839 	bl	80049ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 f9b2 	bl	8004cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e044      	b.n	8004a72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	@ (8004a80 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d013      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1a      	ldr	r2, [pc, #104]	@ (8004a84 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00e      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <HAL_TIM_Base_Start_IT+0xbc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a16      	ldr	r2, [pc, #88]	@ (8004a90 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d111      	bne.n	8004a60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d010      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5e:	e007      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40014000 	.word	0x40014000

08004a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d020      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0202 	mvn.w	r2, #2
 8004ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8d2 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8c4 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f8d5 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d020      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0204 	mvn.w	r2, #4
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8ac 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f89e 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f8af 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0208 	mvn.w	r2, #8
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f886 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f878 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f889 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01b      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0210 	mvn.w	r2, #16
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f860 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f852 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f863 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fb fe68 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8e6 	bl	8004df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f834 	bl	8004cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0220 	mvn.w	r2, #32
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8b8 	bl	8004ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc0 <TIM_Base_SetConfig+0xfc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a37      	ldr	r2, [pc, #220]	@ (8004dc4 <TIM_Base_SetConfig+0x100>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a36      	ldr	r2, [pc, #216]	@ (8004dc8 <TIM_Base_SetConfig+0x104>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a35      	ldr	r2, [pc, #212]	@ (8004dcc <TIM_Base_SetConfig+0x108>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <TIM_Base_SetConfig+0xfc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1c:	d017      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <TIM_Base_SetConfig+0x100>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <TIM_Base_SetConfig+0x104>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	@ (8004dcc <TIM_Base_SetConfig+0x108>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <TIM_Base_SetConfig+0x10c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <TIM_Base_SetConfig+0x110>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a23      	ldr	r2, [pc, #140]	@ (8004dd8 <TIM_Base_SetConfig+0x114>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc0 <TIM_Base_SetConfig+0xfc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f023 0201 	bic.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]
  }
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <__libc_init_array>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	4d0d      	ldr	r5, [pc, #52]	@ (8004e4c <__libc_init_array+0x38>)
 8004e18:	4c0d      	ldr	r4, [pc, #52]	@ (8004e50 <__libc_init_array+0x3c>)
 8004e1a:	1b64      	subs	r4, r4, r5
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	2600      	movs	r6, #0
 8004e20:	42a6      	cmp	r6, r4
 8004e22:	d109      	bne.n	8004e38 <__libc_init_array+0x24>
 8004e24:	4d0b      	ldr	r5, [pc, #44]	@ (8004e54 <__libc_init_array+0x40>)
 8004e26:	4c0c      	ldr	r4, [pc, #48]	@ (8004e58 <__libc_init_array+0x44>)
 8004e28:	f000 f826 	bl	8004e78 <_init>
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	2600      	movs	r6, #0
 8004e32:	42a6      	cmp	r6, r4
 8004e34:	d105      	bne.n	8004e42 <__libc_init_array+0x2e>
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3c:	4798      	blx	r3
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7ee      	b.n	8004e20 <__libc_init_array+0xc>
 8004e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e46:	4798      	blx	r3
 8004e48:	3601      	adds	r6, #1
 8004e4a:	e7f2      	b.n	8004e32 <__libc_init_array+0x1e>
 8004e4c:	08004f0c 	.word	0x08004f0c
 8004e50:	08004f0c 	.word	0x08004f0c
 8004e54:	08004f0c 	.word	0x08004f0c
 8004e58:	08004f10 	.word	0x08004f10

08004e5c <memcpy>:
 8004e5c:	440a      	add	r2, r1
 8004e5e:	4291      	cmp	r1, r2
 8004e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e64:	d100      	bne.n	8004e68 <memcpy+0xc>
 8004e66:	4770      	bx	lr
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e72:	4291      	cmp	r1, r2
 8004e74:	d1f9      	bne.n	8004e6a <memcpy+0xe>
 8004e76:	bd10      	pop	{r4, pc}

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
