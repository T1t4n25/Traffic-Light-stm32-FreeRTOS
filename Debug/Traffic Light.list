
Traffic Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f8  080048f8  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  080048f8  080048f8  000058f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004900  08004900  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004900  08004900  00005900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004904  08004904  00005904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004908  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca0c  2000001c  08004924  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ca28  08004924  00006a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e02b  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d6  00000000  00000000  00014077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00016950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b29  00000000  00000000  000177e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b80  00000000  00000000  00018309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011019  00000000  00000000  0002ee89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091891  00000000  00000000  0003fea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  000d1778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d52e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004890 	.word	0x08004890

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08004890 	.word	0x08004890

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f002 fff5 	bl	80034c4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f831 	bl	8000540 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  LED_voidInit(GPIOB, GREEN_LED_PIN);
 80004de:	2108      	movs	r1, #8
 80004e0:	4812      	ldr	r0, [pc, #72]	@ (800052c <main+0x5c>)
 80004e2:	f002 fe23 	bl	800312c <LED_voidInit>
  LED_voidInit(GPIOB, YELLOW_LED_PIN);
 80004e6:	2110      	movs	r1, #16
 80004e8:	4810      	ldr	r0, [pc, #64]	@ (800052c <main+0x5c>)
 80004ea:	f002 fe1f 	bl	800312c <LED_voidInit>
  LED_voidInit(GPIOB, RED_LED_PIN);
 80004ee:	2120      	movs	r1, #32
 80004f0:	480e      	ldr	r0, [pc, #56]	@ (800052c <main+0x5c>)
 80004f2:	f002 fe1b 	bl	800312c <LED_voidInit>
  SSD_voidInit();
 80004f6:	f002 ff0b 	bl	8003310 <SSD_voidInit>

  //xTaskCreate(vtaskempty, "Traffic Light", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
  xTaskCreate(vTrafficLightTask, "Traffic Light", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80004fa:	2300      	movs	r3, #0
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	490a      	ldr	r1, [pc, #40]	@ (8000530 <main+0x60>)
 8000508:	480a      	ldr	r0, [pc, #40]	@ (8000534 <main+0x64>)
 800050a:	f000 ffef 	bl	80014ec <xTaskCreate>
  xTaskCreate(vTrafficTimer, "Traffic Timer", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800050e:	2300      	movs	r3, #0
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	4907      	ldr	r1, [pc, #28]	@ (8000538 <main+0x68>)
 800051c:	4807      	ldr	r0, [pc, #28]	@ (800053c <main+0x6c>)
 800051e:	f000 ffe5 	bl	80014ec <xTaskCreate>

  vTaskStartScheduler();
 8000522:	f001 f951 	bl	80017c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	bf00      	nop
 8000528:	e7fd      	b.n	8000526 <main+0x56>
 800052a:	bf00      	nop
 800052c:	40020400 	.word	0x40020400
 8000530:	080048a8 	.word	0x080048a8
 8000534:	080006b9 	.word	0x080006b9
 8000538:	080048b8 	.word	0x080048b8
 800053c:	08000601 	.word	0x08000601

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 f964 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <SystemClock_Config+0xb8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <SystemClock_Config+0xb8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <SystemClock_Config+0xbc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <SystemClock_Config+0xbc>)
 800058e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <SystemClock_Config+0xbc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fa47 	bl	8003a48 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c0:	f000 f8e7 	bl	8000792 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fcaa 	bl	8003f38 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ea:	f000 f8d2 	bl	8000792 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <vTrafficTimer>:

/* USER CODE BEGIN 4 */


void vTrafficTimer(void *pvParameters){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint8_t max = 6;
 8000608:	2306      	movs	r3, #6
 800060a:	73bb      	strb	r3, [r7, #14]
	uint8_t seconds = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
	while (1){

		switch (currentState) {
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <vTrafficTimer+0xb4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d032      	beq.n	800067e <vTrafficTimer+0x7e>
 8000618:	2b02      	cmp	r3, #2
 800061a:	dc46      	bgt.n	80006aa <vTrafficTimer+0xaa>
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <vTrafficTimer+0x26>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d016      	beq.n	8000652 <vTrafficTimer+0x52>
 8000624:	e041      	b.n	80006aa <vTrafficTimer+0xaa>
			case GREEN:
				max = GREEN_LIGHT_DURATION/1000;
 8000626:	2306      	movs	r3, #6
 8000628:	73bb      	strb	r3, [r7, #14]
				if (seconds < max)
 800062a:	7bfa      	ldrb	r2, [r7, #15]
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	429a      	cmp	r2, r3
 8000630:	d20c      	bcs.n	800064c <vTrafficTimer+0x4c>
				{
					SSD_voidDisplayNumber(seconds, SSD_A);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fee6 	bl	8003408 <SSD_voidDisplayNumber>
					seconds++;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
					vTaskDelay(pdMS_TO_TICKS(1000));
 8000642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000646:	f001 f889 	bl	800175c <vTaskDelay>
				}
				else{
					seconds = 0;
				}
				break;
 800064a:	e031      	b.n	80006b0 <vTrafficTimer+0xb0>
					seconds = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
				break;
 8000650:	e02e      	b.n	80006b0 <vTrafficTimer+0xb0>

			case YELLOW:
				max = YELLOW_LIGHT_DURATION/1000;
 8000652:	2302      	movs	r3, #2
 8000654:	73bb      	strb	r3, [r7, #14]
				if (seconds < max)
 8000656:	7bfa      	ldrb	r2, [r7, #15]
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	429a      	cmp	r2, r3
 800065c:	d20c      	bcs.n	8000678 <vTrafficTimer+0x78>
				{
					SSD_voidDisplayNumber(seconds, SSD_A);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2101      	movs	r1, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fed0 	bl	8003408 <SSD_voidDisplayNumber>
					seconds++;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	3301      	adds	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
					vTaskDelay(pdMS_TO_TICKS(1000));
 800066e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000672:	f001 f873 	bl	800175c <vTaskDelay>
				}
				else{
					seconds = 0;
				}
				break;
 8000676:	e01b      	b.n	80006b0 <vTrafficTimer+0xb0>
					seconds = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
				break;
 800067c:	e018      	b.n	80006b0 <vTrafficTimer+0xb0>

			case RED:
				max = RED_LIGHT_DURATION/1000;
 800067e:	2306      	movs	r3, #6
 8000680:	73bb      	strb	r3, [r7, #14]
				if (seconds < max)
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	429a      	cmp	r2, r3
 8000688:	d20c      	bcs.n	80006a4 <vTrafficTimer+0xa4>
				{
					SSD_voidDisplayNumber(seconds, SSD_A);
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2101      	movs	r1, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f002 feba 	bl	8003408 <SSD_voidDisplayNumber>
					seconds++;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	3301      	adds	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
					vTaskDelay(pdMS_TO_TICKS(1000));
 800069a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069e:	f001 f85d 	bl	800175c <vTaskDelay>
				}
				else{
					seconds = 0;
				}
				break;
 80006a2:	e005      	b.n	80006b0 <vTrafficTimer+0xb0>
					seconds = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
				break;
 80006a8:	e002      	b.n	80006b0 <vTrafficTimer+0xb0>

			default:
				seconds = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]
				break;
 80006ae:	bf00      	nop
		switch (currentState) {
 80006b0:	e7ae      	b.n	8000610 <vTrafficTimer+0x10>
 80006b2:	bf00      	nop
 80006b4:	20000038 	.word	0x20000038

080006b8 <vTrafficLightTask>:
		}
	}
}


void vTrafficLightTask(void *pvParameters) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	while (1) {
		switch (currentState) {
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <vTrafficLightTask+0xb4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d034      	beq.n	8000732 <vTrafficLightTask+0x7a>
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	dc49      	bgt.n	8000760 <vTrafficLightTask+0xa8>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <vTrafficLightTask+0x1e>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d017      	beq.n	8000704 <vTrafficLightTask+0x4c>
 80006d4:	e044      	b.n	8000760 <vTrafficLightTask+0xa8>
			case GREEN:
			LED_voidOn(GPIOA, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2108      	movs	r1, #8
 80006da:	4825      	ldr	r0, [pc, #148]	@ (8000770 <vTrafficLightTask+0xb8>)
 80006dc:	f002 fdd8 	bl	8003290 <LED_voidOn>
			LED_voidOff(GPIOA, RED_LED_PIN, LED_FORWARD_CONNECTION);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2120      	movs	r1, #32
 80006e4:	4822      	ldr	r0, [pc, #136]	@ (8000770 <vTrafficLightTask+0xb8>)
 80006e6:	f002 fdf3 	bl	80032d0 <LED_voidOff>
			LED_voidOff(GPIOA, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2110      	movs	r1, #16
 80006ee:	4820      	ldr	r0, [pc, #128]	@ (8000770 <vTrafficLightTask+0xb8>)
 80006f0:	f002 fdee 	bl	80032d0 <LED_voidOff>
			vTaskDelay(pdMS_TO_TICKS(GREEN_LIGHT_DURATION));
 80006f4:	f241 7070 	movw	r0, #6000	@ 0x1770
 80006f8:	f001 f830 	bl	800175c <vTaskDelay>
			currentState = RED;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <vTrafficLightTask+0xb4>)
 80006fe:	2202      	movs	r2, #2
 8000700:	701a      	strb	r2, [r3, #0]

			break;
 8000702:	e031      	b.n	8000768 <vTrafficLightTask+0xb0>

			case YELLOW:
				LED_voidOff(GPIOA, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 8000704:	2201      	movs	r2, #1
 8000706:	2108      	movs	r1, #8
 8000708:	4819      	ldr	r0, [pc, #100]	@ (8000770 <vTrafficLightTask+0xb8>)
 800070a:	f002 fde1 	bl	80032d0 <LED_voidOff>
				LED_voidOff(GPIOA, RED_LED_PIN, LED_FORWARD_CONNECTION);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	4817      	ldr	r0, [pc, #92]	@ (8000770 <vTrafficLightTask+0xb8>)
 8000714:	f002 fddc 	bl	80032d0 <LED_voidOff>
				LED_voidOn(GPIOA, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4814      	ldr	r0, [pc, #80]	@ (8000770 <vTrafficLightTask+0xb8>)
 800071e:	f002 fdb7 	bl	8003290 <LED_voidOn>
				vTaskDelay(pdMS_TO_TICKS(YELLOW_LIGHT_DURATION));
 8000722:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000726:	f001 f819 	bl	800175c <vTaskDelay>
				currentState = GREEN;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <vTrafficLightTask+0xb4>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]

				break;
 8000730:	e01a      	b.n	8000768 <vTrafficLightTask+0xb0>

			case RED:
				LED_voidOff(GPIOA, GREEN_LED_PIN, LED_FORWARD_CONNECTION);
 8000732:	2201      	movs	r2, #1
 8000734:	2108      	movs	r1, #8
 8000736:	480e      	ldr	r0, [pc, #56]	@ (8000770 <vTrafficLightTask+0xb8>)
 8000738:	f002 fdca 	bl	80032d0 <LED_voidOff>
				LED_voidOn(GPIOA, RED_LED_PIN, LED_FORWARD_CONNECTION);
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <vTrafficLightTask+0xb8>)
 8000742:	f002 fda5 	bl	8003290 <LED_voidOn>
				LED_voidOff(GPIOA, YELLOW_LED_PIN, LED_FORWARD_CONNECTION);
 8000746:	2201      	movs	r2, #1
 8000748:	2110      	movs	r1, #16
 800074a:	4809      	ldr	r0, [pc, #36]	@ (8000770 <vTrafficLightTask+0xb8>)
 800074c:	f002 fdc0 	bl	80032d0 <LED_voidOff>
				vTaskDelay(pdMS_TO_TICKS(RED_LIGHT_DURATION));
 8000750:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000754:	f001 f802 	bl	800175c <vTaskDelay>
				currentState = YELLOW;
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <vTrafficLightTask+0xb4>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]

				break;
 800075e:	e003      	b.n	8000768 <vTrafficLightTask+0xb0>

			default:
				currentState = GREEN;
 8000760:	4b02      	ldr	r3, [pc, #8]	@ (800076c <vTrafficLightTask+0xb4>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

				break;
 8000766:	bf00      	nop
		switch (currentState) {
 8000768:	e7aa      	b.n	80006c0 <vTrafficLightTask+0x8>
 800076a:	bf00      	nop
 800076c:	20000038 	.word	0x20000038
 8000770:	40020000 	.word	0x40020000

08000774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000784:	d101      	bne.n	800078a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000786:	f002 febf 	bl	8003508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000796:	b672      	cpsid	i
}
 8000798:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079a:	bf00      	nop
 800079c:	e7fd      	b.n	800079a <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	@ (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	@ 0x38
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b34      	ldr	r3, [pc, #208]	@ (80008d8 <HAL_InitTick+0xe8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a33      	ldr	r2, [pc, #204]	@ (80008d8 <HAL_InitTick+0xe8>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <HAL_InitTick+0xe8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800081c:	f107 0210 	add.w	r2, r7, #16
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fd52 	bl	80042d0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000836:	f003 fd37 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 800083a:	6378      	str	r0, [r7, #52]	@ 0x34
 800083c:	e004      	b.n	8000848 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800083e:	f003 fd33 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8000842:	4603      	mov	r3, r0
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800084a:	4a24      	ldr	r2, [pc, #144]	@ (80008dc <HAL_InitTick+0xec>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	0c9b      	lsrs	r3, r3, #18
 8000852:	3b01      	subs	r3, #1
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <HAL_InitTick+0xf0>)
 8000858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <HAL_InitTick+0xf0>)
 8000860:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000864:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000866:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <HAL_InitTick+0xf0>)
 8000868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800086a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_InitTick+0xf0>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_InitTick+0xf0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_InitTick+0xf0>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800087e:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <HAL_InitTick+0xf0>)
 8000880:	f003 fd58 	bl	8004334 <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800088a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11b      	bne.n	80008ca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000892:	4813      	ldr	r0, [pc, #76]	@ (80008e0 <HAL_InitTick+0xf0>)
 8000894:	f003 fda8 	bl	80043e8 <HAL_TIM_Base_Start_IT>
 8000898:	4603      	mov	r3, r0
 800089a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800089e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d111      	bne.n	80008ca <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a6:	201c      	movs	r0, #28
 80008a8:	f002 ff22 	bl	80036f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d808      	bhi.n	80008c4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80008b2:	2200      	movs	r2, #0
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	201c      	movs	r0, #28
 80008b8:	f002 fefe 	bl	80036b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008bc:	4a09      	ldr	r2, [pc, #36]	@ (80008e4 <HAL_InitTick+0xf4>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e002      	b.n	80008ca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3738      	adds	r7, #56	@ 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	431bde83 	.word	0x431bde83
 80008e0:	2000003c 	.word	0x2000003c
 80008e4:	20000014 	.word	0x20000014

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <NMI_Handler+0x4>

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <MemManage_Handler+0x4>

08000900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <UsageFault_Handler+0x4>

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <TIM2_IRQHandler+0x10>)
 8000926:	f003 fdc1 	bl	80044ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000003c 	.word	0x2000003c

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 ff51 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fda1 	bl	80004d0 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800099c:	08004908 	.word	0x08004908
  ldr r2, =_sbss
 80009a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009a4:	2000ca28 	.word	0x2000ca28

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>

080009aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f103 0208 	add.w	r2, r3, #8
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f04f 32ff 	mov.w	r2, #4294967295
 80009c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0208 	add.w	r2, r3, #8
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f103 0208 	add.w	r2, r3, #8
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a62:	d103      	bne.n	8000a6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e00c      	b.n	8000a86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3308      	adds	r3, #8
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e002      	b.n	8000a7a <vListInsert+0x2e>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d2f6      	bcs.n	8000a74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6892      	ldr	r2, [r2, #8]
 8000ad4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	6852      	ldr	r2, [r2, #4]
 8000ade:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d103      	bne.n	8000af2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10b      	bne.n	8000b40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b2c:	f383 8811 	msr	BASEPRI, r3
 8000b30:	f3bf 8f6f 	isb	sy
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000b40:	f001 fffa 	bl	8002b38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b4c:	68f9      	ldr	r1, [r7, #12]
 8000b4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000b50:	fb01 f303 	mul.w	r3, r1, r3
 8000b54:	441a      	add	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b70:	3b01      	subs	r3, #1
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	441a      	add	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	22ff      	movs	r2, #255	@ 0xff
 8000b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	22ff      	movs	r2, #255	@ 0xff
 8000b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d114      	bne.n	8000bc0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d01a      	beq.n	8000bd4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f886 	bl	8001cb4 <xTaskRemoveFromEventList>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d012      	beq.n	8000bd4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <xQueueGenericReset+0xd0>)
 8000bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	f3bf 8f6f 	isb	sy
 8000bbe:	e009      	b.n	8000bd4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fef0 	bl	80009aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3324      	adds	r3, #36	@ 0x24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff feeb 	bl	80009aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000bd4:	f001 ffe2 	bl	8002b9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000ed04 	.word	0xe000ed04

08000be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10b      	bne.n	8000c14 <xQueueGenericCreate+0x2c>
	__asm volatile
 8000bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c00:	f383 8811 	msr	BASEPRI, r3
 8000c04:	f3bf 8f6f 	isb	sy
 8000c08:	f3bf 8f4f 	dsb	sy
 8000c0c:	613b      	str	r3, [r7, #16]
}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e004      	b.n	8000c2a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	fb02 f303 	mul.w	r3, r2, r3
 8000c28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3350      	adds	r3, #80	@ 0x50
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f89c 	bl	8002d6c <pvPortMalloc>
 8000c34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00b      	beq.n	8000c54 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	3350      	adds	r3, #80	@ 0x50
 8000c40:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f000 f805 	bl	8000c5e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c54:	69bb      	ldr	r3, [r7, #24]
	}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e002      	b.n	8000c80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	69b8      	ldr	r0, [r7, #24]
 8000c90:	f7ff ff40 	bl	8000b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	@ 0x38
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <xQueueGenericSend+0x34>
	__asm volatile
 8000cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	f3bf 8f6f 	isb	sy
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <xQueueGenericSend+0x42>
 8000cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <xQueueGenericSend+0x46>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <xQueueGenericSend+0x48>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <xQueueGenericSend+0x64>
	__asm volatile
 8000cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cf4:	f383 8811 	msr	BASEPRI, r3
 8000cf8:	f3bf 8f6f 	isb	sy
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x72>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x76>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x78>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10b      	bne.n	8000d38 <xQueueGenericSend+0x94>
	__asm volatile
 8000d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d38:	f001 f97e 	bl	8002038 <xTaskGetSchedulerState>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <xQueueGenericSend+0xa4>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <xQueueGenericSend+0xa8>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <xQueueGenericSend+0xaa>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10b      	bne.n	8000d6a <xQueueGenericSend+0xc6>
	__asm volatile
 8000d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	61fb      	str	r3, [r7, #28]
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	e7fd      	b.n	8000d66 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d6a:	f001 fee5 	bl	8002b38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d302      	bcc.n	8000d80 <xQueueGenericSend+0xdc>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d129      	bne.n	8000dd4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000d86:	f000 fa43 	bl	8001210 <prvCopyDataToQueue>
 8000d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d010      	beq.n	8000db6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	3324      	adds	r3, #36	@ 0x24
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 ff8b 	bl	8001cb4 <xTaskRemoveFromEventList>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000da4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea4 <xQueueGenericSend+0x200>)
 8000da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	f3bf 8f6f 	isb	sy
 8000db4:	e00a      	b.n	8000dcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000dbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ea4 <xQueueGenericSend+0x200>)
 8000dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dcc:	f001 fee6 	bl	8002b9c <vPortExitCritical>
				return pdPASS;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e063      	b.n	8000e9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dda:	f001 fedf 	bl	8002b9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e05c      	b.n	8000e9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 ffc5 	bl	8001d7c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000df2:	2301      	movs	r3, #1
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000df6:	f001 fed1 	bl	8002b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000dfa:	f000 fd33 	bl	8001864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dfe:	f001 fe9b 	bl	8002b38 <vPortEnterCritical>
 8000e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0e:	d103      	bne.n	8000e18 <xQueueGenericSend+0x174>
 8000e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d103      	bne.n	8000e2e <xQueueGenericSend+0x18a>
 8000e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000e2e:	f001 feb5 	bl	8002b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e32:	1d3a      	adds	r2, r7, #4
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 ffc4 	bl	8001dc8 <xTaskCheckForTimeOut>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d124      	bne.n	8000e90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e48:	f000 fada 	bl	8001400 <prvIsQueueFull>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d018      	beq.n	8000e84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e54:	3310      	adds	r3, #16
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fed8 	bl	8001c10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e62:	f000 fa65 	bl	8001330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e66:	f000 fd0b 	bl	8001880 <xTaskResumeAll>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f af7c 	bne.w	8000d6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <xQueueGenericSend+0x200>)
 8000e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	f3bf 8f6f 	isb	sy
 8000e82:	e772      	b.n	8000d6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e86:	f000 fa53 	bl	8001330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e8a:	f000 fcf9 	bl	8001880 <xTaskResumeAll>
 8000e8e:	e76c      	b.n	8000d6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e92:	f000 fa4d 	bl	8001330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e96:	f000 fcf3 	bl	8001880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e9a:	2300      	movs	r3, #0
		}
	}
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3738      	adds	r7, #56	@ 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	e000ed04 	.word	0xe000ed04

08000ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10b      	bne.n	8000ed8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8000ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <xQueueGenericSendFromISR+0x3e>
 8000ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <xQueueGenericSendFromISR+0x42>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <xQueueGenericSendFromISR+0x44>
 8000eea:	2300      	movs	r3, #0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10b      	bne.n	8000f08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8000ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ef4:	f383 8811 	msr	BASEPRI, r3
 8000ef8:	f3bf 8f6f 	isb	sy
 8000efc:	f3bf 8f4f 	dsb	sy
 8000f00:	623b      	str	r3, [r7, #32]
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d103      	bne.n	8000f16 <xQueueGenericSendFromISR+0x6e>
 8000f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d101      	bne.n	8000f1a <xQueueGenericSendFromISR+0x72>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <xQueueGenericSendFromISR+0x74>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10b      	bne.n	8000f38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8000f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f24:	f383 8811 	msr	BASEPRI, r3
 8000f28:	f3bf 8f6f 	isb	sy
 8000f2c:	f3bf 8f4f 	dsb	sy
 8000f30:	61fb      	str	r3, [r7, #28]
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f38:	f001 fed6 	bl	8002ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f3c:	f3ef 8211 	mrs	r2, BASEPRI
 8000f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f44:	f383 8811 	msr	BASEPRI, r3
 8000f48:	f3bf 8f6f 	isb	sy
 8000f4c:	f3bf 8f4f 	dsb	sy
 8000f50:	61ba      	str	r2, [r7, #24]
 8000f52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000f54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d302      	bcc.n	8000f6a <xQueueGenericSendFromISR+0xc2>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d12c      	bne.n	8000fc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000f7a:	f000 f949 	bl	8001210 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8000f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f86:	d112      	bne.n	8000fae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d016      	beq.n	8000fbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f92:	3324      	adds	r3, #36	@ 0x24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fe8d 	bl	8001cb4 <xTaskRemoveFromEventList>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00e      	beq.n	8000fbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00b      	beq.n	8000fbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e007      	b.n	8000fbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8000fc2:	e001      	b.n	8000fc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8000fd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3738      	adds	r7, #56	@ 0x38
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	@ 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10b      	bne.n	8001014 <xQueueGenericReceive+0x34>
	__asm volatile
 8000ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001000:	f383 8811 	msr	BASEPRI, r3
 8001004:	f3bf 8f6f 	isb	sy
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <xQueueGenericReceive+0x42>
 800101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <xQueueGenericReceive+0x46>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <xQueueGenericReceive+0x48>
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10b      	bne.n	8001044 <xQueueGenericReceive+0x64>
	__asm volatile
 800102c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001030:	f383 8811 	msr	BASEPRI, r3
 8001034:	f3bf 8f6f 	isb	sy
 8001038:	f3bf 8f4f 	dsb	sy
 800103c:	623b      	str	r3, [r7, #32]
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001044:	f000 fff8 	bl	8002038 <xTaskGetSchedulerState>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <xQueueGenericReceive+0x74>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <xQueueGenericReceive+0x78>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <xQueueGenericReceive+0x7a>
 8001058:	2300      	movs	r3, #0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10b      	bne.n	8001076 <xQueueGenericReceive+0x96>
	__asm volatile
 800105e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001062:	f383 8811 	msr	BASEPRI, r3
 8001066:	f3bf 8f6f 	isb	sy
 800106a:	f3bf 8f4f 	dsb	sy
 800106e:	61fb      	str	r3, [r7, #28]
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	e7fd      	b.n	8001072 <xQueueGenericReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001076:	f001 fd5f 	bl	8002b38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800107c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001082:	2b00      	cmp	r3, #0
 8001084:	d046      	beq.n	8001114 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001090:	f000 f928 	bl	80012e4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d121      	bne.n	80010de <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800109a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a0:	639a      	str	r2, [r3, #56]	@ 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80010aa:	f001 f8e1 	bl	8002270 <pvTaskIncrementMutexHeldCount>
 80010ae:	4602      	mov	r2, r0
 80010b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d027      	beq.n	800110c <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010be:	3310      	adds	r3, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fdf7 	bl	8001cb4 <xTaskRemoveFromEventList>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01f      	beq.n	800110c <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010cc:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <xQueueGenericReceive+0x22c>)
 80010ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	e016      	b.n	800110c <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010e2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00f      	beq.n	800110c <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ee:	3324      	adds	r3, #36	@ 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fddf 	bl	8001cb4 <xTaskRemoveFromEventList>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010fc:	4b43      	ldr	r3, [pc, #268]	@ (800120c <xQueueGenericReceive+0x22c>)
 80010fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	f3bf 8f4f 	dsb	sy
 8001108:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800110c:	f001 fd46 	bl	8002b9c <vPortExitCritical>
				return pdPASS;
 8001110:	2301      	movs	r3, #1
 8001112:	e077      	b.n	8001204 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800111a:	f001 fd3f 	bl	8002b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800111e:	2300      	movs	r3, #0
 8001120:	e070      	b.n	8001204 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fe25 	bl	8001d7c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001132:	2301      	movs	r3, #1
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001136:	f001 fd31 	bl	8002b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800113a:	f000 fb93 	bl	8001864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800113e:	f001 fcfb 	bl	8002b38 <vPortEnterCritical>
 8001142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d103      	bne.n	8001158 <xQueueGenericReceive+0x178>
 8001150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800115a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800115e:	b25b      	sxtb	r3, r3
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d103      	bne.n	800116e <xQueueGenericReceive+0x18e>
 8001166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800116e:	f001 fd15 	bl	8002b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001172:	1d3a      	adds	r2, r7, #4
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fe24 	bl	8001dc8 <xTaskCheckForTimeOut>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d131      	bne.n	80011ea <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001188:	f000 f924 	bl	80013d4 <prvIsQueueEmpty>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d025      	beq.n	80011de <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d108      	bne.n	80011ac <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 800119a:	f001 fccd 	bl	8002b38 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800119e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff66 	bl	8002074 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80011a8:	f001 fcf8 	bl	8002b9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ae:	3324      	adds	r3, #36	@ 0x24
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fd2b 	bl	8001c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011bc:	f000 f8b8 	bl	8001330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011c0:	f000 fb5e 	bl	8001880 <xTaskResumeAll>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f47f af55 	bne.w	8001076 <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <xQueueGenericReceive+0x22c>)
 80011ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	f3bf 8f4f 	dsb	sy
 80011d8:	f3bf 8f6f 	isb	sy
 80011dc:	e74b      	b.n	8001076 <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011e0:	f000 f8a6 	bl	8001330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011e4:	f000 fb4c 	bl	8001880 <xTaskResumeAll>
 80011e8:	e745      	b.n	8001076 <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011ec:	f000 f8a0 	bl	8001330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011f0:	f000 fb46 	bl	8001880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011f6:	f000 f8ed 	bl	80013d4 <prvIsQueueEmpty>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f43f af3a 	beq.w	8001076 <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001202:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001204:	4618      	mov	r0, r3
 8001206:	3738      	adds	r7, #56	@ 0x38
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	e000ed04 	.word	0xe000ed04

08001210 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d14d      	bne.n	80012d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 ff90 	bl	8002160 <xTaskPriorityDisinherit>
 8001240:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	e043      	b.n	80012d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d119      	bne.n	8001284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	461a      	mov	r2, r3
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	f003 fb0a 	bl	8004874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	441a      	add	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d32b      	bcc.n	80012d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	e026      	b.n	80012d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68d8      	ldr	r0, [r3, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	461a      	mov	r2, r3
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	f003 faf0 	bl	8004874 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	425b      	negs	r3, r3
 800129e:	441a      	add	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	425b      	negs	r3, r3
 80012ba:	441a      	add	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d105      	bne.n	80012d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80012da:	697b      	ldr	r3, [r7, #20]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d018      	beq.n	8001328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	441a      	add	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	d303      	bcc.n	8001318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68d9      	ldr	r1, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	461a      	mov	r2, r3
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f003 faa6 	bl	8004874 <memcpy>
	}
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001338:	f001 fbfe 	bl	8002b38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001344:	e011      	b.n	800136a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d012      	beq.n	8001374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3324      	adds	r3, #36	@ 0x24
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fcae 	bl	8001cb4 <xTaskRemoveFromEventList>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800135e:	f000 fd95 	bl	8001e8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3b01      	subs	r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	dce9      	bgt.n	8001346 <prvUnlockQueue+0x16>
 8001372:	e000      	b.n	8001376 <prvUnlockQueue+0x46>
					break;
 8001374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	22ff      	movs	r2, #255	@ 0xff
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800137e:	f001 fc0d 	bl	8002b9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001382:	f001 fbd9 	bl	8002b38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800138c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800138e:	e011      	b.n	80013b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d012      	beq.n	80013be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3310      	adds	r3, #16
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fc89 	bl	8001cb4 <xTaskRemoveFromEventList>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013a8:	f000 fd70 	bl	8001e8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dce9      	bgt.n	8001390 <prvUnlockQueue+0x60>
 80013bc:	e000      	b.n	80013c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	22ff      	movs	r2, #255	@ 0xff
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80013c8:	f001 fbe8 	bl	8002b9c <vPortExitCritical>
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013dc:	f001 fbac 	bl	8002b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e001      	b.n	80013f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013f2:	f001 fbd3 	bl	8002b9c <vPortExitCritical>

	return xReturn;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001408:	f001 fb96 	bl	8002b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001414:	429a      	cmp	r2, r3
 8001416:	d102      	bne.n	800141e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001418:	2301      	movs	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e001      	b.n	8001422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001422:	f001 fbbb 	bl	8002b9c <vPortExitCritical>

	return xReturn;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e014      	b.n	800146a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001440:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <vQueueAddToRegistry+0x50>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10b      	bne.n	8001464 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <vQueueAddToRegistry+0x50>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <vQueueAddToRegistry+0x50>)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001462:	e006      	b.n	8001472 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b07      	cmp	r3, #7
 800146e:	d9e7      	bls.n	8001440 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000084 	.word	0x20000084

08001484 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001494:	f001 fb50 	bl	8002b38 <vPortEnterCritical>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d103      	bne.n	80014ae <vQueueWaitForMessageRestricted+0x2a>
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ba:	d103      	bne.n	80014c4 <vQueueWaitForMessageRestricted+0x40>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80014c4:	f001 fb6a 	bl	8002b9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d106      	bne.n	80014de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3324      	adds	r3, #36	@ 0x24
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fbbf 	bl	8001c5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff26 	bl	8001330 <prvUnlockQueue>
	}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	@ 0x30
 80014f0:	af04      	add	r7, sp, #16
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fc33 	bl	8002d6c <pvPortMalloc>
 8001506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00e      	beq.n	800152c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800150e:	2058      	movs	r0, #88	@ 0x58
 8001510:	f001 fc2c 	bl	8002d6c <pvPortMalloc>
 8001514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	631a      	str	r2, [r3, #48]	@ 0x30
 8001522:	e005      	b.n	8001530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001524:	6978      	ldr	r0, [r7, #20]
 8001526:	f001 fce9 	bl	8002efc <vPortFree>
 800152a:	e001      	b.n	8001530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d013      	beq.n	800155e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001536:	88fa      	ldrh	r2, [r7, #6]
 8001538:	2300      	movs	r3, #0
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f80e 	bl	800156e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001552:	69f8      	ldr	r0, [r7, #28]
 8001554:	f000 f894 	bl	8001680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	e002      	b.n	8001564 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001564:	69bb      	ldr	r3, [r7, #24]
	}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b088      	sub	sp, #32
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800157c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	461a      	mov	r2, r3
 8001586:	21a5      	movs	r1, #165	@ 0xa5
 8001588:	f003 f948 	bl	800481c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800158c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800158e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001596:	3b01      	subs	r3, #1
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f023 0307 	bic.w	r3, r3, #7
 80015a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80015b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	f3bf 8f6f 	isb	sy
 80015bc:	f3bf 8f4f 	dsb	sy
 80015c0:	617b      	str	r3, [r7, #20]
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e012      	b.n	80015f4 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	7819      	ldrb	r1, [r3, #0]
 80015d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	3334      	adds	r3, #52	@ 0x34
 80015de:	460a      	mov	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	d9e9      	bls.n	80015ce <prvInitialiseNewTask+0x60>
 80015fa:	e000      	b.n	80015fe <prvInitialiseNewTask+0x90>
		{
			break;
 80015fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	2b04      	cmp	r3, #4
 800160a:	d901      	bls.n	8001610 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800160c:	2304      	movs	r3, #4
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001614:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800161a:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800161c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161e:	2200      	movs	r2, #0
 8001620:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001624:	3304      	adds	r3, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f9df 	bl	80009ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800162c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800162e:	3318      	adds	r3, #24
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f9da 	bl	80009ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800163a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800163c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163e:	f1c3 0205 	rsb	r2, r3, #5
 8001642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800164c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164e:	2200      	movs	r2, #0
 8001650:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	69b8      	ldr	r0, [r7, #24]
 8001660:	f001 f95c 	bl	800291c <pxPortInitialiseStack>
 8001664:	4602      	mov	r2, r0
 8001666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001668:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001688:	f001 fa56 	bl	8002b38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <prvAddNewTaskToReadyList+0xc0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <prvAddNewTaskToReadyList+0xc0>)
 8001694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <prvAddNewTaskToReadyList+0xc4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800169e:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <prvAddNewTaskToReadyList+0xc4>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <prvAddNewTaskToReadyList+0xc0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d110      	bne.n	80016ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016ac:	f000 fc12 	bl	8001ed4 <prvInitialiseTaskLists>
 80016b0:	e00d      	b.n	80016ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016b2:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <prvAddNewTaskToReadyList+0xc8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <prvAddNewTaskToReadyList+0xc4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d802      	bhi.n	80016ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <prvAddNewTaskToReadyList+0xc4>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <prvAddNewTaskToReadyList+0xcc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <prvAddNewTaskToReadyList+0xcc>)
 80016d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <prvAddNewTaskToReadyList+0xcc>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	2201      	movs	r2, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <prvAddNewTaskToReadyList+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <prvAddNewTaskToReadyList+0xd0>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <prvAddNewTaskToReadyList+0xd4>)
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff f97b 	bl	8000a04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800170e:	f001 fa45 	bl	8002b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <prvAddNewTaskToReadyList+0xc8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00e      	beq.n	8001738 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <prvAddNewTaskToReadyList+0xc4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <prvAddNewTaskToReadyList+0xd8>)
 800172a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000019c 	.word	0x2000019c
 8001744:	200000c4 	.word	0x200000c4
 8001748:	200001a8 	.word	0x200001a8
 800174c:	200001b8 	.word	0x200001b8
 8001750:	200001a4 	.word	0x200001a4
 8001754:	200000c8 	.word	0x200000c8
 8001758:	e000ed04 	.word	0xe000ed04

0800175c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d018      	beq.n	80017a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <vTaskDelay+0x64>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <vTaskDelay+0x32>
	__asm volatile
 8001776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800177a:	f383 8811 	msr	BASEPRI, r3
 800177e:	f3bf 8f6f 	isb	sy
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	60bb      	str	r3, [r7, #8]
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	e7fd      	b.n	800178a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800178e:	f000 f869 	bl	8001864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001792:	2100      	movs	r1, #0
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fd7f 	bl	8002298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800179a:	f000 f871 	bl	8001880 <xTaskResumeAll>
 800179e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d107      	bne.n	80017b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80017a6:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <vTaskDelay+0x68>)
 80017a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f3bf 8f4f 	dsb	sy
 80017b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001c4 	.word	0x200001c4
 80017c4:	e000ed04 	.word	0xe000ed04

080017c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <vTaskStartScheduler+0x84>)
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	491d      	ldr	r1, [pc, #116]	@ (8001850 <vTaskStartScheduler+0x88>)
 80017dc:	481d      	ldr	r0, [pc, #116]	@ (8001854 <vTaskStartScheduler+0x8c>)
 80017de:	f7ff fe85 	bl	80014ec <xTaskCreate>
 80017e2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d102      	bne.n	80017f0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80017ea:	f000 fdbb 	bl	8002364 <xTimerCreateTimerTask>
 80017ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d116      	bne.n	8001824 <vTaskStartScheduler+0x5c>
	__asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	60bb      	str	r3, [r7, #8]
}
 8001808:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <vTaskStartScheduler+0x90>)
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <vTaskStartScheduler+0x94>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <vTaskStartScheduler+0x98>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800181e:	f001 f8fb 	bl	8002a18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001822:	e00f      	b.n	8001844 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182a:	d10b      	bne.n	8001844 <vTaskStartScheduler+0x7c>
	__asm volatile
 800182c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001830:	f383 8811 	msr	BASEPRI, r3
 8001834:	f3bf 8f6f 	isb	sy
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	607b      	str	r3, [r7, #4]
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <vTaskStartScheduler+0x78>
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001c0 	.word	0x200001c0
 8001850:	080048c8 	.word	0x080048c8
 8001854:	08001ea5 	.word	0x08001ea5
 8001858:	200001bc 	.word	0x200001bc
 800185c:	200001a8 	.word	0x200001a8
 8001860:	200001a0 	.word	0x200001a0

08001864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <vTaskSuspendAll+0x18>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a03      	ldr	r2, [pc, #12]	@ (800187c <vTaskSuspendAll+0x18>)
 8001870:	6013      	str	r3, [r2, #0]
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200001c4 	.word	0x200001c4

08001880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800188e:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <xTaskResumeAll+0x118>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10b      	bne.n	80018ae <xTaskResumeAll+0x2e>
	__asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800189a:	f383 8811 	msr	BASEPRI, r3
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f3bf 8f4f 	dsb	sy
 80018a6:	603b      	str	r3, [r7, #0]
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80018ae:	f001 f943 	bl	8002b38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80018b2:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <xTaskResumeAll+0x118>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <xTaskResumeAll+0x118>)
 80018ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018bc:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <xTaskResumeAll+0x118>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d161      	bne.n	8001988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018c4:	4b35      	ldr	r3, [pc, #212]	@ (800199c <xTaskResumeAll+0x11c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d05d      	beq.n	8001988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018cc:	e02e      	b.n	800192c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80018ce:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <xTaskResumeAll+0x120>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3318      	adds	r3, #24
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f8ef 	bl	8000abe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3304      	adds	r3, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f8ea 	bl	8000abe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	2201      	movs	r2, #1
 80018f0:	409a      	lsls	r2, r3
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <xTaskResumeAll+0x124>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	4a2a      	ldr	r2, [pc, #168]	@ (80019a4 <xTaskResumeAll+0x124>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <xTaskResumeAll+0x128>)
 800190a:	441a      	add	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff f876 	bl	8000a04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800191c:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <xTaskResumeAll+0x12c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	429a      	cmp	r2, r3
 8001924:	d302      	bcc.n	800192c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <xTaskResumeAll+0x130>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800192c:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <xTaskResumeAll+0x120>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1cc      	bne.n	80018ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800193a:	f000 fb57 	bl	8001fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800193e:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <xTaskResumeAll+0x134>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800194a:	f000 f847 	bl	80019dc <xTaskIncrementTick>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <xTaskResumeAll+0x130>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3b01      	subs	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f1      	bne.n	800194a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <xTaskResumeAll+0x134>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <xTaskResumeAll+0x130>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001974:	2301      	movs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <xTaskResumeAll+0x138>)
 800197a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001988:	f001 f908 	bl	8002b9c <vPortExitCritical>

	return xAlreadyYielded;
 800198c:	68bb      	ldr	r3, [r7, #8]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001c4 	.word	0x200001c4
 800199c:	2000019c 	.word	0x2000019c
 80019a0:	2000015c 	.word	0x2000015c
 80019a4:	200001a4 	.word	0x200001a4
 80019a8:	200000c8 	.word	0x200000c8
 80019ac:	200000c4 	.word	0x200000c4
 80019b0:	200001b0 	.word	0x200001b0
 80019b4:	200001ac 	.word	0x200001ac
 80019b8:	e000ed04 	.word	0xe000ed04

080019bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <xTaskGetTickCount+0x1c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200001a0 	.word	0x200001a0

080019dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <xTaskIncrementTick+0x150>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 808e 	bne.w	8001b0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80019f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b30 <xTaskIncrementTick+0x154>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001b30 <xTaskIncrementTick+0x154>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d121      	bne.n	8001a48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a04:	4b4b      	ldr	r3, [pc, #300]	@ (8001b34 <xTaskIncrementTick+0x158>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
 8001a1e:	603b      	str	r3, [r7, #0]
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <xTaskIncrementTick+0x46>
 8001a26:	4b43      	ldr	r3, [pc, #268]	@ (8001b34 <xTaskIncrementTick+0x158>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <xTaskIncrementTick+0x15c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a40      	ldr	r2, [pc, #256]	@ (8001b34 <xTaskIncrementTick+0x158>)
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4a40      	ldr	r2, [pc, #256]	@ (8001b38 <xTaskIncrementTick+0x15c>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <xTaskIncrementTick+0x160>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a3e      	ldr	r2, [pc, #248]	@ (8001b3c <xTaskIncrementTick+0x160>)
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	f000 fad2 	bl	8001fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a48:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <xTaskIncrementTick+0x164>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d34d      	bcc.n	8001aee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a52:	4b38      	ldr	r3, [pc, #224]	@ (8001b34 <xTaskIncrementTick+0x158>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <xTaskIncrementTick+0x84>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <xTaskIncrementTick+0x86>
 8001a60:	2300      	movs	r3, #0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <xTaskIncrementTick+0x164>)
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	601a      	str	r2, [r3, #0]
					break;
 8001a6e:	e03e      	b.n	8001aee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a70:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <xTaskIncrementTick+0x158>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d203      	bcs.n	8001a90 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a88:	4a2d      	ldr	r2, [pc, #180]	@ (8001b40 <xTaskIncrementTick+0x164>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
						break;
 8001a8e:	e02e      	b.n	8001aee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3304      	adds	r3, #4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f812 	bl	8000abe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3318      	adds	r3, #24
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f809 	bl	8000abe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <xTaskIncrementTick+0x168>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	4a22      	ldr	r2, [pc, #136]	@ (8001b44 <xTaskIncrementTick+0x168>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <xTaskIncrementTick+0x16c>)
 8001acc:	441a      	add	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f7fe ff95 	bl	8000a04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <xTaskIncrementTick+0x170>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3b4      	bcc.n	8001a52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aec:	e7b1      	b.n	8001a52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <xTaskIncrementTick+0x170>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af4:	4914      	ldr	r1, [pc, #80]	@ (8001b48 <xTaskIncrementTick+0x16c>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d907      	bls.n	8001b16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e004      	b.n	8001b16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <xTaskIncrementTick+0x174>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <xTaskIncrementTick+0x174>)
 8001b14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <xTaskIncrementTick+0x178>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001b22:	697b      	ldr	r3, [r7, #20]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001c4 	.word	0x200001c4
 8001b30:	200001a0 	.word	0x200001a0
 8001b34:	20000154 	.word	0x20000154
 8001b38:	20000158 	.word	0x20000158
 8001b3c:	200001b4 	.word	0x200001b4
 8001b40:	200001bc 	.word	0x200001bc
 8001b44:	200001a4 	.word	0x200001a4
 8001b48:	200000c8 	.word	0x200000c8
 8001b4c:	200000c4 	.word	0x200000c4
 8001b50:	200001ac 	.word	0x200001ac
 8001b54:	200001b0 	.word	0x200001b0

08001b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b5e:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <vTaskSwitchContext+0xa4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b66:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <vTaskSwitchContext+0xa8>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b6c:	e040      	b.n	8001bf0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <vTaskSwitchContext+0xa8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b74:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <vTaskSwitchContext+0xac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	f1c3 031f 	rsb	r3, r3, #31
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	491f      	ldr	r1, [pc, #124]	@ (8001c08 <vTaskSwitchContext+0xb0>)
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8001b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ba2:	f383 8811 	msr	BASEPRI, r3
 8001ba6:	f3bf 8f6f 	isb	sy
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	607b      	str	r3, [r7, #4]
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	e7fd      	b.n	8001bb2 <vTaskSwitchContext+0x5a>
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4a11      	ldr	r2, [pc, #68]	@ (8001c08 <vTaskSwitchContext+0xb0>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d104      	bne.n	8001be6 <vTaskSwitchContext+0x8e>
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <vTaskSwitchContext+0xb4>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	200001c4 	.word	0x200001c4
 8001c00:	200001b0 	.word	0x200001b0
 8001c04:	200001a4 	.word	0x200001a4
 8001c08:	200000c8 	.word	0x200000c8
 8001c0c:	200000c4 	.word	0x200000c4

08001c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	60fb      	str	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c38:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <vTaskPlaceOnEventList+0x48>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7fe ff03 	bl	8000a4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c46:	2101      	movs	r1, #1
 8001c48:	6838      	ldr	r0, [r7, #0]
 8001c4a:	f000 fb25 	bl	8002298 <prvAddCurrentTaskToDelayedList>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200000c4 	.word	0x200000c4

08001c5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10b      	bne.n	8001c86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8001c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	617b      	str	r3, [r7, #20]
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	e7fd      	b.n	8001c82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7fe feb8 	bl	8000a04 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	68b8      	ldr	r0, [r7, #8]
 8001ca4:	f000 faf8 	bl	8002298 <prvAddCurrentTaskToDelayedList>
	}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000c4 	.word	0x200000c4

08001cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10b      	bne.n	8001ce2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	60fb      	str	r3, [r7, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	e7fd      	b.n	8001cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fee9 	bl	8000abe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <xTaskRemoveFromEventList+0xb0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11c      	bne.n	8001d2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fee0 	bl	8000abe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	2201      	movs	r2, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <xTaskRemoveFromEventList+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <xTaskRemoveFromEventList+0xb4>)
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <xTaskRemoveFromEventList+0xb8>)
 8001d1e:	441a      	add	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f7fe fe6c 	bl	8000a04 <vListInsertEnd>
 8001d2c:	e005      	b.n	8001d3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	3318      	adds	r3, #24
 8001d32:	4619      	mov	r1, r3
 8001d34:	480e      	ldr	r0, [pc, #56]	@ (8001d70 <xTaskRemoveFromEventList+0xbc>)
 8001d36:	f7fe fe65 	bl	8000a04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <xTaskRemoveFromEventList+0xc0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d905      	bls.n	8001d54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <xTaskRemoveFromEventList+0xc4>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e001      	b.n	8001d58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001d58:	697b      	ldr	r3, [r7, #20]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200001c4 	.word	0x200001c4
 8001d68:	200001a4 	.word	0x200001a4
 8001d6c:	200000c8 	.word	0x200000c8
 8001d70:	2000015c 	.word	0x2000015c
 8001d74:	200000c4 	.word	0x200000c4
 8001d78:	200001b0 	.word	0x200001b0

08001d7c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	60fb      	str	r3, [r7, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <vTaskSetTimeOutState+0x44>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <vTaskSetTimeOutState+0x48>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200001b4 	.word	0x200001b4
 8001dc4:	200001a0 	.word	0x200001a0

08001dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	60fb      	str	r3, [r7, #12]
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8001df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	60bb      	str	r3, [r7, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	e7fd      	b.n	8001e0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001e0e:	f000 fe93 	bl	8002b38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <xTaskCheckForTimeOut+0xbc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d102      	bne.n	8001e28 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e026      	b.n	8001e76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <xTaskCheckForTimeOut+0xc0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d007      	beq.n	8001e44 <xTaskCheckForTimeOut+0x7c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e018      	b.n	8001e76 <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	1ad2      	subs	r2, r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d20e      	bcs.n	8001e72 <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	441a      	add	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff88 	bl	8001d7c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e001      	b.n	8001e76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001e76:	f000 fe91 	bl	8002b9c <vPortExitCritical>

	return xReturn;
 8001e7a:	697b      	ldr	r3, [r7, #20]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200001a0 	.word	0x200001a0
 8001e88:	200001b4 	.word	0x200001b4

08001e8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <vTaskMissedYield+0x14>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	200001b0 	.word	0x200001b0

08001ea4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001eac:	f000 f852 	bl	8001f54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <prvIdleTask+0x28>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d9f9      	bls.n	8001eac <prvIdleTask+0x8>
			{
				taskYIELD();
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <prvIdleTask+0x2c>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ec8:	e7f0      	b.n	8001eac <prvIdleTask+0x8>
 8001eca:	bf00      	nop
 8001ecc:	200000c8 	.word	0x200000c8
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	e00c      	b.n	8001efa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4a12      	ldr	r2, [pc, #72]	@ (8001f34 <prvInitialiseTaskLists+0x60>)
 8001eec:	4413      	add	r3, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fd5b 	bl	80009aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d9ef      	bls.n	8001ee0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f00:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <prvInitialiseTaskLists+0x64>)
 8001f02:	f7fe fd52 	bl	80009aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <prvInitialiseTaskLists+0x68>)
 8001f08:	f7fe fd4f 	bl	80009aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f0c:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <prvInitialiseTaskLists+0x6c>)
 8001f0e:	f7fe fd4c 	bl	80009aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <prvInitialiseTaskLists+0x70>)
 8001f14:	f7fe fd49 	bl	80009aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <prvInitialiseTaskLists+0x74>)
 8001f1a:	f7fe fd46 	bl	80009aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <prvInitialiseTaskLists+0x78>)
 8001f20:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <prvInitialiseTaskLists+0x64>)
 8001f22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <prvInitialiseTaskLists+0x7c>)
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <prvInitialiseTaskLists+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200000c8 	.word	0x200000c8
 8001f38:	2000012c 	.word	0x2000012c
 8001f3c:	20000140 	.word	0x20000140
 8001f40:	2000015c 	.word	0x2000015c
 8001f44:	20000170 	.word	0x20000170
 8001f48:	20000188 	.word	0x20000188
 8001f4c:	20000154 	.word	0x20000154
 8001f50:	20000158 	.word	0x20000158

08001f54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f5a:	e028      	b.n	8001fae <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001f5c:	f7ff fc82 	bl	8001864 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <prvCheckTasksWaitingTermination+0x6c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001f70:	f7ff fc86 	bl	8001880 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d119      	bne.n	8001fae <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001f7a:	f000 fddd 	bl	8002b38 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <prvCheckTasksWaitingTermination+0x6c>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fd97 	bl	8000abe <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <prvCheckTasksWaitingTermination+0x70>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc4 <prvCheckTasksWaitingTermination+0x70>)
 8001f98:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <prvCheckTasksWaitingTermination+0x74>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <prvCheckTasksWaitingTermination+0x74>)
 8001fa2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001fa4:	f000 fdfa 	bl	8002b9c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f000 f80f 	bl	8001fcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <prvCheckTasksWaitingTermination+0x74>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1d2      	bne.n	8001f5c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000170 	.word	0x20000170
 8001fc4:	2000019c 	.word	0x2000019c
 8001fc8:	20000184 	.word	0x20000184

08001fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 ff8f 	bl	8002efc <vPortFree>
			vPortFree( pxTCB );
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 ff8c 	bl	8002efc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <prvResetNextTaskUnblockTime+0x44>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <prvResetNextTaskUnblockTime+0x14>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <prvResetNextTaskUnblockTime+0x16>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <prvResetNextTaskUnblockTime+0x48>)
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800200e:	e008      	b.n	8002022 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <prvResetNextTaskUnblockTime+0x44>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <prvResetNextTaskUnblockTime+0x48>)
 8002020:	6013      	str	r3, [r2, #0]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000154 	.word	0x20000154
 8002034:	200001bc 	.word	0x200001bc

08002038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800203e:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <xTaskGetSchedulerState+0x34>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002046:	2301      	movs	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	e008      	b.n	800205e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <xTaskGetSchedulerState+0x38>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002054:	2302      	movs	r3, #2
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e001      	b.n	800205e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800205e:	687b      	ldr	r3, [r7, #4]
	}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	200001a8 	.word	0x200001a8
 8002070:	200001c4 	.word	0x200001c4

08002074 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d062      	beq.n	800214c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800208a:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <vTaskPriorityInherit+0xe0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	429a      	cmp	r2, r3
 8002092:	d25b      	bcs.n	800214c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db06      	blt.n	80020aa <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <vTaskPriorityInherit+0xe0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f1c3 0205 	rsb	r2, r3, #5
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6959      	ldr	r1, [r3, #20]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4a27      	ldr	r2, [pc, #156]	@ (8002158 <vTaskPriorityInherit+0xe4>)
 80020bc:	4413      	add	r3, r2
 80020be:	4299      	cmp	r1, r3
 80020c0:	d101      	bne.n	80020c6 <vTaskPriorityInherit+0x52>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <vTaskPriorityInherit+0x54>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03a      	beq.n	8002142 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fcf4 	bl	8000abe <uxListRemove>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d115      	bne.n	8002108 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e0:	491d      	ldr	r1, [pc, #116]	@ (8002158 <vTaskPriorityInherit+0xe4>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <vTaskPriorityInherit+0x94>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <vTaskPriorityInherit+0xe8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4013      	ands	r3, r2
 8002104:	4a15      	ldr	r2, [pc, #84]	@ (800215c <vTaskPriorityInherit+0xe8>)
 8002106:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <vTaskPriorityInherit+0xe0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	2201      	movs	r2, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <vTaskPriorityInherit+0xe8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	4a0e      	ldr	r2, [pc, #56]	@ (800215c <vTaskPriorityInherit+0xe8>)
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <vTaskPriorityInherit+0xe4>)
 8002132:	441a      	add	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7fe fc62 	bl	8000a04 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002140:	e004      	b.n	800214c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <vTaskPriorityInherit+0xe0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200000c4 	.word	0x200000c4
 8002158:	200000c8 	.word	0x200000c8
 800215c:	200001a4 	.word	0x200001a4

08002160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d070      	beq.n	8002258 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002176:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <xTaskPriorityDisinherit+0x104>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d00b      	beq.n	8002198 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	60fb      	str	r3, [r7, #12]
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	60bb      	str	r3, [r7, #8]
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d044      	beq.n	8002258 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d140      	bne.n	8002258 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	3304      	adds	r3, #4
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fc6f 	bl	8000abe <uxListRemove>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ea:	491f      	ldr	r1, [pc, #124]	@ (8002268 <xTaskPriorityDisinherit+0x108>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <xTaskPriorityDisinherit+0xb2>
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	2201      	movs	r2, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <xTaskPriorityDisinherit+0x10c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4013      	ands	r3, r2
 800220e:	4a17      	ldr	r2, [pc, #92]	@ (800226c <xTaskPriorityDisinherit+0x10c>)
 8002210:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	f1c3 0205 	rsb	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	2201      	movs	r2, #1
 800222c:	409a      	lsls	r2, r3
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <xTaskPriorityDisinherit+0x10c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <xTaskPriorityDisinherit+0x10c>)
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <xTaskPriorityDisinherit+0x108>)
 8002246:	441a      	add	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	3304      	adds	r3, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7fe fbd8 	bl	8000a04 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002254:	2301      	movs	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002258:	697b      	ldr	r3, [r7, #20]
	}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200000c4 	.word	0x200000c4
 8002268:	200000c8 	.word	0x200000c8
 800226c:	200001a4 	.word	0x200001a4

08002270 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002274:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <pvTaskIncrementMutexHeldCount+0x24>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <pvTaskIncrementMutexHeldCount+0x24>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002282:	3201      	adds	r2, #1
 8002284:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8002286:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <pvTaskIncrementMutexHeldCount+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
	}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	200000c4 	.word	0x200000c4

08002298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022a2:	4b29      	ldr	r3, [pc, #164]	@ (8002348 <prvAddCurrentTaskToDelayedList+0xb0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022a8:	4b28      	ldr	r3, [pc, #160]	@ (800234c <prvAddCurrentTaskToDelayedList+0xb4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3304      	adds	r3, #4
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fc05 	bl	8000abe <uxListRemove>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80022ba:	4b24      	ldr	r3, [pc, #144]	@ (800234c <prvAddCurrentTaskToDelayedList+0xb4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	2201      	movs	r2, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4013      	ands	r3, r2
 80022ce:	4a20      	ldr	r2, [pc, #128]	@ (8002350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80022d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d10a      	bne.n	80022f0 <prvAddCurrentTaskToDelayedList+0x58>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <prvAddCurrentTaskToDelayedList+0xb4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3304      	adds	r3, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	481a      	ldr	r0, [pc, #104]	@ (8002354 <prvAddCurrentTaskToDelayedList+0xbc>)
 80022ea:	f7fe fb8b 	bl	8000a04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022ee:	e026      	b.n	800233e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022f8:	4b14      	ldr	r3, [pc, #80]	@ (800234c <prvAddCurrentTaskToDelayedList+0xb4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d209      	bcs.n	800231c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <prvAddCurrentTaskToDelayedList+0xb4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3304      	adds	r3, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f7fe fb99 	bl	8000a4c <vListInsert>
}
 800231a:	e010      	b.n	800233e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800231c:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <prvAddCurrentTaskToDelayedList+0xc4>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3304      	adds	r3, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f7fe fb8f 	bl	8000a4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	429a      	cmp	r2, r3
 8002336:	d202      	bcs.n	800233e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002338:	4a09      	ldr	r2, [pc, #36]	@ (8002360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6013      	str	r3, [r2, #0]
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200001a0 	.word	0x200001a0
 800234c:	200000c4 	.word	0x200000c4
 8002350:	200001a4 	.word	0x200001a4
 8002354:	20000188 	.word	0x20000188
 8002358:	20000158 	.word	0x20000158
 800235c:	20000154 	.word	0x20000154
 8002360:	200001bc 	.word	0x200001bc

08002364 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800236e:	f000 fa9f 	bl	80028b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <xTimerCreateTimerTask+0x58>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <xTimerCreateTimerTask+0x5c>)
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002388:	490e      	ldr	r1, [pc, #56]	@ (80023c4 <xTimerCreateTimerTask+0x60>)
 800238a:	480f      	ldr	r0, [pc, #60]	@ (80023c8 <xTimerCreateTimerTask+0x64>)
 800238c:	f7ff f8ae 	bl	80014ec <xTaskCreate>
 8002390:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	603b      	str	r3, [r7, #0]
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <xTimerCreateTimerTask+0x48>
	return xReturn;
 80023b0:	687b      	ldr	r3, [r7, #4]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200001f8 	.word	0x200001f8
 80023c0:	200001fc 	.word	0x200001fc
 80023c4:	080048d0 	.word	0x080048d0
 80023c8:	080024ed 	.word	0x080024ed

080023cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <xTimerGenericCommand+0x30>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	623b      	str	r3, [r7, #32]
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <xTimerGenericCommand+0x98>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02a      	beq.n	800245a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b05      	cmp	r3, #5
 8002414:	dc18      	bgt.n	8002448 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002416:	f7ff fe0f 	bl	8002038 <xTaskGetSchedulerState>
 800241a:	4603      	mov	r3, r0
 800241c:	2b02      	cmp	r3, #2
 800241e:	d109      	bne.n	8002434 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <xTimerGenericCommand+0x98>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	f107 0114 	add.w	r1, r7, #20
 8002428:	2300      	movs	r3, #0
 800242a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242c:	f7fe fc3a 	bl	8000ca4 <xQueueGenericSend>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24
 8002432:	e012      	b.n	800245a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <xTimerGenericCommand+0x98>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f107 0114 	add.w	r1, r7, #20
 800243c:	2300      	movs	r3, #0
 800243e:	2200      	movs	r2, #0
 8002440:	f7fe fc30 	bl	8000ca4 <xQueueGenericSend>
 8002444:	6278      	str	r0, [r7, #36]	@ 0x24
 8002446:	e008      	b.n	800245a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <xTimerGenericCommand+0x98>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	f107 0114 	add.w	r1, r7, #20
 8002450:	2300      	movs	r3, #0
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	f7fe fd28 	bl	8000ea8 <xQueueGenericSendFromISR>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200001f8 	.word	0x200001f8

08002468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002472:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <prvProcessExpiredTimer+0x80>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3304      	adds	r3, #4
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fb1c 	bl	8000abe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d123      	bne.n	80024d6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	18d1      	adds	r1, r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f000 f8cc 	bl	8002638 <prvInsertTimerInActiveList>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d017      	beq.n	80024d6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	2100      	movs	r1, #0
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f7ff ff8b 	bl	80023cc <xTimerGenericCommand>
 80024b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	60fb      	str	r3, [r7, #12]
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	e7fd      	b.n	80024d2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	4798      	blx	r3
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200001f0 	.word	0x200001f0

080024ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f859 	bl	80025b0 <prvGetNextExpireTime>
 80024fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4619      	mov	r1, r3
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f805 	bl	8002514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800250a:	f000 f8d7 	bl	80026bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800250e:	bf00      	nop
 8002510:	e7f0      	b.n	80024f4 <prvTimerTask+0x8>
	...

08002514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800251e:	f7ff f9a1 	bl	8001864 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f866 	bl	80025f8 <prvSampleTimeNow>
 800252c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d130      	bne.n	8002596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <prvProcessTimerOrBlockTask+0x3c>
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	429a      	cmp	r2, r3
 8002540:	d806      	bhi.n	8002550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002542:	f7ff f99d 	bl	8001880 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff8d 	bl	8002468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800254e:	e024      	b.n	800259a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <prvProcessTimerOrBlockTask+0x90>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <prvProcessTimerOrBlockTask+0x94>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe ff85 	bl	8001484 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800257a:	f7ff f981 	bl	8001880 <xTaskResumeAll>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <prvProcessTimerOrBlockTask+0x98>)
 8002586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	f3bf 8f6f 	isb	sy
}
 8002594:	e001      	b.n	800259a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002596:	f7ff f973 	bl	8001880 <xTaskResumeAll>
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200001f4 	.word	0x200001f4
 80025a8:	200001f8 	.word	0x200001f8
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <prvGetNextExpireTime+0x44>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <prvGetNextExpireTime+0x44>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e001      	b.n	80025e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	200001f0 	.word	0x200001f0

080025f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002600:	f7ff f9dc 	bl	80019bc <xTaskGetTickCount>
 8002604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <prvSampleTimeNow+0x3c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d205      	bcs.n	800261c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002610:	f000 f8ec 	bl	80027ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e002      	b.n	8002622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002622:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <prvSampleTimeNow+0x3c>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000200 	.word	0x20000200

08002638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	d812      	bhi.n	8002684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800266c:	2301      	movs	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e01b      	b.n	80026aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <prvInsertTimerInActiveList+0x7c>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f7fe f9e5 	bl	8000a4c <vListInsert>
 8002682:	e012      	b.n	80026aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d206      	bcs.n	800269a <prvInsertTimerInActiveList+0x62>
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d302      	bcc.n	800269a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002694:	2301      	movs	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e007      	b.n	80026aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <prvInsertTimerInActiveList+0x80>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3304      	adds	r3, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4610      	mov	r0, r2
 80026a6:	f7fe f9d1 	bl	8000a4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80026aa:	697b      	ldr	r3, [r7, #20]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200001f4 	.word	0x200001f4
 80026b8:	200001f0 	.word	0x200001f0

080026bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	@ 0x30
 80026c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026c2:	e080      	b.n	80027c6 <prvProcessReceivedCommands+0x10a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db7d      	blt.n	80027c6 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	3304      	adds	r3, #4
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe f9ef 	bl	8000abe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff88 	bl	80025f8 <prvSampleTimeNow>
 80026e8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d867      	bhi.n	80027c0 <prvProcessReceivedCommands+0x104>
 80026f0:	a201      	add	r2, pc, #4	@ (adr r2, 80026f8 <prvProcessReceivedCommands+0x3c>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002721 	.word	0x08002721
 8002704:	080027c1 	.word	0x080027c1
 8002708:	0800277f 	.word	0x0800277f
 800270c:	080027b9 	.word	0x080027b9
 8002710:	08002721 	.word	0x08002721
 8002714:	08002721 	.word	0x08002721
 8002718:	080027c1 	.word	0x080027c1
 800271c:	0800277f 	.word	0x0800277f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	18d1      	adds	r1, r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a3a      	ldr	r2, [r7, #32]
 800272c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800272e:	f7ff ff83 	bl	8002638 <prvInsertTimerInActiveList>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d045      	beq.n	80027c4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800273e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d13d      	bne.n	80027c4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	441a      	add	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	2100      	movs	r1, #0
 8002758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800275a:	f7ff fe37 	bl	80023cc <xTimerGenericCommand>
 800275e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d12e      	bne.n	80027c4 <prvProcessReceivedCommands+0x108>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	61bb      	str	r3, [r7, #24]
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	e7fd      	b.n	800277a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	617b      	str	r3, [r7, #20]
}
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	18d1      	adds	r1, r2, r3
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	6a3a      	ldr	r2, [r7, #32]
 80027b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027b2:	f7ff ff41 	bl	8002638 <prvInsertTimerInActiveList>
					break;
 80027b6:	e006      	b.n	80027c6 <prvProcessReceivedCommands+0x10a>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80027b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027ba:	f000 fb9f 	bl	8002efc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027be:	e002      	b.n	80027c6 <prvProcessReceivedCommands+0x10a>

				default	:
					/* Don't expect to get here. */
					break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <prvProcessReceivedCommands+0x10a>
					break;
 80027c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <prvProcessReceivedCommands+0x12c>)
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f107 0108 	add.w	r1, r7, #8
 80027ce:	2300      	movs	r3, #0
 80027d0:	2200      	movs	r2, #0
 80027d2:	f7fe fc05 	bl	8000fe0 <xQueueGenericReceive>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f47f af73 	bne.w	80026c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	@ 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001f8 	.word	0x200001f8

080027ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027f2:	e046      	b.n	8002882 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027f4:	4b2c      	ldr	r3, [pc, #176]	@ (80028a8 <prvSwitchTimerLists+0xbc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <prvSwitchTimerLists+0xbc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3304      	adds	r3, #4
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe f956 	bl	8000abe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d12f      	bne.n	8002882 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d90e      	bls.n	8002852 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <prvSwitchTimerLists+0xbc>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f7fe f8fe 	bl	8000a4c <vListInsert>
 8002850:	e017      	b.n	8002882 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2300      	movs	r3, #0
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	2100      	movs	r1, #0
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff fdb5 	bl	80023cc <xTimerGenericCommand>
 8002862:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <prvSwitchTimerLists+0x96>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	603b      	str	r3, [r7, #0]
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <prvSwitchTimerLists+0xbc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1b3      	bne.n	80027f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <prvSwitchTimerLists+0xbc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <prvSwitchTimerLists+0xc0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <prvSwitchTimerLists+0xbc>)
 8002898:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800289a:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <prvSwitchTimerLists+0xc0>)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200001f0 	.word	0x200001f0
 80028ac:	200001f4 	.word	0x200001f4

080028b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028b4:	f000 f940 	bl	8002b38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <prvCheckForValidListAndQueue+0x54>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11d      	bne.n	80028fc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80028c0:	4811      	ldr	r0, [pc, #68]	@ (8002908 <prvCheckForValidListAndQueue+0x58>)
 80028c2:	f7fe f872 	bl	80009aa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028c6:	4811      	ldr	r0, [pc, #68]	@ (800290c <prvCheckForValidListAndQueue+0x5c>)
 80028c8:	f7fe f86f 	bl	80009aa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028cc:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <prvCheckForValidListAndQueue+0x60>)
 80028ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <prvCheckForValidListAndQueue+0x58>)
 80028d0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <prvCheckForValidListAndQueue+0x64>)
 80028d4:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <prvCheckForValidListAndQueue+0x5c>)
 80028d6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028d8:	2200      	movs	r2, #0
 80028da:	210c      	movs	r1, #12
 80028dc:	200a      	movs	r0, #10
 80028de:	f7fe f983 	bl	8000be8 <xQueueGenericCreate>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <prvCheckForValidListAndQueue+0x54>)
 80028e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <prvCheckForValidListAndQueue+0x54>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <prvCheckForValidListAndQueue+0x54>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4908      	ldr	r1, [pc, #32]	@ (8002918 <prvCheckForValidListAndQueue+0x68>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fd9a 	bl	8001430 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028fc:	f000 f94e 	bl	8002b9c <vPortExitCritical>
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200001f8 	.word	0x200001f8
 8002908:	200001c8 	.word	0x200001c8
 800290c:	200001dc 	.word	0x200001dc
 8002910:	200001f0 	.word	0x200001f0
 8002914:	200001f4 	.word	0x200001f4
 8002918:	080048d8 	.word	0x080048d8

0800291c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3b04      	subs	r3, #4
 800292c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3b04      	subs	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b04      	subs	r3, #4
 800294a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800294c:	4a0c      	ldr	r2, [pc, #48]	@ (8002980 <pxPortInitialiseStack+0x64>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3b14      	subs	r3, #20
 8002956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3b04      	subs	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f06f 0202 	mvn.w	r2, #2
 800296a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3b20      	subs	r3, #32
 8002970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	08002985 	.word	0x08002985

08002984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <prvTaskExitError+0x40>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d00b      	beq.n	80029ac <prvTaskExitError+0x28>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	607b      	str	r3, [r7, #4]
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <prvTaskExitError+0x24>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	603b      	str	r3, [r7, #0]
}
 80029be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <prvTaskExitError+0x3c>
 80029c4:	20000004 	.word	0x20000004
	...

080029d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029d0:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <pxCurrentTCBConst2>)
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	6808      	ldr	r0, [r1, #0]
 80029d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029da:	f380 8809 	msr	PSP, r0
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f380 8811 	msr	BASEPRI, r0
 80029ea:	4770      	bx	lr
 80029ec:	f3af 8000 	nop.w

080029f0 <pxCurrentTCBConst2>:
 80029f0:	200000c4 	.word	0x200000c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop

080029f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80029f8:	4806      	ldr	r0, [pc, #24]	@ (8002a14 <prvPortStartFirstTask+0x1c>)
 80029fa:	6800      	ldr	r0, [r0, #0]
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f380 8808 	msr	MSP, r0
 8002a02:	b662      	cpsie	i
 8002a04:	b661      	cpsie	f
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	df00      	svc	0
 8002a10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a12:	bf00      	nop
 8002a14:	e000ed08 	.word	0xe000ed08

08002a18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <xPortStartScheduler+0xfc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a3d      	ldr	r2, [pc, #244]	@ (8002b18 <xPortStartScheduler+0x100>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d10b      	bne.n	8002a40 <xPortStartScheduler+0x28>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	613b      	str	r3, [r7, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a40:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <xPortStartScheduler+0xfc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a35      	ldr	r2, [pc, #212]	@ (8002b1c <xPortStartScheduler+0x104>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10b      	bne.n	8002a62 <xPortStartScheduler+0x4a>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	60fb      	str	r3, [r7, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	e7fd      	b.n	8002a5e <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <xPortStartScheduler+0x108>)
 8002a64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	22ff      	movs	r2, #255	@ 0xff
 8002a72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <xPortStartScheduler+0x10c>)
 8002a88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a90:	e009      	b.n	8002aa6 <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002a92:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	4a23      	ldr	r2, [pc, #140]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002a9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aae:	2b80      	cmp	r3, #128	@ 0x80
 8002ab0:	d0ef      	beq.n	8002a92 <xPortStartScheduler+0x7a>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002aba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <xPortStartScheduler+0x110>)
 8002ac6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ad0:	4b16      	ldr	r3, [pc, #88]	@ (8002b2c <xPortStartScheduler+0x114>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	@ (8002b2c <xPortStartScheduler+0x114>)
 8002ad6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ada:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002adc:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <xPortStartScheduler+0x114>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <xPortStartScheduler+0x114>)
 8002ae2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002ae6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ae8:	f000 f8d8 	bl	8002c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aec:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <xPortStartScheduler+0x118>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002af2:	f000 f8ef 	bl	8002cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <xPortStartScheduler+0x11c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <xPortStartScheduler+0x11c>)
 8002afc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002b00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002b02:	f7ff ff79 	bl	80029f8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002b06:	f7ff ff3d 	bl	8002984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	e000ed00 	.word	0xe000ed00
 8002b18:	410fc271 	.word	0x410fc271
 8002b1c:	410fc270 	.word	0x410fc270
 8002b20:	e000e400 	.word	0xe000e400
 8002b24:	20000204 	.word	0x20000204
 8002b28:	20000208 	.word	0x20000208
 8002b2c:	e000ed20 	.word	0xe000ed20
 8002b30:	20000004 	.word	0x20000004
 8002b34:	e000ef34 	.word	0xe000ef34

08002b38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	607b      	str	r3, [r7, #4]
}
 8002b50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <vPortEnterCritical+0x5c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a0e      	ldr	r2, [pc, #56]	@ (8002b94 <vPortEnterCritical+0x5c>)
 8002b5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <vPortEnterCritical+0x5c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d110      	bne.n	8002b86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <vPortEnterCritical+0x60>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <vPortEnterCritical+0x4e>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	603b      	str	r3, [r7, #0]
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	e7fd      	b.n	8002b82 <vPortEnterCritical+0x4a>
	}
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000004 	.word	0x20000004
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ba2:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <vPortExitCritical+0x50>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <vPortExitCritical+0x26>
	__asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	607b      	str	r3, [r7, #4]
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	e7fd      	b.n	8002bbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <vPortExitCritical+0x50>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <vPortExitCritical+0x50>)
 8002bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002bcc:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <vPortExitCritical+0x50>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <vPortExitCritical+0x44>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f383 8811 	msr	BASEPRI, r3
}
 8002bde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	20000004 	.word	0x20000004

08002bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bf0:	f3ef 8009 	mrs	r0, PSP
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <pxCurrentTCBConst>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f01e 0f10 	tst.w	lr, #16
 8002c00:	bf08      	it	eq
 8002c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	6010      	str	r0, [r2, #0]
 8002c0c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002c14:	f380 8811 	msr	BASEPRI, r0
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f7fe ff9a 	bl	8001b58 <vTaskSwitchContext>
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f380 8811 	msr	BASEPRI, r0
 8002c2c:	bc08      	pop	{r3}
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c36:	f01e 0f10 	tst.w	lr, #16
 8002c3a:	bf08      	it	eq
 8002c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c40:	f380 8809 	msr	PSP, r0
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst>:
 8002c50:	200000c4 	.word	0x200000c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	607b      	str	r3, [r7, #4]
}
 8002c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c72:	f7fe feb3 	bl	80019dc <xTaskIncrementTick>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SysTick_Handler+0x40>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f383 8811 	msr	BASEPRI, r3
}
 8002c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <vPortSetupTimerInterrupt+0x28>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a08      	ldr	r2, [pc, #32]	@ (8002cc8 <vPortSetupTimerInterrupt+0x2c>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	099b      	lsrs	r3, r3, #6
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <vPortSetupTimerInterrupt+0x30>)
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	10624dd3 	.word	0x10624dd3
 8002ccc:	e000e014 	.word	0xe000e014
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ce4 <vPortEnableVFP+0x10>
 8002cd8:	6801      	ldr	r1, [r0, #0]
 8002cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002cde:	6001      	str	r1, [r0, #0]
 8002ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ce2:	bf00      	nop
 8002ce4:	e000ed88 	.word	0xe000ed88

08002ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002cee:	f3ef 8305 	mrs	r3, IPSR
 8002cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d915      	bls.n	8002d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cfa:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <vPortValidateInterruptPriority+0x74>)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d04:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <vPortValidateInterruptPriority+0x78>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	7afa      	ldrb	r2, [r7, #11]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20b      	bcs.n	8002d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	e7fd      	b.n	8002d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <vPortValidateInterruptPriority+0x7c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <vPortValidateInterruptPriority+0x80>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d90b      	bls.n	8002d4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	603b      	str	r3, [r7, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	e7fd      	b.n	8002d4a <vPortValidateInterruptPriority+0x62>
	}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e3f0 	.word	0xe000e3f0
 8002d60:	20000204 	.word	0x20000204
 8002d64:	e000ed0c 	.word	0xe000ed0c
 8002d68:	20000208 	.word	0x20000208

08002d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d78:	f7fe fd74 	bl	8001864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee8 <pvPortMalloc+0x17c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d84:	f000 f916 	bl	8002fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d88:	4b58      	ldr	r3, [pc, #352]	@ (8002eec <pvPortMalloc+0x180>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 8090 	bne.w	8002eb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01e      	beq.n	8002dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f023 0307 	bic.w	r3, r3, #7
 8002db4:	3308      	adds	r3, #8
 8002db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <pvPortMalloc+0x6e>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	617b      	str	r3, [r7, #20]
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d06a      	beq.n	8002eb6 <pvPortMalloc+0x14a>
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <pvPortMalloc+0x184>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d865      	bhi.n	8002eb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002dea:	4b42      	ldr	r3, [pc, #264]	@ (8002ef4 <pvPortMalloc+0x188>)
 8002dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002dee:	4b41      	ldr	r3, [pc, #260]	@ (8002ef4 <pvPortMalloc+0x188>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002df4:	e004      	b.n	8002e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d903      	bls.n	8002e12 <pvPortMalloc+0xa6>
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f1      	bne.n	8002df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e12:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <pvPortMalloc+0x17c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d04c      	beq.n	8002eb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2208      	movs	r2, #8
 8002e22:	4413      	add	r3, r2
 8002e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad2      	subs	r2, r2, r3
 8002e36:	2308      	movs	r3, #8
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d920      	bls.n	8002e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <pvPortMalloc+0xfc>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	613b      	str	r3, [r7, #16]
}
 8002e62:	bf00      	nop
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad2      	subs	r2, r2, r3
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e7a:	69b8      	ldr	r0, [r7, #24]
 8002e7c:	f000 f8fc 	bl	8003078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <pvPortMalloc+0x184>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	4a19      	ldr	r2, [pc, #100]	@ (8002ef0 <pvPortMalloc+0x184>)
 8002e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <pvPortMalloc+0x184>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <pvPortMalloc+0x18c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d203      	bcs.n	8002ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <pvPortMalloc+0x184>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a16      	ldr	r2, [pc, #88]	@ (8002ef8 <pvPortMalloc+0x18c>)
 8002ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <pvPortMalloc+0x180>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002eb6:	f7fe fce3 	bl	8001880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <pvPortMalloc+0x170>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	60fb      	str	r3, [r7, #12]
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <pvPortMalloc+0x16c>
	return pvReturn;
 8002edc:	69fb      	ldr	r3, [r7, #28]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3728      	adds	r7, #40	@ 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	2000ca14 	.word	0x2000ca14
 8002eec:	2000ca20 	.word	0x2000ca20
 8002ef0:	2000ca18 	.word	0x2000ca18
 8002ef4:	2000ca0c 	.word	0x2000ca0c
 8002ef8:	2000ca1c 	.word	0x2000ca1c

08002efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04a      	beq.n	8002fa4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f0e:	2308      	movs	r3, #8
 8002f10:	425b      	negs	r3, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4413      	add	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4b22      	ldr	r3, [pc, #136]	@ (8002fac <vPortFree+0xb0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <vPortFree+0x46>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60fb      	str	r3, [r7, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <vPortFree+0x66>
	__asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	60bb      	str	r3, [r7, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	e7fd      	b.n	8002f5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <vPortFree+0xb0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d019      	beq.n	8002fa4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <vPortFree+0xb0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f88:	f7fe fc6c 	bl	8001864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <vPortFree+0xb4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	4a06      	ldr	r2, [pc, #24]	@ (8002fb0 <vPortFree+0xb4>)
 8002f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f9a:	6938      	ldr	r0, [r7, #16]
 8002f9c:	f000 f86c 	bl	8003078 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002fa0:	f7fe fc6e 	bl	8001880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000ca20 	.word	0x2000ca20
 8002fb0:	2000ca18 	.word	0x2000ca18

08002fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fba:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fc0:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <prvHeapInit+0xac>)
 8002fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3307      	adds	r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0307 	bic.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <prvHeapInit+0xac>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fec:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <prvHeapInit+0xb0>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <prvHeapInit+0xb0>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003000:	2208      	movs	r2, #8
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0307 	bic.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <prvHeapInit+0xb4>)
 8003014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <prvHeapInit+0xb4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <prvHeapInit+0xb4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	1ad2      	subs	r2, r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <prvHeapInit+0xb4>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <prvHeapInit+0xb8>)
 8003042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <prvHeapInit+0xbc>)
 800304a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <prvHeapInit+0xc0>)
 800304e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	2000020c 	.word	0x2000020c
 8003064:	2000ca0c 	.word	0x2000ca0c
 8003068:	2000ca14 	.word	0x2000ca14
 800306c:	2000ca1c 	.word	0x2000ca1c
 8003070:	2000ca18 	.word	0x2000ca18
 8003074:	2000ca20 	.word	0x2000ca20

08003078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <prvInsertBlockIntoFreeList+0xac>)
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e002      	b.n	800308c <prvInsertBlockIntoFreeList+0x14>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d8f7      	bhi.n	8003086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d108      	bne.n	80030ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	441a      	add	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d118      	bne.n	8003100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <prvInsertBlockIntoFreeList+0xb0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d00d      	beq.n	80030f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e008      	b.n	8003108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <prvInsertBlockIntoFreeList+0xb0>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e003      	b.n	8003108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d002      	beq.n	8003116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000ca0c 	.word	0x2000ca0c
 8003128:	2000ca14 	.word	0x2000ca14

0800312c <LED_voidInit>:
/* HAL */
#include "LED_interface.h"


void LED_voidInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
	// Step 1: Enable the GPIO clock for the corresponding port using switch
	   switch ((uint32_t)GPIOx) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a4e      	ldr	r2, [pc, #312]	@ (8003274 <LED_voidInit+0x148>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d069      	beq.n	8003214 <LED_voidInit+0xe8>
 8003140:	4a4c      	ldr	r2, [pc, #304]	@ (8003274 <LED_voidInit+0x148>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f200 8092 	bhi.w	800326c <LED_voidInit+0x140>
 8003148:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <LED_voidInit+0x14c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d053      	beq.n	80031f6 <LED_voidInit+0xca>
 800314e:	4a4a      	ldr	r2, [pc, #296]	@ (8003278 <LED_voidInit+0x14c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	f200 808b 	bhi.w	800326c <LED_voidInit+0x140>
 8003156:	4a49      	ldr	r2, [pc, #292]	@ (800327c <LED_voidInit+0x150>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03d      	beq.n	80031d8 <LED_voidInit+0xac>
 800315c:	4a47      	ldr	r2, [pc, #284]	@ (800327c <LED_voidInit+0x150>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f200 8084 	bhi.w	800326c <LED_voidInit+0x140>
 8003164:	4a46      	ldr	r2, [pc, #280]	@ (8003280 <LED_voidInit+0x154>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d027      	beq.n	80031ba <LED_voidInit+0x8e>
 800316a:	4a45      	ldr	r2, [pc, #276]	@ (8003280 <LED_voidInit+0x154>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d87d      	bhi.n	800326c <LED_voidInit+0x140>
 8003170:	4a44      	ldr	r2, [pc, #272]	@ (8003284 <LED_voidInit+0x158>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <LED_voidInit+0x52>
 8003176:	4a44      	ldr	r2, [pc, #272]	@ (8003288 <LED_voidInit+0x15c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00f      	beq.n	800319c <LED_voidInit+0x70>
	        case (uint32_t)GPIOH:
	            __HAL_RCC_GPIOH_CLK_ENABLE();  // Enable the clock for GPIO Port H
	            break;
	        default:
	            // Invalid GPIO port, handle error if needed
	            return;
 800317c:	e076      	b.n	800326c <LED_voidInit+0x140>
	            __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable the clock for GPIO Port A
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	4b42      	ldr	r3, [pc, #264]	@ (800328c <LED_voidInit+0x160>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a41      	ldr	r2, [pc, #260]	@ (800328c <LED_voidInit+0x160>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b3f      	ldr	r3, [pc, #252]	@ (800328c <LED_voidInit+0x160>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
	            break;
 800319a:	e04a      	b.n	8003232 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable the clock for GPIO Port B
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	4b3a      	ldr	r3, [pc, #232]	@ (800328c <LED_voidInit+0x160>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	4a39      	ldr	r2, [pc, #228]	@ (800328c <LED_voidInit+0x160>)
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ac:	4b37      	ldr	r3, [pc, #220]	@ (800328c <LED_voidInit+0x160>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	69fb      	ldr	r3, [r7, #28]
	            break;
 80031b8:	e03b      	b.n	8003232 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable the clock for GPIO Port C
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	4b33      	ldr	r3, [pc, #204]	@ (800328c <LED_voidInit+0x160>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	4a32      	ldr	r2, [pc, #200]	@ (800328c <LED_voidInit+0x160>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ca:	4b30      	ldr	r3, [pc, #192]	@ (800328c <LED_voidInit+0x160>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	69bb      	ldr	r3, [r7, #24]
	            break;
 80031d6:	e02c      	b.n	8003232 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOD_CLK_ENABLE();  // Enable the clock for GPIO Port D
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <LED_voidInit+0x160>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	4a2a      	ldr	r2, [pc, #168]	@ (800328c <LED_voidInit+0x160>)
 80031e2:	f043 0308 	orr.w	r3, r3, #8
 80031e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e8:	4b28      	ldr	r3, [pc, #160]	@ (800328c <LED_voidInit+0x160>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
	            break;
 80031f4:	e01d      	b.n	8003232 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOE_CLK_ENABLE();  // Enable the clock for GPIO Port E
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <LED_voidInit+0x160>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a23      	ldr	r2, [pc, #140]	@ (800328c <LED_voidInit+0x160>)
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <LED_voidInit+0x160>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
	            break;
 8003212:	e00e      	b.n	8003232 <LED_voidInit+0x106>
	            __HAL_RCC_GPIOH_CLK_ENABLE();  // Enable the clock for GPIO Port H
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <LED_voidInit+0x160>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	4a1b      	ldr	r2, [pc, #108]	@ (800328c <LED_voidInit+0x160>)
 800321e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003222:	6313      	str	r3, [r2, #48]	@ 0x30
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <LED_voidInit+0x160>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
	            break;
 8003230:	bf00      	nop
	    }
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	2200      	movs	r2, #0
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fbeb 	bl	8003a14 <HAL_GPIO_WritePin>
    // Step 2: Define a GPIO_InitTypeDef structure to hold the configuration
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

    // Step 3: Configure Pin on Port as an output
    GPIO_InitStruct.Pin = GPIO_Pin;                 // Select Pin
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;       // Set as Push-Pull output
 8003252:	2301      	movs	r3, #1
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;               // No internal pull-up or pull-down
 8003256:	2300      	movs	r3, #0
 8003258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // Set output speed (LOW, MEDIUM, HIGH)
 800325a:	2300      	movs	r3, #0
 800325c:	633b      	str	r3, [r7, #48]	@ 0x30

    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);           // Initialize the pin on Port
 800325e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fa51 	bl	800370c <HAL_GPIO_Init>
 800326a:	e000      	b.n	800326e <LED_voidInit+0x142>
	            return;
 800326c:	bf00      	nop
}
 800326e:	3738      	adds	r7, #56	@ 0x38
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021c00 	.word	0x40021c00
 8003278:	40021000 	.word	0x40021000
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40020800 	.word	0x40020800
 8003284:	40020000 	.word	0x40020000
 8003288:	40020400 	.word	0x40020400
 800328c:	40023800 	.word	0x40023800

08003290 <LED_voidOn>:


void LED_voidOn(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t copy_u8LedConnectionType)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
	switch(copy_u8LedConnectionType)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <LED_voidOn+0x1c>
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d007      	beq.n	80032ba <LED_voidOn+0x2a>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
			break;

		default :
			// return Error State
			break;
 80032aa:	e00d      	b.n	80032c8 <LED_voidOn+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fbae 	bl	8003a14 <HAL_GPIO_WritePin>
			break;
 80032b8:	e006      	b.n	80032c8 <LED_voidOn+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	2200      	movs	r2, #0
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fba7 	bl	8003a14 <HAL_GPIO_WritePin>
			break;
 80032c6:	bf00      	nop
	}
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <LED_voidOff>:


void LED_voidOff(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t copy_u8LedConnectionType)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
	switch(copy_u8LedConnectionType)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d002      	beq.n	80032ec <LED_voidOff+0x1c>
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d007      	beq.n	80032fa <LED_voidOff+0x2a>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
			break;

		default :
			// return Error State
			break;
 80032ea:	e00d      	b.n	8003308 <LED_voidOff+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	2200      	movs	r2, #0
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fb8e 	bl	8003a14 <HAL_GPIO_WritePin>
			break;
 80032f8:	e006      	b.n	8003308 <LED_voidOff+0x38>
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	2201      	movs	r2, #1
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fb87 	bl	8003a14 <HAL_GPIO_WritePin>
			break;
 8003306:	bf00      	nop
		}
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <SSD_voidInit>:
		0b01111111,
		0b01101111,
};

void SSD_voidInit(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b092      	sub	sp, #72	@ 0x48
 8003314:	af00      	add	r7, sp, #0
	switch ((uint32_t)SSD_ENABLE_PORT) {
			case (uint32_t)GPIOA:
				__HAL_RCC_GPIOA_CLK_ENABLE();
				break;
			case (uint32_t)GPIOB:
				__HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <SSD_voidInit+0xec>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a37      	ldr	r2, [pc, #220]	@ (80033fc <SSD_voidInit+0xec>)
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b35      	ldr	r3, [pc, #212]	@ (80033fc <SSD_voidInit+0xec>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
				break;
 8003332:	bf00      	nop
			default:
				// Invalid GPIO port, handle error if needed
			return;
	}

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = SSD_K1_ENABLE_PIN | SSD_K2_ENABLE_PIN;                 // Select Pin
 8003344:	2302      	movs	r3, #2
 8003346:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;       // Set as Push-Pull output
 8003348:	2301      	movs	r3, #1
 800334a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;               // No internal pull-up or pull-down
 800334c:	2300      	movs	r3, #0
 800334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // Set output speed (LOW, MEDIUM, HIGH)
 8003350:	2300      	movs	r3, #0
 8003352:	643b      	str	r3, [r7, #64]	@ 0x40

    HAL_GPIO_Init(SSD_ENABLE_PORT, &GPIO_InitStruct);           // Initialize the pin on Port
 8003354:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003358:	4619      	mov	r1, r3
 800335a:	4829      	ldr	r0, [pc, #164]	@ (8003400 <SSD_voidInit+0xf0>)
 800335c:	f000 f9d6 	bl	800370c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, GPIO_PIN_RESET);
 8003360:	2200      	movs	r2, #0
 8003362:	2102      	movs	r1, #2
 8003364:	4826      	ldr	r0, [pc, #152]	@ (8003400 <SSD_voidInit+0xf0>)
 8003366:	f000 fb55 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, GPIO_PIN_RESET);
 800336a:	2200      	movs	r2, #0
 800336c:	2102      	movs	r1, #2
 800336e:	4824      	ldr	r0, [pc, #144]	@ (8003400 <SSD_voidInit+0xf0>)
 8003370:	f000 fb50 	bl	8003a14 <HAL_GPIO_WritePin>

	switch ((uint32_t)SSD_DATA_PORT) {
		case (uint32_t)GPIOA:
				__HAL_RCC_GPIOA_CLK_ENABLE(); 
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <SSD_voidInit+0xec>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <SSD_voidInit+0xec>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6313      	str	r3, [r2, #48]	@ 0x30
 8003384:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <SSD_voidInit+0xec>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	69bb      	ldr	r3, [r7, #24]
			break;
 8003390:	bf00      	nop
			// Invalid GPIO port, handle error if needed
		return;
	}


    GPIO_InitStruct.Pin = SSD_DATA_PIN_0|SSD_DATA_PIN_1|SSD_DATA_PIN_2|SSD_DATA_PIN_3|SSD_DATA_PIN_4|SSD_DATA_PIN_5|SSD_DATA_PIN_6;                 // Select Pin
 8003392:	23fe      	movs	r3, #254	@ 0xfe
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;       // Set as Push-Pull output
 8003396:	2301      	movs	r3, #1
 8003398:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;               // No internal pull-up or pull-down
 800339a:	2300      	movs	r3, #0
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // Set output speed (LOW, MEDIUM, HIGH)
 800339e:	2300      	movs	r3, #0
 80033a0:	643b      	str	r3, [r7, #64]	@ 0x40

    HAL_GPIO_Init(SSD_DATA_PORT, &GPIO_InitStruct);           // Initialize the pin on Port
 80033a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033a6:	4619      	mov	r1, r3
 80033a8:	4816      	ldr	r0, [pc, #88]	@ (8003404 <SSD_voidInit+0xf4>)
 80033aa:	f000 f9af 	bl	800370c <HAL_GPIO_Init>


	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_0, GPIO_PIN_RESET);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	4814      	ldr	r0, [pc, #80]	@ (8003404 <SSD_voidInit+0xf4>)
 80033b4:	f000 fb2e 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_1, GPIO_PIN_RESET);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2140      	movs	r1, #64	@ 0x40
 80033bc:	4811      	ldr	r0, [pc, #68]	@ (8003404 <SSD_voidInit+0xf4>)
 80033be:	f000 fb29 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_2, GPIO_PIN_RESET);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2120      	movs	r1, #32
 80033c6:	480f      	ldr	r0, [pc, #60]	@ (8003404 <SSD_voidInit+0xf4>)
 80033c8:	f000 fb24 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_3, GPIO_PIN_RESET);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2110      	movs	r1, #16
 80033d0:	480c      	ldr	r0, [pc, #48]	@ (8003404 <SSD_voidInit+0xf4>)
 80033d2:	f000 fb1f 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_4, GPIO_PIN_RESET);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2108      	movs	r1, #8
 80033da:	480a      	ldr	r0, [pc, #40]	@ (8003404 <SSD_voidInit+0xf4>)
 80033dc:	f000 fb1a 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_5, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2104      	movs	r1, #4
 80033e4:	4807      	ldr	r0, [pc, #28]	@ (8003404 <SSD_voidInit+0xf4>)
 80033e6:	f000 fb15 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_6, GPIO_PIN_RESET);
 80033ea:	2200      	movs	r2, #0
 80033ec:	2102      	movs	r1, #2
 80033ee:	4805      	ldr	r0, [pc, #20]	@ (8003404 <SSD_voidInit+0xf4>)
 80033f0:	f000 fb10 	bl	8003a14 <HAL_GPIO_WritePin>

}
 80033f4:	3748      	adds	r7, #72	@ 0x48
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020400 	.word	0x40020400
 8003404:	40020000 	.word	0x40020000

08003408 <SSD_voidDisplayNumber>:


void SSD_voidDisplayNumber(uint8_t copy_u8DesiredNumber, uint8_t copy_u8Id)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	460a      	mov	r2, r1
 8003412:	71fb      	strb	r3, [r7, #7]
 8003414:	4613      	mov	r3, r2
 8003416:	71bb      	strb	r3, [r7, #6]

	if(copy_u8DesiredNumber<=9)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b09      	cmp	r3, #9
 800341c:	d848      	bhi.n	80034b0 <SSD_voidDisplayNumber+0xa8>
	{
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_0, GPIO_PIN_RESET);
 800341e:	2200      	movs	r2, #0
 8003420:	2180      	movs	r1, #128	@ 0x80
 8003422:	4825      	ldr	r0, [pc, #148]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 8003424:	f000 faf6 	bl	8003a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_1, GPIO_PIN_RESET);
 8003428:	2200      	movs	r2, #0
 800342a:	2140      	movs	r1, #64	@ 0x40
 800342c:	4822      	ldr	r0, [pc, #136]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 800342e:	f000 faf1 	bl	8003a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_2, GPIO_PIN_RESET);
 8003432:	2200      	movs	r2, #0
 8003434:	2120      	movs	r1, #32
 8003436:	4820      	ldr	r0, [pc, #128]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 8003438:	f000 faec 	bl	8003a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_3, GPIO_PIN_RESET);
 800343c:	2200      	movs	r2, #0
 800343e:	2110      	movs	r1, #16
 8003440:	481d      	ldr	r0, [pc, #116]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 8003442:	f000 fae7 	bl	8003a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_4, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	2108      	movs	r1, #8
 800344a:	481b      	ldr	r0, [pc, #108]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 800344c:	f000 fae2 	bl	8003a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_5, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	2104      	movs	r1, #4
 8003454:	4818      	ldr	r0, [pc, #96]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 8003456:	f000 fadd 	bl	8003a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD_DATA_PORT, SSD_DATA_PIN_6, GPIO_PIN_RESET);
 800345a:	2200      	movs	r2, #0
 800345c:	2102      	movs	r1, #2
 800345e:	4816      	ldr	r0, [pc, #88]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 8003460:	f000 fad8 	bl	8003a14 <HAL_GPIO_WritePin>
		switch(copy_u8Id)
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d002      	beq.n	8003470 <SSD_voidDisplayNumber+0x68>
 800346a:	2b02      	cmp	r3, #2
 800346c:	d010      	beq.n	8003490 <SSD_voidDisplayNumber+0x88>
	}
	else
	{
		// return Error state
	}
}
 800346e:	e01f      	b.n	80034b0 <SSD_voidDisplayNumber+0xa8>
				HAL_GPIO_WritePin(SSD_DATA_PORT, ~(PRV_u8Numbers[copy_u8DesiredNumber]), GPIO_PIN_SET);
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <SSD_voidDisplayNumber+0xb4>)
 8003474:	5cd3      	ldrb	r3, [r2, r3]
 8003476:	43db      	mvns	r3, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	2201      	movs	r2, #1
 800347c:	4619      	mov	r1, r3
 800347e:	480e      	ldr	r0, [pc, #56]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 8003480:	f000 fac8 	bl	8003a14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, GPIO_PIN_SET);
 8003484:	2201      	movs	r2, #1
 8003486:	2102      	movs	r1, #2
 8003488:	480d      	ldr	r0, [pc, #52]	@ (80034c0 <SSD_voidDisplayNumber+0xb8>)
 800348a:	f000 fac3 	bl	8003a14 <HAL_GPIO_WritePin>
					break;
 800348e:	e00f      	b.n	80034b0 <SSD_voidDisplayNumber+0xa8>
				HAL_GPIO_WritePin(SSD_DATA_PORT, ~(PRV_u8Numbers[copy_u8DesiredNumber]), GPIO_PIN_SET);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <SSD_voidDisplayNumber+0xb4>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	43db      	mvns	r3, r3
 8003498:	b29b      	uxth	r3, r3
 800349a:	2201      	movs	r2, #1
 800349c:	4619      	mov	r1, r3
 800349e:	4806      	ldr	r0, [pc, #24]	@ (80034b8 <SSD_voidDisplayNumber+0xb0>)
 80034a0:	f000 fab8 	bl	8003a14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, GPIO_PIN_SET);
 80034a4:	2201      	movs	r2, #1
 80034a6:	2102      	movs	r1, #2
 80034a8:	4805      	ldr	r0, [pc, #20]	@ (80034c0 <SSD_voidDisplayNumber+0xb8>)
 80034aa:	f000 fab3 	bl	8003a14 <HAL_GPIO_WritePin>
			break;
 80034ae:	bf00      	nop
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40020000 	.word	0x40020000
 80034bc:	20000008 	.word	0x20000008
 80034c0:	40020400 	.word	0x40020400

080034c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <HAL_Init+0x40>)
 80034ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_Init+0x40>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <HAL_Init+0x40>)
 80034da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e0:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <HAL_Init+0x40>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <HAL_Init+0x40>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ec:	2003      	movs	r0, #3
 80034ee:	f000 f8d8 	bl	80036a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034f2:	200f      	movs	r0, #15
 80034f4:	f7fd f97c 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f8:	f7fd f952 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00

08003508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_IncTick+0x20>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_IncTick+0x24>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4413      	add	r3, r2
 8003518:	4a04      	ldr	r2, [pc, #16]	@ (800352c <HAL_IncTick+0x24>)
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000018 	.word	0x20000018
 800352c:	2000ca24 	.word	0x2000ca24

08003530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <HAL_GetTick+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000ca24 	.word	0x2000ca24

08003548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357a:	4a04      	ldr	r2, [pc, #16]	@ (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	60d3      	str	r3, [r2, #12]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0307 	and.w	r3, r3, #7
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0b      	blt.n	80035d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4907      	ldr	r1, [pc, #28]	@ (80035e4 <__NVIC_EnableIRQ+0x38>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2001      	movs	r0, #1
 80035ce:	fa00 f202 	lsl.w	r2, r0, r2
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	@ (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	@ (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
         );
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	@ 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ff4c 	bl	8003548 <__NVIC_SetPriorityGrouping>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ca:	f7ff ff61 	bl	8003590 <__NVIC_GetPriorityGrouping>
 80036ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	6978      	ldr	r0, [r7, #20]
 80036d6:	f7ff ffb1 	bl	800363c <NVIC_EncodePriority>
 80036da:	4602      	mov	r2, r0
 80036dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ff80 	bl	80035e8 <__NVIC_SetPriority>
}
 80036e8:	bf00      	nop
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff54 	bl	80035ac <__NVIC_EnableIRQ>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	@ 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e159      	b.n	80039dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	f040 8148 	bne.w	80039d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d005      	beq.n	800375e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375a:	2b02      	cmp	r3, #2
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d017      	beq.n	80037fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d123      	bne.n	8003850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a2 	beq.w	80039d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b57      	ldr	r3, [pc, #348]	@ (80039f4 <HAL_GPIO_Init+0x2e8>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_GPIO_Init+0x2e8>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038a2:	4b54      	ldr	r3, [pc, #336]	@ (80039f4 <HAL_GPIO_Init+0x2e8>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a52      	ldr	r2, [pc, #328]	@ (80039f8 <HAL_GPIO_Init+0x2ec>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a49      	ldr	r2, [pc, #292]	@ (80039fc <HAL_GPIO_Init+0x2f0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d019      	beq.n	800390e <HAL_GPIO_Init+0x202>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a48      	ldr	r2, [pc, #288]	@ (8003a00 <HAL_GPIO_Init+0x2f4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0x1fe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a47      	ldr	r2, [pc, #284]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x1fa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a46      	ldr	r2, [pc, #280]	@ (8003a08 <HAL_GPIO_Init+0x2fc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x1f6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a45      	ldr	r2, [pc, #276]	@ (8003a0c <HAL_GPIO_Init+0x300>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x1f2>
 80038fa:	2304      	movs	r3, #4
 80038fc:	e008      	b.n	8003910 <HAL_GPIO_Init+0x204>
 80038fe:	2307      	movs	r3, #7
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x204>
 8003902:	2303      	movs	r3, #3
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x204>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x204>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x204>
 800390e:	2300      	movs	r3, #0
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	f002 0203 	and.w	r2, r2, #3
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003920:	4935      	ldr	r1, [pc, #212]	@ (80039f8 <HAL_GPIO_Init+0x2ec>)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392e:	4b38      	ldr	r3, [pc, #224]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003952:	4a2f      	ldr	r2, [pc, #188]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003958:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800397c:	4a24      	ldr	r2, [pc, #144]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003982:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ac:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3301      	adds	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	f67f aea2 	bls.w	8003728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3724      	adds	r7, #36	@ 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020800 	.word	0x40020800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e267      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d075      	beq.n	8003b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a66:	4b88      	ldr	r3, [pc, #544]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d00c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b85      	ldr	r3, [pc, #532]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d112      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4b82      	ldr	r3, [pc, #520]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05b      	beq.n	8003b50 <HAL_RCC_OscConfig+0x108>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d157      	bne.n	8003b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e242      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x74>
 8003aae:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xb0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x98>
 8003ac6:	4b70      	ldr	r3, [pc, #448]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6f      	ldr	r2, [pc, #444]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6c      	ldr	r2, [pc, #432]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xb0>
 8003ae0:	4b69      	ldr	r3, [pc, #420]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a68      	ldr	r2, [pc, #416]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b66      	ldr	r3, [pc, #408]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a65      	ldr	r2, [pc, #404]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7ff fd16 	bl	8003530 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7ff fd12 	bl	8003530 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e207      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xc0>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7ff fd02 	bl	8003530 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7ff fcfe 	bl	8003530 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1f3      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b51      	ldr	r3, [pc, #324]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0xe8>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d063      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d11c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b44      	ldr	r3, [pc, #272]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1c7      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4937      	ldr	r1, [pc, #220]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e03a      	b.n	8003c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b34      	ldr	r3, [pc, #208]	@ (8003c8c <HAL_RCC_OscConfig+0x244>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7ff fcb7 	bl	8003530 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7ff fcb3 	bl	8003530 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1a8      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	4b28      	ldr	r3, [pc, #160]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4925      	ldr	r1, [pc, #148]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfa:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_RCC_OscConfig+0x244>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7ff fc96 	bl	8003530 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7ff fc92 	bl	8003530 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e187      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d036      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3a:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <HAL_RCC_OscConfig+0x248>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7ff fc76 	bl	8003530 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7ff fc72 	bl	8003530 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e167      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x200>
 8003c66:	e01b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c68:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <HAL_RCC_OscConfig+0x248>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7ff fc5f 	bl	8003530 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	e00e      	b.n	8003c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7ff fc5b 	bl	8003530 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d907      	bls.n	8003c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e150      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	42470000 	.word	0x42470000
 8003c90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	4b88      	ldr	r3, [pc, #544]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ea      	bne.n	8003c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8097 	beq.w	8003ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	4b81      	ldr	r3, [pc, #516]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cce:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b77      	ldr	r3, [pc, #476]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d118      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b74      	ldr	r3, [pc, #464]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a73      	ldr	r2, [pc, #460]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf6:	f7ff fc1b 	bl	8003530 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7ff fc17 	bl	8003530 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e10c      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b6a      	ldr	r3, [pc, #424]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x2ea>
 8003d24:	4b64      	ldr	r3, [pc, #400]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d28:	4a63      	ldr	r2, [pc, #396]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d30:	e01c      	b.n	8003d6c <HAL_RCC_OscConfig+0x324>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x30c>
 8003d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d46:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0x324>
 8003d54:	4b58      	ldr	r3, [pc, #352]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	4a57      	ldr	r2, [pc, #348]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d60:	4b55      	ldr	r3, [pc, #340]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a54      	ldr	r2, [pc, #336]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f023 0304 	bic.w	r3, r3, #4
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7ff fbdc 	bl	8003530 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7ff fbd8 	bl	8003530 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0cb      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	4b49      	ldr	r3, [pc, #292]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ee      	beq.n	8003d7c <HAL_RCC_OscConfig+0x334>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da0:	f7ff fbc6 	bl	8003530 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7ff fbc2 	bl	8003530 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0b5      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ee      	bne.n	8003da8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b39      	ldr	r3, [pc, #228]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	4a38      	ldr	r2, [pc, #224]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a1 	beq.w	8003f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de6:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d05c      	beq.n	8003eac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d141      	bne.n	8003e7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <HAL_RCC_OscConfig+0x478>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7ff fb96 	bl	8003530 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7ff fb92 	bl	8003530 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e087      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	491b      	ldr	r1, [pc, #108]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCC_OscConfig+0x478>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7ff fb6b 	bl	8003530 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7ff fb67 	bl	8003530 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e05c      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x416>
 8003e7c:	e054      	b.n	8003f28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <HAL_RCC_OscConfig+0x478>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7ff fb54 	bl	8003530 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7ff fb50 	bl	8003530 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e045      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x444>
 8003eaa:	e03d      	b.n	8003f28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e038      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x4ec>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d028      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d121      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d11a      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d111      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800

08003f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0cc      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b68      	ldr	r3, [pc, #416]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d90c      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b65      	ldr	r3, [pc, #404]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0b8      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f8c:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a58      	ldr	r2, [pc, #352]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa4:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a52      	ldr	r2, [pc, #328]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b50      	ldr	r3, [pc, #320]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	494d      	ldr	r1, [pc, #308]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d044      	beq.n	8004058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d119      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004006:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e067      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004016:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 0203 	bic.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4934      	ldr	r1, [pc, #208]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004028:	f7ff fa82 	bl	8003530 <HAL_GetTick>
 800402c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	e00a      	b.n	8004046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7ff fa7e 	bl	8003530 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e04f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 020c 	and.w	r2, r3, #12
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	429a      	cmp	r2, r3
 8004056:	d1eb      	bne.n	8004030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004058:	4b25      	ldr	r3, [pc, #148]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d20c      	bcs.n	8004080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e032      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408c:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4916      	ldr	r1, [pc, #88]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	490e      	ldr	r1, [pc, #56]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040be:	f000 f821 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	490a      	ldr	r1, [pc, #40]	@ (80040f8 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	5ccb      	ldrb	r3, [r1, r3]
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a09      	ldr	r2, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040da:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc fb86 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00
 80040f4:	40023800 	.word	0x40023800
 80040f8:	080048e0 	.word	0x080048e0
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000014 	.word	0x20000014

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004108:	b090      	sub	sp, #64	@ 0x40
 800410a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800411c:	4b59      	ldr	r3, [pc, #356]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x180>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d00d      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x40>
 8004128:	2b08      	cmp	r3, #8
 800412a:	f200 80a1 	bhi.w	8004270 <HAL_RCC_GetSysClockFreq+0x16c>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x34>
 8004132:	2b04      	cmp	r3, #4
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0x3a>
 8004136:	e09b      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x184>)
 800413a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800413c:	e09b      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413e:	4b53      	ldr	r3, [pc, #332]	@ (800428c <HAL_RCC_GetSysClockFreq+0x188>)
 8004140:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004142:	e098      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004144:	4b4f      	ldr	r3, [pc, #316]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x180>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800414c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414e:	4b4d      	ldr	r3, [pc, #308]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x180>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d028      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x180>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	2200      	movs	r2, #0
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	627a      	str	r2, [r7, #36]	@ 0x24
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800416c:	2100      	movs	r1, #0
 800416e:	4b47      	ldr	r3, [pc, #284]	@ (800428c <HAL_RCC_GetSysClockFreq+0x188>)
 8004170:	fb03 f201 	mul.w	r2, r3, r1
 8004174:	2300      	movs	r3, #0
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	4413      	add	r3, r2
 800417c:	4a43      	ldr	r2, [pc, #268]	@ (800428c <HAL_RCC_GetSysClockFreq+0x188>)
 800417e:	fba0 1202 	umull	r1, r2, r0, r2
 8004182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004184:	460a      	mov	r2, r1
 8004186:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800418a:	4413      	add	r3, r2
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	2200      	movs	r2, #0
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800419a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800419e:	f7fc f81f 	bl	80001e0 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4613      	mov	r3, r2
 80041a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041aa:	e053      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ac:	4b35      	ldr	r3, [pc, #212]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	2200      	movs	r2, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	617a      	str	r2, [r7, #20]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041be:	f04f 0b00 	mov.w	fp, #0
 80041c2:	4652      	mov	r2, sl
 80041c4:	465b      	mov	r3, fp
 80041c6:	f04f 0000 	mov.w	r0, #0
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	0159      	lsls	r1, r3, #5
 80041d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d4:	0150      	lsls	r0, r2, #5
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	ebb2 080a 	subs.w	r8, r2, sl
 80041de:	eb63 090b 	sbc.w	r9, r3, fp
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041f6:	ebb2 0408 	subs.w	r4, r2, r8
 80041fa:	eb63 0509 	sbc.w	r5, r3, r9
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	00eb      	lsls	r3, r5, #3
 8004208:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420c:	00e2      	lsls	r2, r4, #3
 800420e:	4614      	mov	r4, r2
 8004210:	461d      	mov	r5, r3
 8004212:	eb14 030a 	adds.w	r3, r4, sl
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	eb45 030b 	adc.w	r3, r5, fp
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800422a:	4629      	mov	r1, r5
 800422c:	028b      	lsls	r3, r1, #10
 800422e:	4621      	mov	r1, r4
 8004230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004234:	4621      	mov	r1, r4
 8004236:	028a      	lsls	r2, r1, #10
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	2200      	movs	r2, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004248:	f7fb ffca 	bl	80001e0 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4613      	mov	r3, r2
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x180>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	3301      	adds	r3, #1
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004264:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800426e:	e002      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x184>)
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004278:	4618      	mov	r0, r3
 800427a:	3740      	adds	r7, #64	@ 0x40
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
 8004288:	00f42400 	.word	0x00f42400
 800428c:	017d7840 	.word	0x017d7840

08004290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000000 	.word	0x20000000

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042ac:	f7ff fff0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a9b      	lsrs	r3, r3, #10
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	080048f0 	.word	0x080048f0

080042d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	220f      	movs	r2, #15
 80042de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042e0:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042ec:	4b0f      	ldr	r3, [pc, #60]	@ (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042f8:	4b0c      	ldr	r3, [pc, #48]	@ (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_GetClockConfig+0x5c>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004312:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <HAL_RCC_GetClockConfig+0x60>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0207 	and.w	r2, r3, #7
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	40023c00 	.word	0x40023c00

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e041      	b.n	80043ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f839 	bl	80043d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 f9b2 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e044      	b.n	800448a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <HAL_TIM_Base_Start_IT+0xb0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d013      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_TIM_Base_Start_IT+0xb4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d111      	bne.n	8004478 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d010      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e007      	b.n	8004488 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000

080044ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d020      	beq.n	8004510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01b      	beq.n	8004510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0202 	mvn.w	r2, #2
 80044e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8d2 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8c4 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8d5 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d020      	beq.n	800455c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01b      	beq.n	800455c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0204 	mvn.w	r2, #4
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8ac 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f89e 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8af 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d020      	beq.n	80045a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0208 	mvn.w	r2, #8
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2204      	movs	r2, #4
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f886 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f878 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f889 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d020      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01b      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0210 	mvn.w	r2, #16
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2208      	movs	r2, #8
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f860 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f852 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f863 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00c      	beq.n	8004618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0201 	mvn.w	r2, #1
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc f8ae 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8e6 	bl	8004808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f834 	bl	80046c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0220 	mvn.w	r2, #32
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8b8 	bl	80047f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3a      	ldr	r2, [pc, #232]	@ (80047d8 <TIM_Base_SetConfig+0xfc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a37      	ldr	r2, [pc, #220]	@ (80047dc <TIM_Base_SetConfig+0x100>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a36      	ldr	r2, [pc, #216]	@ (80047e0 <TIM_Base_SetConfig+0x104>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a35      	ldr	r2, [pc, #212]	@ (80047e4 <TIM_Base_SetConfig+0x108>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2b      	ldr	r2, [pc, #172]	@ (80047d8 <TIM_Base_SetConfig+0xfc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01b      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004734:	d017      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <TIM_Base_SetConfig+0x100>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a27      	ldr	r2, [pc, #156]	@ (80047e0 <TIM_Base_SetConfig+0x104>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00f      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a26      	ldr	r2, [pc, #152]	@ (80047e4 <TIM_Base_SetConfig+0x108>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00b      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a25      	ldr	r2, [pc, #148]	@ (80047e8 <TIM_Base_SetConfig+0x10c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a24      	ldr	r2, [pc, #144]	@ (80047ec <TIM_Base_SetConfig+0x110>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a23      	ldr	r2, [pc, #140]	@ (80047f0 <TIM_Base_SetConfig+0x114>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d108      	bne.n	8004778 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a0e      	ldr	r2, [pc, #56]	@ (80047d8 <TIM_Base_SetConfig+0xfc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]
  }
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800

080047f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	4d0d      	ldr	r5, [pc, #52]	@ (8004864 <__libc_init_array+0x38>)
 8004830:	4c0d      	ldr	r4, [pc, #52]	@ (8004868 <__libc_init_array+0x3c>)
 8004832:	1b64      	subs	r4, r4, r5
 8004834:	10a4      	asrs	r4, r4, #2
 8004836:	2600      	movs	r6, #0
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	4d0b      	ldr	r5, [pc, #44]	@ (800486c <__libc_init_array+0x40>)
 800483e:	4c0c      	ldr	r4, [pc, #48]	@ (8004870 <__libc_init_array+0x44>)
 8004840:	f000 f826 	bl	8004890 <_init>
 8004844:	1b64      	subs	r4, r4, r5
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	2600      	movs	r6, #0
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f855 3b04 	ldr.w	r3, [r5], #4
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f855 3b04 	ldr.w	r3, [r5], #4
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	08004900 	.word	0x08004900
 8004868:	08004900 	.word	0x08004900
 800486c:	08004900 	.word	0x08004900
 8004870:	08004904 	.word	0x08004904

08004874 <memcpy>:
 8004874:	440a      	add	r2, r1
 8004876:	4291      	cmp	r1, r2
 8004878:	f100 33ff 	add.w	r3, r0, #4294967295
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	4770      	bx	lr
 8004880:	b510      	push	{r4, lr}
 8004882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800488a:	4291      	cmp	r1, r2
 800488c:	d1f9      	bne.n	8004882 <memcpy+0xe>
 800488e:	bd10      	pop	{r4, pc}

08004890 <_init>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr

0800489c <_fini>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr
